import React, { useState, useEffect } from 'react';
import { Button, Tooltip, message, Modal, Input, Card, Avatar, Divider, Typography, Space, Form } from 'antd';
import { SwapOutlined, UserOutlined, ClockCircleOutlined, CalendarOutlined, ExclamationCircleOutlined } from '@ant-design/icons';
import { UnifiedAppointment } from '../../../types/appointment';
import consultationApi from '../../../api/endpoints/consultation';

const { Title, Text, Paragraph } = Typography;
const { TextArea } = Input;

interface ConsultationTransferButtonProps {
  consultation: UnifiedAppointment;
  onTransferSuccess?: () => void;
}

const ConsultationTransferButton: React.FC<ConsultationTransferButtonProps> = ({ 
  consultation, 
  onTransferSuccess 
}) => {
  const [canTransfer, setCanTransfer] = useState<boolean>(false);
  const [loading, setLoading] = useState(false);
  const [checking, setChecking] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [form] = Form.useForm();

  // Function ki·ªÉm tra c√≥ th·ªÉ transfer kh√¥ng
  const checkTransferAvailability = async () => {
    try {
      setChecking(true);
      
      // ‚úÖ Call real API ƒë·ªÉ check available doctors trong slot
      const response = await consultationApi.checkAvailableDoctors(consultation._id);
      const available = response.data.data?.available || false;
      
      setCanTransfer(available);
      
      console.log('üîç [DEBUG] Check transfer availability:', {
        consultationId: consultation._id,
        available,
        availableDoctors: response.data.data?.availableDoctors?.length || 0
      });
      
    } catch (error) {
      console.error('‚ùå Error checking transfer availability:', error);
      // Fallback: disable transfer button n·∫øu c√≥ l·ªói API
      setCanTransfer(false);
      message.warning('Kh√¥ng th·ªÉ ki·ªÉm tra t√¨nh tr·∫°ng slot. Vui l√≤ng th·ª≠ l·∫°i sau.');
    } finally {
      setChecking(false);
    }
  };

  // Check availability khi component mount ho·∫∑c consultation thay ƒë·ªïi
  useEffect(() => {
    if (['paid', 'scheduled', 'consulting', 'confirmed', 'pending_payment'].includes(consultation.status)) {
      checkTransferAvailability();
    } else {
      setCanTransfer(false);
    }
  }, [consultation._id, consultation.status]);

  // Handle open transfer modal
  const handleOpenModal = () => {
    setModalVisible(true);
  };

  // Handle transfer action
  const handleTransfer = async (values: { transferReason: string }) => {
    try {
      setLoading(true);
      
      // ‚úÖ Call real transfer API
      await consultationApi.transferConsultation(consultation._id, {
        newDoctorId: 'auto', // Backend s·∫Ω t·ª± ƒë·ªông ch·ªçn doctor available
        transferReason: values.transferReason
      });
      
      message.success('Chuy·ªÉn ca t∆∞ v·∫•n th√†nh c√¥ng cho b√°c sƒ© kh√°c');
      setModalVisible(false);
      form.resetFields();
      
      if (onTransferSuccess) {
        onTransferSuccess();
      }
      
    } catch (error: any) {
      console.error('‚ùå Transfer failed:', error);
      message.error(error.response?.data?.message || 'Chuy·ªÉn ca th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  // Handle cancel modal
  const handleCancel = () => {
    setModalVisible(false);
    form.resetFields();
  };

  // Kh√¥ng hi·ªÉn th·ªã n√∫t n·∫øu status kh√¥ng ph√π h·ª£p
  if (!['paid', 'scheduled', 'consulting', 'confirmed', 'pending_payment'].includes(consultation.status)) {
    return null;
  }

  // Tooltip text t√πy theo tr·∫°ng th√°i
  const getTooltipText = () => {
    if (checking) return "ƒêang ki·ªÉm tra t√¨nh tr·∫°ng slot...";
    if (canTransfer) return "Chuy·ªÉn ca t∆∞ v·∫•n cho b√°c sƒ© kh√°c";
    return "Kh√¥ng c√≥ b√°c sƒ© kh√°c trong slot n√†y - B·∫Øt bu·ªôc ph·∫£i l√†m";
  };

  // Button text t√πy theo tr·∫°ng th√°i
  const getButtonText = () => {
    if (checking) return "Ki·ªÉm tra...";
    if (canTransfer) return "Chuy·ªÉn ca";
    return "Kh√¥ng th·ªÉ chuy·ªÉn";
  };

  return (
    <Tooltip title={getTooltipText()}>
      <Button 
        type="text" 
        icon={<SwapOutlined />} 
        size="small"
        loading={loading || checking}
        disabled={!canTransfer}
        onClick={handleOpenModal}
        style={{
          color: canTransfer ? '#1890ff' : '#bfbfbf'
        }}
      >
        {getButtonText()}
      </Button>
      
      {/* ‚úÖ Beautiful Transfer Modal */}
      <Modal
        title={null}
        open={modalVisible}
        onCancel={handleCancel}
        footer={null}
        width={580}
        centered
        destroyOnClose
        maskClosable={false}
        style={{ borderRadius: '16px' }}
      >
        <div style={{ padding: '8px 4px' }}>
          {/* Header */}
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: '16px',
            marginBottom: '24px'
          }}>
            <div style={{
              width: '48px',
              height: '48px',
              borderRadius: '50%',
              backgroundColor: '#fff7e6',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              border: '2px solid #ffd666'
            }}>
              <SwapOutlined style={{ color: '#fa8c16', fontSize: '20px' }} />
            </div>
            <div>
              <Title level={3} style={{ margin: 0, color: '#1f2937' }}>
                Chuy·ªÉn ca t∆∞ v·∫•n
              </Title>
              <Text type="secondary" style={{ fontSize: '14px' }}>
                Chuy·ªÉn ca t∆∞ v·∫•n n√†y cho b√°c sƒ© kh√°c c√πng khung gi·ªù
              </Text>
            </div>
          </div>

          {/* Patient Info Card */}
          <Card 
            size="small" 
            style={{ 
              marginBottom: '20px',
              backgroundColor: '#f8fafc',
              borderRadius: '12px',
              border: '1px solid #e2e8f0'
            }}
          >
            <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
              <Avatar 
                icon={<UserOutlined />} 
                size={40}
                style={{ backgroundColor: '#3b82f6' }}
              />
              <div style={{ flex: 1 }}>
                <Text strong style={{ fontSize: '15px', color: '#1f2937' }}>
                  {consultation.patientName}
                </Text>
                <div style={{ marginTop: '4px' }}>
                  <Space size="middle">
                    <Text type="secondary" style={{ fontSize: '13px' }}>
                      <CalendarOutlined style={{ marginRight: '4px' }} />
                      {(() => {
                        const date = new Date(consultation.appointmentDate);
                        const day = date.getDate().toString().padStart(2, '0');
                        const month = (date.getMonth() + 1).toString().padStart(2, '0');
                        const year = date.getFullYear();
                        return `${day}/${month}/${year}`;
                      })()}
                    </Text>
                    <Text type="secondary" style={{ fontSize: '13px' }}>
                      <ClockCircleOutlined style={{ marginRight: '4px' }} />
                      {consultation.appointmentTime}
                    </Text>
                  </Space>
                </div>
              </div>
            </div>
          </Card>

          {/* Warning Notice */}
          <div style={{
            padding: '16px',
            backgroundColor: '#fff7e6',
            borderRadius: '8px',
            border: '1px solid #ffd666',
            marginBottom: '20px',
            display: 'flex',
            gap: '12px'
          }}>
            <ExclamationCircleOutlined style={{ 
              color: '#fa8c16', 
              fontSize: '16px',
              marginTop: '2px',
              flexShrink: 0
            }} />
            <div>
              <Text strong style={{ color: '#b45309', fontSize: '14px' }}>
                L∆∞u √Ω quan tr·ªçng:
              </Text>
              <Paragraph style={{ 
                margin: '4px 0 0 0',
                color: '#92400e',
                fontSize: '13px',
                lineHeight: '1.5'
              }}>
                H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m b√°c sƒ© kh√°c c√≥ slot kh·∫£ d·ª•ng trong c√πng th·ªùi gian ƒë·ªÉ thay th·∫ø. 
                L√Ω do chuy·ªÉn ca s·∫Ω ƒë∆∞·ª£c ghi l·∫°i ƒë·ªÉ theo d√µi.
              </Paragraph>
            </div>
          </div>

          {/* Transfer Form */}
          <Form
            form={form}
            onFinish={handleTransfer}
            layout="vertical"
          >
            <Form.Item
              label={
                <span style={{ fontWeight: 500, color: '#374151' }}>
                  L√Ω do chuy·ªÉn ca <span style={{ color: '#ef4444' }}>*</span>
                </span>
              }
              name="transferReason"
              rules={[
                { required: true, message: 'Vui l√≤ng nh·∫≠p l√Ω do chuy·ªÉn ca' },
                { min: 10, message: 'L√Ω do ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±' }
              ]}
            >
              <TextArea
                placeholder="V√≠ d·ª•: B·∫≠n l·ªãch kh·∫©n c·∫•p, v·∫•n ƒë·ªÅ s·ª©c kh·ªèe, c√≥ c√¥ng t√°c ƒë·ªôt xu·∫•t..."
                maxLength={200}
                showCount
                rows={4}
                style={{ 
                  borderRadius: '8px',
                  fontSize: '14px',
                  lineHeight: '1.5'
                }}
              />
            </Form.Item>

            {/* Actions */}
            <div style={{ 
              display: 'flex', 
              justifyContent: 'flex-end', 
              gap: '12px',
              marginTop: '24px'
            }}>
              <Button 
                size="large"
                onClick={handleCancel}
                style={{
                  minWidth: '100px',
                  borderRadius: '8px'
                }}
              >
                H·ªßy b·ªè
              </Button>
              <Button 
                type="primary"
                size="large"
                htmlType="submit"
                loading={loading}
                style={{
                  minWidth: '140px',
                  borderRadius: '8px',
                  backgroundColor: '#fa8c16',
                  borderColor: '#fa8c16'
                }}
              >
                X√°c nh·∫≠n chuy·ªÉn ca
              </Button>
            </div>
          </Form>
        </div>
      </Modal>
    </Tooltip>
  );
};

export default ConsultationTransferButton; 