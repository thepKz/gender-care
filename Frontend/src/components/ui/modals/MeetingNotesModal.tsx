import React, { useState, useEffect } from 'react';
import {
  Modal,
  Form,
  Input,
  Button,
  Space,
  Descriptions,
  Tag,
  message,
  Divider,
  Card,
  Row,
  Col,
  Checkbox,
  Alert
} from 'antd';
import {
  VideoCameraOutlined,
  EditOutlined,
  LinkOutlined,
  ClockCircleOutlined,
  UserOutlined,
  SaveOutlined,
  PoweroffOutlined,
  PhoneOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  CameraOutlined,
  MessageOutlined,
  CopyOutlined
} from '@ant-design/icons';
import consultationApi from '../../../api/endpoints/consultation';
import { meetingAPI } from '../../../api/endpoints/meeting';

const { TextArea } = Input;

interface MeetingNotesModalProps {
  visible: boolean;
  consultationId: string;
  consultationData: {
    patientName: string;
    patientPhone: string;
    appointmentTime: string;
    description: string;
  };
  onClose: () => void;
  onMeetingCompleted: () => void;
}

interface MeetingDetails {
  _id: string;
  meetingLink: string;
  status: string;
  notes?: string;
  maxParticipants: number;
  participantCount: number;
  scheduledTime: string;
  actualStartTime?: string;
  provider: string;
  meetingPassword?: string; // ‚ûï ADD: Password field
}

const MeetingNotesModal: React.FC<MeetingNotesModalProps> = ({
  visible,
  consultationId,
  consultationData,
  onClose,
  onMeetingCompleted
}) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [meetingDetails, setMeetingDetails] = useState<MeetingDetails | null>(null);
  const [loadingDetails, setLoadingDetails] = useState(false);

  // üé• Recording Confirmation Modal state
  const [recordingModalVisible, setRecordingModalVisible] = useState(false);
  const [recordingConfirmed, setRecordingConfirmed] = useState(false);

  // ‚ûï ADD: Meeting password state
  const [meetingPassword, setMeetingPassword] = useState<string>('');
  const [inviteLoading, setInviteLoading] = useState(false);

  // ‚ûï ADD: Send customer invite function
  const handleSendCustomerInvite = async () => {
    try {
      setInviteLoading(true);
      console.log('üìß [MODAL-INVITE] Sending customer invite for consultation:', consultationId);
      
      const response = await meetingAPI.sendCustomerInvite(consultationId);
      
      message.success(`üìß ƒê√£ g·ª≠i th∆∞ m·ªùi tham gia meeting cho ${consultationData.patientName}!`);
      console.log('‚úÖ Customer invite sent from modal:', response);
      
      // ‚úÖ Reload meeting details ƒë·ªÉ c·∫≠p nh·∫≠t UI v·ªõi status m·ªõi
      await loadMeetingDetails();
      
    } catch (error: unknown) {
      console.error('‚ùå Error sending customer invite from modal:', error);
      const errorMessage = error && typeof error === 'object' && 'response' in error 
        ? (error as { response?: { data?: { message?: string } } }).response?.data?.message 
        : 'Kh√¥ng th·ªÉ g·ª≠i th∆∞ m·ªùi cho customer';
      
      // ‚úÖ S·ª≠ d·ª•ng Modal.error ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n
      const fullErrorMessage = errorMessage || 'Kh√¥ng th·ªÉ g·ª≠i th∆∞ m·ªùi cho customer';
      
      // Parse error message ƒë·ªÉ format ƒë·∫πp h∆°n
      if (fullErrorMessage.includes('‚ö†Ô∏è B√°c sƒ© c·∫ßn chu·∫©n b·ªã meeting')) {
        const lines = fullErrorMessage.split('\n').filter(line => line.trim());
        const steps = lines.slice(2, 6); // L·∫•y 4 b∆∞·ªõc chu·∫©n b·ªã
        const status = lines[lines.length - 1];
        
        Modal.error({
          title: '‚ö†Ô∏è C·∫ßn chu·∫©n b·ªã meeting tr∆∞·ªõc',
          width: 500,
          content: (
            <div style={{ marginTop: '16px' }}>
              <Alert
                message="B√°c sƒ© c·∫ßn ho√†n th√†nh c√°c b∆∞·ªõc sau ƒë·ªÉ g·ª≠i th∆∞ m·ªùi:"
                type="warning"
                showIcon
                style={{ marginBottom: '16px' }}
              />
              <div style={{ marginBottom: '16px' }}>
                {steps.map((step, index) => (
                  <div key={index} style={{ 
                    marginBottom: '8px', 
                    padding: '8px 12px', 
                    background: '#f6ffed', 
                    border: '1px solid #b7eb8f',
                    borderRadius: '6px',
                    fontSize: '14px'
                  }}>
                    {step}
                  </div>
                ))}
              </div>
              <div style={{ 
                padding: '12px',
                background: '#fff1f0',
                border: '1px solid #ffccc7',
                borderRadius: '6px',
                fontSize: '14px',
                color: '#cf1322'
              }}>
                {status}
              </div>
            </div>
          ),
          okText: 'Hi·ªÉu r·ªìi',
          centered: true
        });
      } else {
        // Fallback cho c√°c l·ªói kh√°c
        Modal.error({
          title: '‚ùå Kh√¥ng th·ªÉ g·ª≠i th∆∞ m·ªùi',
          content: fullErrorMessage,
          okText: 'ƒê√≥ng',
          centered: true
        });
      }
    } finally {
      setInviteLoading(false);
    }
  };

  // Load meeting details khi modal m·ªü
  useEffect(() => {
    if (visible && consultationId) {
      // ‚úÖ Reset form ƒë·ªÉ ƒë·∫£m b·∫£o notes field lu√¥n tr·ªëng
      form.resetFields();
      loadMeetingDetails();
    }
  }, [visible, consultationId]);

  const loadMeetingDetails = async () => {
    try {
      setLoadingDetails(true);
      console.log(`üîë [MODAL-LOAD] Loading meeting details for consultation: ${consultationId}`);
      
      const response = await consultationApi.getMeetingDetails(consultationId);
      const details = response.data?.data;
      
      if (details) {
        setMeetingDetails(details);
        // ‚úÖ CH·ªà set maxParticipants - KH√îNG BAO GI·ªú set notes ƒë·ªÉ tr√°nh load content c≈©
        form.setFieldsValue({
          maxParticipants: details.maxParticipants || 2
          // ‚ùå KH√îNG set notes: ƒê·ªÉ form field ho√†n to√†n tr·ªëng, ch·ªâ hi·ªÉn th·ªã placeholder
        });

        // ‚ûï ADD: Load meeting password t·ª´ meeting API
        try {
          console.log(`üîë [MODAL-LOAD] Loading password for consultation: ${consultationId}`);
          const meetingData = await meetingAPI.getMeetingByQA(consultationId);
          if (meetingData && meetingData.meetingPassword) {
            console.log(`üîë [MODAL-LOAD] Password found: ${meetingData.meetingPassword}`);
            setMeetingPassword(meetingData.meetingPassword);
          } else {
            console.log(`üîë [MODAL-LOAD] No password found in meeting data`);
          }
        } catch (passwordError) {
          console.error('‚ùå [MODAL-LOAD] Error loading meeting password:', passwordError);
        }
      }
    } catch (error) {
      console.error('Error loading meeting details:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin meeting');
    } finally {
      setLoadingDetails(false);
    }
  };

  const handleSaveNotes = async () => {
    try {
      setLoading(true);
      const values = await form.validateFields();
      
      await consultationApi.updateMeetingNotes(consultationId, {
        notes: values.notes,
        maxParticipants: values.maxParticipants
      });
      
      message.success('L∆∞u ghi ch√∫ meeting th√†nh c√¥ng');
      
      // ‚ùå REMOVED: Kh√¥ng reload meeting details ƒë·ªÉ tr√°nh load l·∫°i notes v√†o form
      // await loadMeetingDetails();
      
    } catch (error) {
      console.error('Error saving notes:', error);
      message.error('Kh√¥ng th·ªÉ l∆∞u ghi ch√∫ meeting');
    } finally {
      setLoading(false);
    }
  };

  const handleJoinMeeting = () => {
    console.log('üéØ [JOIN-MEETING] Requesting to join meeting from MeetingNotesModal');
    
    // üé• Show recording confirmation modal first
    setRecordingConfirmed(false);
    setRecordingModalVisible(true);
  };

  // üé• Handle recording confirmation and actual meeting join
  const handleConfirmRecordingAndJoin = async () => {
    if (!recordingConfirmed) {
      message.warning('Vui l√≤ng x√°c nh·∫≠n ƒë√£ hi·ªÉu v·ªÅ vi·ªác ghi h√¨nh bu·ªïi t∆∞ v·∫•n');
      return;
    }

    try {
      console.log('üéØ [MODAL-DOCTOR-JOIN] Doctor joining meeting from modal, consultation:', consultationId);
      
      // ‚úÖ FIRST: Call API to update meeting status
      const response = await meetingAPI.updateDoctorJoinStatus(consultationId);
      console.log('‚úÖ [MODAL-DOCTOR-JOIN] Meeting status updated:', response);
      
      // ‚úÖ THEN: Open meeting link
      if (meetingDetails?.meetingLink) {
        window.open(meetingDetails.meetingLink, '_blank');
        message.success(`üé• ${response.message || 'Doctor ƒë√£ tham gia meeting'}`);
        
        // ‚ùå REMOVED: Kh√¥ng reload ƒë·ªÉ tr√°nh load l·∫°i notes v√†o form
        // await loadMeetingDetails();
        
        // ‚úÖ Close modal and reset state
        setRecordingModalVisible(false);
        setRecordingConfirmed(false);
      } else {
        message.error('Kh√¥ng t√¨m th·∫•y link meeting');
      }
    } catch (error: unknown) {
      console.error('‚ùå [MODAL-DOCTOR-JOIN] Error joining meeting:', error);
      const errorMessage = error && typeof error === 'object' && 'response' in error 
        ? (error as { response?: { data?: { message?: string } } }).response?.data?.message 
        : 'Kh√¥ng th·ªÉ tham gia meeting. Vui l√≤ng th·ª≠ l·∫°i.';
      message.error(errorMessage || 'Kh√¥ng th·ªÉ tham gia meeting. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  // üé• Handle recording modal close
  const handleRecordingModalClose = () => {
    setRecordingModalVisible(false);
    setRecordingConfirmed(false);
  };

  // ‚ûï ADD: Copy password function
  const handleCopyPassword = async (password: string) => {
    try {
      await navigator.clipboard.writeText(password);
      message.success(`üìã ƒê√£ copy password: ${password}`);
    } catch (error) {
      console.warn('Clipboard API failed, using fallback:', error);
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = password;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      message.success(`üìã ƒê√£ copy password: ${password}`);
    }
  };

  const handleCompleteMeeting = async () => {
    try {
      setLoading(true);
      
      // L∆∞u notes tr∆∞·ªõc khi k·∫øt th√∫c
      const values = form.getFieldsValue();
      if (values.notes) {
        await consultationApi.updateMeetingNotes(consultationId, {
          notes: values.notes
        });
      }
      
      // K·∫øt th√∫c consultation
      await consultationApi.completeConsultationWithMeeting(
        consultationId, 
        values.notes || 'Meeting completed successfully'
      );
      
      message.success('K·∫øt th√∫c t∆∞ v·∫•n th√†nh c√¥ng');
      onMeetingCompleted();
      onClose();
      
    } catch (error) {
      console.error('Error completing meeting:', error);
      message.error('Kh√¥ng th·ªÉ k·∫øt th√∫c t∆∞ v·∫•n');
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status: string) => {
    const colors: Record<string, string> = {
      scheduled: 'blue',
      waiting_customer: 'orange',
      invite_sent: 'green',
      in_progress: 'purple',
      completed: 'green',
      cancelled: 'red'
    };
    return colors[status] || 'default';
  };

  const getStatusText = (status: string) => {
    const texts: Record<string, string> = {
      scheduled: 'ƒê√£ l√™n l·ªãch',
      waiting_customer: 'Ch·ªù customer tham gia',
      invite_sent: 'ƒê√£ g·ª≠i th∆∞ m·ªùi',
      in_progress: 'ƒêang di·ªÖn ra',
      completed: 'ƒê√£ ho√†n th√†nh',
      cancelled: 'ƒê√£ h·ªßy'
    };
    return texts[status] || status;
  };

  return (
    <Modal
      title={
        <Space>
          <VideoCameraOutlined style={{ color: '#1890ff' }} />
          <span>üìã Qu·∫£n l√Ω Meeting - {consultationData.patientName}</span>
        </Space>
      }
      open={visible}
      onCancel={onClose}
      width={800}
      footer={[
        <Button key="cancel" onClick={onClose}>
          ƒê√≥ng
        </Button>,
        meetingPassword && meetingDetails?.status === 'waiting_customer' && (
          <Button 
            key="invite" 
            type="primary"
            icon={<MessageOutlined />}
            onClick={handleSendCustomerInvite}
            loading={inviteLoading}
            style={{ backgroundColor: '#52c41a', borderColor: '#52c41a' }}
          >
            G·ª≠i th∆∞ m·ªùi Meeting
          </Button>
        ),
        meetingDetails?.status === 'invite_sent' && (
          <Button 
            key="invite-sent" 
            type="default"
            disabled
            icon={<CheckCircleOutlined />}
            style={{ color: '#52c41a', borderColor: '#52c41a' }}
          >
            ‚úÖ ƒê√£ g·ª≠i th∆∞ m·ªùi
          </Button>
        ),
        <Button 
          key="join" 
          type="primary" 
          icon={<LinkOutlined />}
          onClick={handleJoinMeeting}
          disabled={!meetingDetails?.meetingLink}
        >
          Tham gia Meeting
        </Button>,
        <Button
          key="save"
          type="primary"
          ghost
          icon={<SaveOutlined />}
          onClick={handleSaveNotes}
          loading={loading}
        >
          L∆∞u ghi ch√∫
        </Button>,
        <Button
          key="complete"
          type="primary"
          danger
          icon={<PoweroffOutlined />}
          onClick={handleCompleteMeeting}
          loading={loading}
        >
          K·∫øt th√∫c t∆∞ v·∫•n
        </Button>
      ].filter(Boolean)}
      destroyOnClose
    >
      {loadingDetails ? (
        <div style={{ textAlign: 'center', padding: '40px 0' }}>
          ƒêang t·∫£i th√¥ng tin meeting...
        </div>
      ) : (
        <>
          {/* Patient Information */}
          <Card 
            title="üë§ Th√¥ng tin b·ªánh nh√¢n"
            size="small"
            style={{ marginBottom: '16px' }}
          >
            <Row gutter={16}>
              <Col span={12}>
                <Descriptions size="small" column={1}>
                  <Descriptions.Item label="T√™n b·ªánh nh√¢n">
                    <Space>
                      <UserOutlined />
                      <strong>{consultationData.patientName}</strong>
                    </Space>
                  </Descriptions.Item>
                  <Descriptions.Item label="S·ªë ƒëi·ªán tho·∫°i">
                    <Space>
                      <PhoneOutlined />
                      <span>{consultationData.patientPhone}</span>
                    </Space>
                  </Descriptions.Item>
                </Descriptions>
              </Col>
              <Col span={12}>
                <Descriptions size="small" column={1}>
                  <Descriptions.Item label="Th·ªùi gian h·∫πn">
                    <Space>
                      <ClockCircleOutlined />
                      <span>{consultationData.appointmentTime}</span>
                    </Space>
                  </Descriptions.Item>
                  <Descriptions.Item label="V·∫•n ƒë·ªÅ">
                    <span>{consultationData.description}</span>
                  </Descriptions.Item>
                </Descriptions>
              </Col>
            </Row>
          </Card>

          {/* Meeting Information */}
          {meetingDetails && (
            <Card 
              title="üìä Th√¥ng tin Meeting"
              size="small"
              style={{ marginBottom: '16px' }}
            >
              <Descriptions column={2} size="small">
                <Descriptions.Item label="Tr·∫°ng th√°i">
                  <Tag color={getStatusColor(meetingDetails.status)}>
                    {getStatusText(meetingDetails.status)}
                  </Tag>
                </Descriptions.Item>
                <Descriptions.Item label="S·ªë ng∆∞·ªùi tham gia">
                  <Tag color="cyan">
                    {meetingDetails.participantCount}/{meetingDetails.maxParticipants}
                  </Tag>
                </Descriptions.Item>
                <Descriptions.Item label="Meeting Link">
                  <a 
                    href={meetingDetails.meetingLink} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    style={{ fontSize: '12px' }}
                  >
                    {meetingDetails.meetingLink.length > 50 
                      ? `${meetingDetails.meetingLink.substring(0, 50)}...` 
                      : meetingDetails.meetingLink
                    }
                  </a>
                </Descriptions.Item>
                <Descriptions.Item label="Th·ªùi gian b·∫Øt ƒë·∫ßu">
                  {meetingDetails.actualStartTime 
                    ? new Date(meetingDetails.actualStartTime).toLocaleString('vi-VN')
                    : 'Ch∆∞a b·∫Øt ƒë·∫ßu'
                  }
                </Descriptions.Item>
              </Descriptions>
              
              {/* ‚ûï ADD: PROMINENT PASSWORD DISPLAY */}
              {meetingPassword && (
                <div style={{ marginTop: '16px' }}>
                  <Divider style={{ margin: '12px 0' }} />
                  <div style={{ 
                    background: '#f44336', 
                    padding: '16px', 
                    borderRadius: '8px',
                    textAlign: 'center',
                    border: '2px solid #d32f2f'
                  }}>
                    <div style={{ 
                      color: 'white', 
                      fontSize: '14px', 
                      marginBottom: '8px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '8px'
                    }}>
                      <CheckCircleOutlined />
                      <span>üîê M·∫≠t kh·∫©u Meeting</span>
                    </div>
                    <div style={{ 
                      color: 'white', 
                      fontSize: '32px', 
                      fontWeight: 'bold', 
                      letterSpacing: '8px',
                      fontFamily: 'monospace',
                      margin: '8px 0',
                      textShadow: '0 2px 4px rgba(0,0,0,0.3)'
                    }}>
                      {meetingPassword}
                    </div>
                    <Button 
                      type="primary" 
                      size="small"
                      icon={<CopyOutlined />}
                      onClick={() => handleCopyPassword(meetingPassword)}
                      style={{ 
                        backgroundColor: 'rgba(255,255,255,0.2)', 
                        borderColor: 'rgba(255,255,255,0.3)',
                        color: 'white',
                        marginBottom: '8px'
                      }}
                    >
                      üìã Copy Password
                    </Button>
                    <div style={{ 
                      color: 'rgba(255,255,255,0.9)', 
                      fontSize: '12px',
                      fontWeight: 'normal'
                    }}>
                      ‚ö†Ô∏è B·∫£o m·∫≠t - Ch·ªâ chia s·∫ª v·ªõi customer th√¥ng qua email ch√≠nh th·ª©c
                    </div>
                  </div>
                </div>
              )}

              {/* ‚úÖ ADD: Th√¥ng b√°o ƒë√£ g·ª≠i invite */}
              {meetingDetails.status === 'invite_sent' && (
                <div style={{ marginTop: '16px' }}>
                  <Alert
                    message="‚úÖ ƒê√£ g·ª≠i th∆∞ m·ªùi th√†nh c√¥ng!"
                    description={`Th∆∞ m·ªùi meeting ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${consultationData.patientName}. Customer s·∫Ω nh·∫≠n ƒë∆∞·ª£c email v·ªõi password v√† link tham gia.`}
                    type="success"
                    showIcon
                    style={{ marginBottom: '12px' }}
                  />
                </div>
              )}
            </Card>
          )}

          <Divider />

          {/* Doctor Notes Form */}
          <Card 
            title={
              <Space>
                <EditOutlined style={{ color: '#52c41a' }} />
                <span>‚úèÔ∏è Ghi ch√∫ c·ªßa b√°c sƒ©</span>
              </Space>
            }
            size="small"
          >
            <Form
              form={form}
              layout="vertical"
              disabled={loading}
            >
              <Form.Item
                name="notes"
                rules={[
                  { required: true, message: 'Vui l√≤ng nh·∫≠p ghi ch√∫ v·ªÅ cu·ªôc t∆∞ v·∫•n' }
                ]}
                help="‚ö†Ô∏è Tr∆∞·ªùng n√†y lu√¥n ƒë·ªÉ tr·ªëng ƒë·ªÉ doctor nh·∫≠p ghi ch√∫ m·ªõi cho bu·ªïi t∆∞ v·∫•n hi·ªán t·∫°i"
              >
                <TextArea
                  rows={6}
                  placeholder="Nh·∫≠p ghi ch√∫ v·ªÅ cu·ªôc t∆∞ v·∫•n n√†y (b·∫Øt bu·ªôc)..."
                  maxLength={1000}
                  showCount
                  style={{ fontSize: '14px' }}
                />
              </Form.Item>

              <Form.Item
                label="üë• S·ªë ng∆∞·ªùi tham gia t·ªëi ƒëa"
                name="maxParticipants"
                help="Gi·ªõi h·∫°n s·ªë ng∆∞·ªùi c√≥ th·ªÉ tham gia meeting"
              >
                <Input 
                  type="number" 
                  min={2} 
                  max={10}
                  placeholder="2"
                  style={{ width: '100px' }}
                />
              </Form.Item>
            </Form>
          </Card>

          {/* ‚ûï ADD: Security Training Information */}
          {meetingPassword && (
            <Card 
              size="small"
              style={{ 
                marginTop: '16px',
                background: '#fff3cd', 
                border: '2px solid #ffc107' 
              }}
            >
              <Alert
                message="üîê B·∫£o m·∫≠t Password Meeting - B√°c sƒ© ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán"
                description={
                  <div style={{ fontSize: '13px', lineHeight: '1.6', marginTop: '8px' }}>
                    <div style={{ marginBottom: '8px' }}>
                      <strong style={{ color: '#856404' }}>‚úÖ Quy tr√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán t·∫°i trung t√¢m:</strong>
                    </div>
                    <ul style={{ marginLeft: '16px', marginBottom: '8px', color: '#856404' }}>
                      <li><strong>B·∫£o m·∫≠t Password:</strong> Ch·ªâ chia s·∫ª v·ªõi customer ƒë∆∞·ª£c ph√¢n c√¥ng</li>
                      <li><strong>G·ª≠i th∆∞ m·ªùi:</strong> S·ª≠ d·ª•ng h·ªá th·ªëng email ch√≠nh th·ª©c c·ªßa trung t√¢m</li>
                      <li><strong>Ghi h√¨nh b·∫Øt bu·ªôc:</strong> T·ª± ghi h√¨nh to√†n b·ªô bu·ªïi t∆∞ v·∫•n</li>
                      <li><strong>B·∫£o m·∫≠t th√¥ng tin:</strong> Th√¥ng tin b·ªánh nh√¢n ƒë∆∞·ª£c b·∫£o v·ªá tuy·ªát ƒë·ªëi</li>
                    </ul>
                    <div style={{ 
                      background: '#ffeaa7', 
                      padding: '6px 8px', 
                      borderRadius: '4px',
                      fontSize: '12px',
                      color: '#856404',
                      fontWeight: 'bold'
                    }}>
                      ‚ö†Ô∏è Password hi·ªÉn th·ªã ch·ªâ cho b√°c sƒ© ƒë∆∞·ª£c ph√¢n c√¥ng. Vi·ªác r√≤ r·ªâ c√≥ th·ªÉ g√¢y h·∫≠u qu·∫£ nghi√™m tr·ªçng.
                    </div>
                  </div>
                }
                type="warning"
                showIcon
                style={{ marginBottom: '12px' }}
              />
            </Card>
          )}
        </>
      )}

      {/* üé• Recording Confirmation Modal */}
      <Modal
        title={
          <Space>
            <ExclamationCircleOutlined style={{ color: '#fa8c16' }} />
            <span>X√°c nh·∫≠n ghi h√¨nh bu·ªïi t∆∞ v·∫•n</span>
          </Space>
        }
        open={recordingModalVisible}
        onCancel={handleRecordingModalClose}
        footer={[
          <Button key="cancel" onClick={handleRecordingModalClose}>
            H·ªßy b·ªè
          </Button>,
          <Button 
            key="confirm" 
            type="primary" 
            disabled={!recordingConfirmed}
            onClick={handleConfirmRecordingAndJoin}
            icon={<CameraOutlined />}
          >
            X√°c nh·∫≠n v√† Tham gia Meeting
          </Button>
        ]}
        width={600}
        maskClosable={false}
        destroyOnClose
      >
        <div style={{ marginBottom: '20px' }}>
          <Alert
            message="Th√¥ng b√°o quan tr·ªçng v·ªÅ ghi h√¨nh bu·ªïi t∆∞ v·∫•n"
            description={
              <div style={{ marginTop: '12px', lineHeight: '1.6' }}>
                <p><strong>ƒê·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng d·ªãch v·ª• v√† b·∫£o v·ªá quy·ªÅn l·ª£i c·ªßa c·∫£ hai b√™n, b√°c sƒ© vui l√≤ng:</strong></p>
                <ul style={{ paddingLeft: '20px', margin: '12px 0' }}>
                  <li><strong>T·ª± ghi h√¨nh</strong> to√†n b·ªô bu·ªïi t∆∞ v·∫•n b·∫±ng ph·∫ßn m·ªÅm ghi m√†n h√¨nh tr√™n m√°y t√≠nh c·ªßa m√¨nh</li>
                  <li><strong>L∆∞u tr·ªØ file ghi h√¨nh</strong> t·∫°i m√°y t√≠nh c√° nh√¢n v·ªõi t√™n file theo format: <code>YYYYMMDD_HH-mm_TenBenhNhan.mp4</code></li>
                  <li><strong>Ghi ch√∫ ng√†y gi·ªù</strong> v√†o s·ªï tay ho·∫∑c l·ªãch c√° nh√¢n ƒë·ªÉ tra c·ª©u khi c·∫ßn</li>
                  <li><strong>B·∫£o m·∫≠t th√¥ng tin</strong> b·ªánh nh√¢n v√† ch·ªâ cung c·∫•p khi c√≥ y√™u c·∫ßu ch√≠nh th·ª©c t·ª´ trung t√¢m</li>
                </ul>
                <p style={{ color: '#fa8c16', fontWeight: 'bold', marginTop: '16px' }}>
                  ‚ö†Ô∏è <strong>L∆∞u √Ω:</strong> N·∫øu kh√¥ng th·ª±c hi·ªán ghi h√¨nh v√† x·∫£y ra tranh ch·∫•p, c√¥ng ty s·∫Ω kh√¥ng ch·ªãu tr√°ch nhi·ªám v·ªÅ c√°c v·∫•n ƒë·ªÅ ph√°p l√Ω ph√°t sinh.
                </p>
              </div>
            }
            type="warning"
            showIcon
          />
        </div>

        <div style={{ 
          padding: '16px', 
          background: '#f9f9f9', 
          borderRadius: '8px',
          marginBottom: '20px'
        }}>
          <h4 style={{ margin: '0 0 8px 0', color: '#1890ff' }}>
            üìã Th√¥ng tin bu·ªïi t∆∞ v·∫•n:
          </h4>
          <Row gutter={16}>
            <Col span={12}>
              <p><strong>B·ªánh nh√¢n:</strong> {consultationData.patientName}</p>
              <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {consultationData.patientPhone}</p>
            </Col>
            <Col span={12}>
              <p><strong>Th·ªùi gian:</strong> {consultationData.appointmentTime}</p>
              <p><strong>Meeting Link:</strong> {meetingDetails?.meetingLink ? 'C√≥ s·∫µn' : 'Kh√¥ng c√≥'}</p>
            </Col>
          </Row>
          <p style={{ margin: '8px 0 0 0' }}>
            <strong>V·∫•n ƒë·ªÅ:</strong> {consultationData.description}
          </p>
        </div>

        <div style={{ 
          padding: '16px', 
          border: '2px dashed #d9d9d9', 
          borderRadius: '8px',
          textAlign: 'center'
        }}>
          <Checkbox
            checked={recordingConfirmed}
            onChange={(e) => setRecordingConfirmed(e.target.checked)}
            style={{ fontSize: '16px' }}
          >
            <strong>
              T√¥i x√°c nh·∫≠n ƒë√£ ƒë·ªçc v√† hi·ªÉu c√°c y√™u c·∫ßu tr√™n. T√¥i s·∫Ω t·ª± ghi h√¨nh bu·ªïi t∆∞ v·∫•n v√† ch·ªãu tr√°ch nhi·ªám v·ªÅ vi·ªác l∆∞u tr·ªØ, b·∫£o m·∫≠t th√¥ng tin b·ªánh nh√¢n.
            </strong>
          </Checkbox>
        </div>

        <div style={{ 
          marginTop: '16px', 
          padding: '12px', 
          background: '#e6f7ff', 
          borderRadius: '6px',
          fontSize: '14px',
          color: '#0050b3'
        }}>
          üí° <strong>G·ª£i √Ω ph·∫ßn m·ªÅm ghi m√†n h√¨nh:</strong> OBS Studio (mi·ªÖn ph√≠), Bandicam, Camtasia, ho·∫∑c s·ª≠ d·ª•ng t√≠nh nƒÉng ghi m√†n h√¨nh c√≥ s·∫µn tr√™n h·ªá ƒëi·ªÅu h√†nh.
        </div>
      </Modal>
    </Modal>
  );
};

export default MeetingNotesModal; 