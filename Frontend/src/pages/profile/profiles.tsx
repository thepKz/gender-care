import {
    HeartOutlined,
    InfoCircleOutlined,
    SafetyCertificateOutlined,
    TeamOutlined,
    UserAddOutlined
} from '@ant-design/icons';
import {
    Button,
    Card,
    Col,
    Empty,
    Modal,
    notification,
    Row,
    Spin,
    Statistic,
    Typography
} from 'antd';
import { AnimatePresence, motion } from 'framer-motion';
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import userProfileApi from '../../api/endpoints/userProfileApi';
import ProfileCard from '../../components/feature/profile/ProfileCard';
import ProfileForm from '../../components/feature/profile/ProfileForm';
import QuickAddProfile from '../../components/feature/userProfile/QuickAddProfile';
import { useAuth } from '../../hooks/useAuth';
import { UserProfile } from '../../types';

const { Title, Text } = Typography;

const ProfilesPage: React.FC = () => {
  const [profiles, setProfiles] = useState<UserProfile[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedProfile, setSelectedProfile] = useState<UserProfile | null>(null);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isFormSubmitting, setIsFormSubmitting] = useState(false);
  const navigate = useNavigate();
  const { isAuthenticated, user } = useAuth();

  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/login');
      return;
    }

    fetchProfiles();
  }, [isAuthenticated, navigate]);

  const fetchProfiles = async () => {
    try {
      setLoading(true);
      const response = await userProfileApi.getMyProfiles();
      setProfiles(response || []);
    } catch (error) {
      console.error('Error fetching profiles:', error);
      notification.error({
        message: 'L·ªói',
        description: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ªì s∆°. Vui l√≤ng th·ª≠ l·∫°i sau.'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleEditProfile = (profile: UserProfile) => {
    setSelectedProfile(profile);
    setIsModalVisible(true);
  };

  const handleDeleteProfile = async (profileId: string) => {
    try {
      await userProfileApi.deleteProfile(profileId);
      notification.success({
        message: 'Th√†nh c√¥ng',
        description: 'X√≥a h·ªì s∆° th√†nh c√¥ng!'
      });
      fetchProfiles();
    } catch (error) {
      console.error('Error deleting profile:', error);
      notification.error({
        message: 'L·ªói',
        description: 'Kh√¥ng th·ªÉ x√≥a h·ªì s∆°. Vui l√≤ng th·ª≠ l·∫°i sau.'
      });
    } finally {
      setIsFormSubmitting(false);
    }
  };

  const handleSelectProfile = (profile: UserProfile) => {
    Modal.confirm({
      title: 'Ch·ªçn h·ªì s∆°',
      icon: <InfoCircleOutlined />,
      content: `B·∫°n mu·ªën s·ª≠ d·ª•ng h·ªì s∆° "${profile.fullName}" cho vi·ªác ƒë·∫∑t l·ªãch v√† kh√°m b·ªánh?`,
      okText: 'ƒê·ªìng √Ω',
      cancelText: 'H·ªßy',
      onOk: () => {
        localStorage.setItem('selectedProfileId', profile._id);
        notification.success({
          message: 'ƒê√£ ch·ªçn h·ªì s∆°',
          description: `ƒê√£ ch·ªçn h·ªì s∆° "${profile.fullName}" l√†m h·ªì s∆° m·∫∑c ƒë·ªãnh.`
        });
      }
    });
  };

  const handleViewMedicalHistory = (profileId: string) => {
    navigate(`/medical-records/${profileId}`);
  };

  const getStatistics = () => {
    const total = profiles.length;
    const maleCount = profiles.filter(p => p.gender === 'male').length;
    const femaleCount = profiles.filter(p => p.gender === 'female').length;
    return { total, maleCount, femaleCount };
  };

  const stats = getStatistics();

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-50">
      {/* Header Section */}
      <div className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-6">
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <div className="flex flex-col lg:flex-row lg:items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="p-3 bg-[#0C3C54]/10 rounded-full">
                  <TeamOutlined className="text-2xl text-[#0C3C54]" />
                </div>
                <div>
                  <Title level={2} className="!text-[#0C3C54] !m-0">
                    H·ªì s∆° b·ªánh √°n c·ªßa b·∫°n
                  </Title>
                  <Text className="text-gray-600 text-base">
                    Qu·∫£n l√Ω h·ªì s∆° y t·∫ø cho b·∫£n th√¢n v√† ng∆∞·ªùi th√¢n trong gia ƒë√¨nh
                  </Text>
                </div>
              </div>
              
              <div className="flex flex-col sm:flex-row gap-3 mt-4 lg:mt-0">
                <QuickAddProfile 
                  onSuccess={fetchProfiles}
                  trigger={
                                         <Button
                       size="large"
                       icon={<UserAddOutlined />}
                       className="border-[#0C3C54]/30 text-[#0C3C54] hover:bg-[#0C3C54]/5"
                     >
                       T·∫°o nhanh
                     </Button>
                   }
                 />
                 <Button
                   type="primary"
                   size="large"
                   icon={<TeamOutlined />}
                   onClick={() => navigate('/user-profiles')}
                   className="bg-[#0C3C54] hover:bg-[#0C3C54]/90 border-0 shadow-lg"
                 >
                   Qu·∫£n l√Ω n√¢ng cao
                 </Button>
              </div>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-4 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.1 }}
        >
                     {/* Welcome Card */}
           <Card className="mb-8 bg-gradient-to-r from-[#0C3C54] to-[#1a5570] border-0 text-white overflow-hidden relative">
            <div className="absolute top-0 right-0 opacity-10">
              <HeartOutlined className="text-8xl" />
            </div>
            <div className="relative z-10">
              <div className="flex flex-col lg:flex-row items-start lg:items-center justify-between">
                <div className="mb-4 lg:mb-0">
                  <h3 className="text-xl font-semibold mb-2">
                    Xin ch√†o, {user?.fullName || 'Ng∆∞·ªùi d√πng'}! üëã
                  </h3>
                                     <p className="text-white/80 text-base mb-4">
                     Qu·∫£n l√Ω h·ªì s∆° b·ªánh √°n gi√∫p b·∫°n theo d√µi s·ª©c kh·ªèe m·ªôt c√°ch c√≥ h·ªá th·ªëng v√† an to√†n.
                     T·∫°o h·ªì s∆° ri√™ng cho t·ª´ng th√†nh vi√™n trong gia ƒë√¨nh ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t.
                   </p>
                  <div className="flex flex-wrap gap-4 text-sm">
                    <span className="flex items-center space-x-2">
                      <SafetyCertificateOutlined />
                      <span>B·∫£o m·∫≠t cao</span>
                    </span>
                    <span className="flex items-center space-x-2">
                      <TeamOutlined />
                      <span>ƒêa th√†nh vi√™n</span>
                    </span>
                    <span className="flex items-center space-x-2">
                      <HeartOutlined />
                      <span>ChƒÉm s√≥c to√†n di·ªán</span>
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </Card>

          {/* Statistics Cards */}
          {profiles.length > 0 && (
            <Row gutter={[16, 16]} className="mb-8">
              <Col xs={24} sm={8}>
                <Card className="text-center border-0 shadow-md">
                                     <Statistic
                     title="T·ªïng h·ªì s∆°"
                     value={stats.total}
                     valueStyle={{ color: '#0C3C54', fontSize: '24px', fontWeight: 'bold' }}
                     prefix={<TeamOutlined />}
                   />
                </Card>
              </Col>
              <Col xs={24} sm={8}>
                <Card className="text-center border-0 shadow-md">
                  <Statistic
                    title="H·ªì s∆° nam"
                    value={stats.maleCount}
                    valueStyle={{ color: '#52c41a', fontSize: '24px', fontWeight: 'bold' }}
                    prefix={<UserAddOutlined />}
                  />
                </Card>
              </Col>
              <Col xs={24} sm={8}>
                <Card className="text-center border-0 shadow-md">
                  <Statistic
                    title="H·ªì s∆° n·ªØ"
                    value={stats.femaleCount}
                    valueStyle={{ color: '#eb2f96', fontSize: '24px', fontWeight: 'bold' }}
                    prefix={<HeartOutlined />}
                  />
                </Card>
              </Col>
            </Row>
          )}

          {/* Information Card */}
                     <Card className="mb-8 border-l-4 border-l-[#0C3C54] shadow-sm">
                         <div className="flex items-start gap-3">
               <InfoCircleOutlined className="text-[#0C3C54] text-xl mt-1" />
              <div>
                <Title level={4} className="!m-0 !text-gray-800">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</Title>
                                 <div className="mt-3 space-y-2 text-gray-600">
                   <div className="flex items-start gap-2">
                     <span className="w-2 h-2 bg-[#0C3C54] rounded-full mt-2 flex-shrink-0"></span>
                     <span>T·∫°o h·ªì s∆° ri√™ng cho t·ª´ng th√†nh vi√™n trong gia ƒë√¨nh</span>
                   </div>
                   <div className="flex items-start gap-2">
                     <span className="w-2 h-2 bg-[#0C3C54] rounded-full mt-2 flex-shrink-0"></span>
                     <span>Ch·ªçn h·ªì s∆° ph√π h·ª£p tr∆∞·ªõc khi ƒë·∫∑t l·ªãch kh√°m b·ªánh</span>
                   </div>
                   <div className="flex items-start gap-2">
                     <span className="w-2 h-2 bg-[#0C3C54] rounded-full mt-2 flex-shrink-0"></span>
                     <span>S·ª≠ d·ª•ng "Qu·∫£n l√Ω n√¢ng cao" ƒë·ªÉ c√≥ th√™m nhi·ªÅu t√≠nh nƒÉng</span>
                   </div>
                 </div>
              </div>
            </div>
          </Card>

          {/* Profiles List */}
          {loading ? (
            <Card className="text-center py-16 border-0 shadow-md">
              <div className="text-center">
          <Spin size="large" />
          <div className="mt-2 text-gray-600">ƒêang t·∫£i danh s√°ch h·ªì s∆°...</div>
        </div>
            </Card>
          ) : profiles.length === 0 ? (
            <Card className="text-center py-16 border-0 shadow-md">
              <Empty
                image={Empty.PRESENTED_IMAGE_SIMPLE}
                description={
                  <div>
                    <Text className="text-gray-500 text-lg block mb-4">
                      B·∫°n ch∆∞a c√≥ h·ªì s∆° b·ªánh √°n n√†o
                    </Text>
                    <Text className="text-gray-400">
                      T·∫°o h·ªì s∆° ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu qu·∫£n l√Ω s·ª©c kh·ªèe
                    </Text>
                  </div>
                }
              />
              <div className="mt-6 flex flex-col sm:flex-row gap-3 justify-center">
                <QuickAddProfile 
                  onSuccess={fetchProfiles}
                  trigger={
                    <Button
                                             type="primary"
                       size="large"
                       icon={<UserAddOutlined />}
                       className="bg-[#0C3C54] hover:bg-[#0C3C54]/90 border-0"
                    >
                      T·∫°o h·ªì s∆° ƒë·∫ßu ti√™n
                    </Button>
                  }
                />
                <Button
                  size="large"
                  icon={<TeamOutlined />}
                  onClick={() => navigate('/user-profiles')}
                  className="border-blue-200 text-blue-600 hover:bg-blue-50"
                >
                  Xem h∆∞·ªõng d·∫´n
                </Button>
              </div>
            </Card>
          ) : (
            <Card className="border-0 shadow-md">
              <div className="flex items-center justify-between mb-6">
                <Title level={4} className="!m-0 !text-gray-800">
                  Danh s√°ch h·ªì s∆° ({profiles.length})
                </Title>
                                 <Button
                   type="link"
                   onClick={() => navigate('/user-profiles')}
                   className="text-[#0C3C54] hover:text-[#0C3C54]/80 p-0"
                 >
                  Xem t·∫•t c·∫£ ‚Üí
                </Button>
              </div>
              
              <Row gutter={[16, 16]}>
                <AnimatePresence>
                  {profiles.slice(0, 6).map((profile, index) => (
                    <Col xs={24} sm={12} lg={8} key={profile._id}>
                      <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3, delay: index * 0.1 }}
                      >
                        <ProfileCard
                          profile={profile}
                          onEdit={handleEditProfile}
                          onDelete={handleDeleteProfile}
                          onSelect={handleSelectProfile}
                          onViewHistory={handleViewMedicalHistory}
                        />
                      </motion.div>
                    </Col>
                  ))}
                </AnimatePresence>
              </Row>

              {profiles.length > 6 && (
                <div className="text-center mt-6 pt-4 border-t border-gray-100">
                  <Button
                                         type="primary"
                     size="large"
                     onClick={() => navigate('/user-profiles')}
                     className="bg-[#0C3C54] hover:bg-[#0C3C54]/90 border-0"
                  >
                    Xem th√™m {profiles.length - 6} h·ªì s∆° kh√°c
                  </Button>
                </div>
              )}
            </Card>
          )}

          {/* Modal for Create/Edit Profile */}
          <Modal
            title={selectedProfile ? 'Ch·ªânh s·ª≠a h·ªì s∆°' : 'T·∫°o h·ªì s∆° m·ªõi'}
            open={isModalVisible}
            onCancel={() => setIsModalVisible(false)}
            footer={null}
            width={600}
            destroyOnClose
          >
                         <ProfileForm
               initialValues={selectedProfile || undefined}
               onCancel={() => setIsModalVisible(false)}
               onSubmit={async (data) => {
                try {
                  setIsFormSubmitting(true);
                  if (selectedProfile?._id) {
                    await userProfileApi.updateProfile(selectedProfile._id, data);
                    notification.success({
                      message: 'Th√†nh c√¥ng',
                      description: 'C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!'
                    });
                  } else {
                    await userProfileApi.createProfile(data);
                    notification.success({
                      message: 'Th√†nh c√¥ng',
                      description: 'T·∫°o h·ªì s∆° m·ªõi th√†nh c√¥ng!'
                    });
                  }
                  setIsModalVisible(false);
                  fetchProfiles();
                } catch (error) {
                  console.error('Error submitting profile:', error);
                  notification.error({
                    message: 'L·ªói',
                    description: 'Kh√¥ng th·ªÉ l∆∞u h·ªì s∆°. Vui l√≤ng th·ª≠ l·∫°i sau.'
                  });
                } finally {
                  setIsFormSubmitting(false);
                }
              }}
              loading={isFormSubmitting}
            />
          </Modal>
        </motion.div>
      </div>
    </div>
  );
};

export default ProfilesPage; 