import { Form, Input, message, Progress, Rate, Select, Upload } from 'antd';
import { motion } from 'framer-motion';
import {
    Camera,
    Heart,
    Home,
    Location,
    MonitorMobbile,
    Star,
    TickCircle,
    User
} from 'iconsax-react';
import React, { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import ModernButton from '../../components/ui/ModernButton';
import ModernCard from '../../components/ui/ModernCard';

const { Option } = Select;

const { TextArea } = Input;

interface Appointment {
  id: string;
  serviceId: string;
  serviceName: string;
  packageName?: string;
  doctorName?: string;
  doctorAvatar?: string;
  appointmentDate: string;
  appointmentTime: string;
  typeLocation: 'online' | 'clinic' | 'home';
  price: number;
  status: string;
}

interface FeedbackData {
  appointmentId: string;
  overallRating: number;
  serviceQuality: number;
  doctorRating: number;
  facilityRating: number;
  valueForMoney: number;
  recommendation: number;
  positiveAspects: string[];
  improvements: string[];
  detailedFeedback: string;
  wouldRecommend: boolean;
  images?: File[];
}

const Feedback: React.FC = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [appointment, setAppointment] = useState<Appointment | null>(null);
  const [currentStep, setCurrentStep] = useState(0);
  const [feedbackData, setFeedbackData] = useState<Partial<FeedbackData>>({});

  // Mock appointment data
  const mockAppointment: Appointment = {
    id: 'apt1',
    serviceId: 'consultation',
    serviceName: 'T∆∞ v·∫•n s·ª©c kh·ªèe',
    doctorName: 'BS. Nguy·ªÖn Th·ªã H∆∞∆°ng',
    doctorAvatar: 'https://images.unsplash.com/photo-1559839734-2b71ea197ec2?w=150',
    appointmentDate: '2024-01-15',
    appointmentTime: '09:00',
    typeLocation: 'clinic',
    price: 500000,
    status: 'completed'
  };

  const locationConfig = {
    online: { icon: <MonitorMobbile size={16} />, text: 'Online' },
    clinic: { icon: <Location size={16} />, text: 'Ph√≤ng kh√°m' }
  };

  const positiveOptions = [
    'B√°c sƒ© t·∫≠n t√¢m v√† chuy√™n nghi·ªáp',
    'Th·ªùi gian ch·ªù ƒë·ª£i ng·∫Øn',
    'C∆° s·ªü v·∫≠t ch·∫•t hi·ªán ƒë·∫°i',
    'Nh√¢n vi√™n th√¢n thi·ªán',
    'Gi·∫£i th√≠ch r√µ r√†ng, d·ªÖ hi·ªÉu',
    'Quy tr√¨nh kh√°m nhanh g·ªçn',
    'Gi√° c·∫£ h·ª£p l√Ω',
    'B·∫£o m·∫≠t th√¥ng tin t·ªët',
    'D·ªãch v·ª• chƒÉm s√≥c sau kh√°m',
    'Thu·∫≠n ti·ªán v·ªÅ ƒë·ªãa ƒëi·ªÉm'
  ];

  const improvementOptions = [
    'C·∫ßn c·∫£i thi·ªán th·ªùi gian ch·ªù ƒë·ª£i',
    'N√¢ng c·∫•p c∆° s·ªü v·∫≠t ch·∫•t',
    'TƒÉng c∆∞·ªùng ƒë√†o t·∫°o nh√¢n vi√™n',
    'C·∫£i thi·ªán quy tr√¨nh ƒë·∫∑t l·ªãch',
    'TƒÉng th·ªùi gian t∆∞ v·∫•n',
    'Gi·∫£m chi ph√≠ d·ªãch v·ª•',
    'C·∫£i thi·ªán h·ªá th·ªëng thanh to√°n',
    'TƒÉng c∆∞·ªùng b·∫£o m·∫≠t th√¥ng tin',
    'M·ªü r·ªông gi·ªù l√†m vi·ªác',
    'C·∫£i thi·ªán d·ªãch v·ª• h·ªó tr·ª£'
  ];

  const steps = [
    { title: 'ƒê√°nh gi√° t·ªïng quan', description: 'ƒê√°nh gi√° chung v·ªÅ d·ªãch v·ª•' },
    { title: 'ƒê√°nh gi√° chi ti·∫øt', description: 'ƒê√°nh gi√° t·ª´ng kh√≠a c·∫°nh' },
    { title: 'Ph·∫£n h·ªìi chi ti·∫øt', description: 'Chia s·∫ª tr·∫£i nghi·ªám c·ª• th·ªÉ' },
    { title: 'Ho√†n th√†nh', description: 'X√°c nh·∫≠n v√† g·ª≠i ƒë√°nh gi√°' }
  ];

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const formatDate = (date: string) => {
    return new Date(date).toLocaleDateString('vi-VN');
  };

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrev = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = async (values: any) => {
    setLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const finalFeedback = {
        ...feedbackData,
        ...values,
        appointmentId: appointment?.id
      };
      
      console.log('Feedback submitted:', finalFeedback);
      message.success('C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°! Ph·∫£n h·ªìi c·ªßa b·∫°n r·∫•t quan tr·ªçng v·ªõi ch√∫ng t√¥i.');
      
      // Navigate back to booking history
      navigate('/booking-history');
    } catch {
      message.error('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const appointmentId = searchParams.get('appointment');
    if (appointmentId) {
      // In real app, fetch appointment data from API
      setAppointment(mockAppointment);
    } else {
      navigate('/booking-history');
    }
  }, [searchParams, navigate]);

  if (!appointment) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">ƒêang t·∫£i th√¥ng tin...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center"
          >
            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              ƒê√°nh gi√° d·ªãch v·ª•
            </h1>
            <p className="text-xl text-gray-600">
              Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n ƒë·ªÉ ch√∫ng t√¥i c·∫£i thi·ªán d·ªãch v·ª•
            </p>
          </motion.div>
        </div>
      </div>

      {/* Progress */}
      <div className="bg-white border-b">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between mb-4">
            <span className="text-sm font-medium text-gray-600">
              B∆∞·ªõc {currentStep + 1} / {steps.length}
            </span>
            <span className="text-sm text-gray-500">
              {steps[currentStep].title}
            </span>
          </div>
          <Progress 
            percent={((currentStep + 1) / steps.length) * 100} 
            showInfo={false}
            strokeColor="#3b82f6"
          />
        </div>
      </div>

      {/* Content */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Appointment Info */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <ModernCard variant="glass" className="bg-blue-50/50">
            <div className="flex items-start gap-4 p-6">
              <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white">
                <Heart size={32} variant="Bold" />
              </div>
              <div className="flex-1">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  {appointment.serviceName}
                </h3>
                {appointment.packageName && (
                  <p className="text-blue-600 font-medium mb-2">
                    {appointment.packageName}
                  </p>
                )}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600">
                  <div className="flex items-center gap-2">
                    <User size={16} />
                    <span>{appointment.doctorName}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span>üìÖ</span>
                    <span>{formatDate(appointment.appointmentDate)}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span>üïê</span>
                    <span>{appointment.appointmentTime}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    {locationConfig[appointment.typeLocation].icon}
                    <span>{locationConfig[appointment.typeLocation].text}</span>
                  </div>
                </div>
              </div>
              <div className="text-right">
                <div className="text-lg font-bold text-blue-600">
                  {formatPrice(appointment.price)}
                </div>
                <div className="text-sm text-gray-500">
                  ƒê√£ ho√†n th√†nh
                </div>
              </div>
            </div>
          </ModernCard>
        </motion.div>

        {/* Feedback Form */}
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          className="space-y-8"
        >
          {/* Step 1: Overall Rating */}
          {currentStep === 0 && (
            <motion.div
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
              transition={{ duration: 0.3 }}
            >
              <ModernCard variant="default" size="large">
                <div className="text-center space-y-8">
                  <div>
                    <h2 className="text-2xl font-bold text-gray-900 mb-4">
                      B·∫°n c·∫£m th·∫•y th·∫ø n√†o v·ªÅ d·ªãch v·ª•?
                    </h2>
                    <p className="text-gray-600">
                      ƒê√°nh gi√° t·ªïng quan v·ªÅ tr·∫£i nghi·ªám c·ªßa b·∫°n
                    </p>
                  </div>

                  <div className="space-y-6">
                    <Form.Item
                      name="overallRating"
                      rules={[{ required: true, message: 'Vui l√≤ng ƒë√°nh gi√°!' }]}
                    >
                      <div className="text-center">
                                                 <Rate
                           character={<Star size={32} variant="Bold" />}
                           className="text-4xl"
                           onChange={(value) => setFeedbackData(prev => ({ ...prev, overallRating: value }))}
                         />
                        <div className="mt-4 text-lg text-gray-600">
                          {feedbackData.overallRating === 5 && "Xu·∫•t s·∫Øc! üåü"}
                          {feedbackData.overallRating === 4 && "R·∫•t t·ªët! üëç"}
                          {feedbackData.overallRating === 3 && "T·ªët üëå"}
                          {feedbackData.overallRating === 2 && "C·∫ßn c·∫£i thi·ªán üòê"}
                          {feedbackData.overallRating === 1 && "Kh√¥ng h√†i l√≤ng üòû"}
                        </div>
                      </div>
                    </Form.Item>

                    <Form.Item
                      name="wouldRecommend"
                      label="B·∫°n c√≥ gi·ªõi thi·ªáu d·ªãch v·ª• n√†y cho ng∆∞·ªùi kh√°c kh√¥ng?"
                      rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn!' }]}
                    >
                      <Select size="large" placeholder="Ch·ªçn c√¢u tr·∫£ l·ªùi">
                        <Option value={true}>C√≥, t√¥i s·∫Ω gi·ªõi thi·ªáu</Option>
                        <Option value={false}>Kh√¥ng, t√¥i s·∫Ω kh√¥ng gi·ªõi thi·ªáu</Option>
                      </Select>
                    </Form.Item>
                  </div>
                </div>
              </ModernCard>
            </motion.div>
          )}

          {/* Step 2: Detailed Ratings */}
          {currentStep === 1 && (
            <motion.div
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
              transition={{ duration: 0.3 }}
            >
              <ModernCard variant="default" size="large">
                <div className="space-y-8">
                  <div className="text-center">
                    <h2 className="text-2xl font-bold text-gray-900 mb-4">
                      ƒê√°nh gi√° chi ti·∫øt
                    </h2>
                    <p className="text-gray-600">
                      ƒê√°nh gi√° t·ª´ng kh√≠a c·∫°nh c·ªßa d·ªãch v·ª•
                    </p>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div className="space-y-6">
                                             <Form.Item
                         name="serviceQuality"
                         label="Ch·∫•t l∆∞·ª£ng d·ªãch v·ª•"
                         rules={[{ required: true, message: 'Vui l√≤ng ƒë√°nh gi√°!' }]}
                       >
                         <Rate character={<Star size={20} variant="Bold" />} />
                       </Form.Item>

                       <Form.Item
                         name="doctorRating"
                         label="B√°c sƒ©/Nh√¢n vi√™n y t·∫ø"
                         rules={[{ required: true, message: 'Vui l√≤ng ƒë√°nh gi√°!' }]}
                       >
                         <Rate character={<Star size={20} variant="Bold" />} />
                       </Form.Item>

                       <Form.Item
                         name="facilityRating"
                         label="C∆° s·ªü v·∫≠t ch·∫•t"
                         rules={[{ required: true, message: 'Vui l√≤ng ƒë√°nh gi√°!' }]}
                       >
                         <Rate character={<Star size={20} variant="Bold" />} />
                       </Form.Item>
                    </div>

                    <div className="space-y-6">
                                             <Form.Item
                         name="valueForMoney"
                         label="Gi√° tr·ªã so v·ªõi chi ph√≠"
                         rules={[{ required: true, message: 'Vui l√≤ng ƒë√°nh gi√°!' }]}
                       >
                         <Rate character={<Star size={20} variant="Bold" />} />
                       </Form.Item>

                       <Form.Item
                         name="recommendation"
                         label="M·ª©c ƒë·ªô gi·ªõi thi·ªáu"
                         rules={[{ required: true, message: 'Vui l√≤ng ƒë√°nh gi√°!' }]}
                       >
                         <Rate character={<Star size={20} variant="Bold" />} />
                       </Form.Item>

                      <div className="p-4 bg-blue-50 rounded-lg">
                        <div className="text-sm text-blue-700">
                          <strong>G·ª£i √Ω ƒë√°nh gi√°:</strong>
                          <ul className="mt-2 space-y-1 text-xs">
                            <li>‚≠ê = R·∫•t kh√¥ng h√†i l√≤ng</li>
                            <li>‚≠ê‚≠ê = Kh√¥ng h√†i l√≤ng</li>
                            <li>‚≠ê‚≠ê‚≠ê = B√¨nh th∆∞·ªùng</li>
                            <li>‚≠ê‚≠ê‚≠ê‚≠ê = H√†i l√≤ng</li>
                            <li>‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê = R·∫•t h√†i l√≤ng</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </ModernCard>
            </motion.div>
          )}

          {/* Step 3: Detailed Feedback */}
          {currentStep === 2 && (
            <motion.div
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
              transition={{ duration: 0.3 }}
            >
              <div className="space-y-8">
                <ModernCard variant="default" size="large">
                  <div className="space-y-6">
                    <div className="text-center">
                      <h2 className="text-2xl font-bold text-gray-900 mb-4">
                        Chia s·∫ª tr·∫£i nghi·ªám
                      </h2>
                      <p className="text-gray-600">
                        Ph·∫£n h·ªìi chi ti·∫øt gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán d·ªãch v·ª•
                      </p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                      {/* Positive Aspects */}
                      <div>
                        <Form.Item
                          name="positiveAspects"
                          label="ƒêi·ªÉm t√≠ch c·ª±c (ch·ªçn t·∫•t c·∫£ ph√π h·ª£p)"
                        >
                          <Select
                            mode="multiple"
                            size="large"
                            placeholder="Ch·ªçn nh·ªØng ƒëi·ªÉm b·∫°n h√†i l√≤ng"
                            options={positiveOptions.map(option => ({
                              label: option,
                              value: option
                            }))}
                          />
                        </Form.Item>
                      </div>

                      {/* Improvements */}
                      <div>
                        <Form.Item
                          name="improvements"
                          label="C·∫ßn c·∫£i thi·ªán (ch·ªçn t·∫•t c·∫£ ph√π h·ª£p)"
                        >
                          <Select
                            mode="multiple"
                            size="large"
                            placeholder="Ch·ªçn nh·ªØng ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán"
                            options={improvementOptions.map(option => ({
                              label: option,
                              value: option
                            }))}
                          />
                        </Form.Item>
                      </div>
                    </div>

                    <Form.Item
                      name="detailedFeedback"
                      label="Ph·∫£n h·ªìi chi ti·∫øt"
                    >
                      <TextArea
                        rows={6}
                        placeholder="Chia s·∫ª chi ti·∫øt v·ªÅ tr·∫£i nghi·ªám c·ªßa b·∫°n: ƒëi·ªÅu g√¨ b·∫°n th√≠ch nh·∫•t? C√≥ ƒëi·ªÅu g√¨ c·∫ßn c·∫£i thi·ªán kh√¥ng? B·∫°n c√≥ g·ª£i √Ω n√†o kh√°c?"
                        showCount
                        maxLength={1000}
                      />
                    </Form.Item>

                    {/* Image Upload */}
                    <Form.Item
                      name="images"
                      label="H√¨nh ·∫£nh (t√πy ch·ªçn)"
                    >
                      <Upload.Dragger
                        name="files"
                        multiple
                        accept="image/*"
                        beforeUpload={() => false}
                        className="border-dashed border-2 border-gray-300 rounded-lg p-6"
                      >
                        <div className="text-center">
                          <Camera size={48} className="mx-auto text-gray-400 mb-4" />
                          <p className="text-lg font-medium text-gray-700 mb-2">
                            Th√™m h√¨nh ·∫£nh
                          </p>
                          <p className="text-sm text-gray-500">
                            K√©o th·∫£ ho·∫∑c click ƒë·ªÉ ch·ªçn h√¨nh ·∫£nh
                          </p>
                        </div>
                      </Upload.Dragger>
                    </Form.Item>
                  </div>
                </ModernCard>
              </div>
            </motion.div>
          )}

          {/* Step 4: Review & Submit */}
          {currentStep === 3 && (
            <motion.div
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
              transition={{ duration: 0.3 }}
            >
              <ModernCard variant="default" size="large">
                <div className="space-y-8">
                  <div className="text-center">
                    <h2 className="text-2xl font-bold text-gray-900 mb-4">
                      Xem l·∫°i ƒë√°nh gi√°
                    </h2>
                    <p className="text-gray-600">
                      Ki·ªÉm tra l·∫°i th√¥ng tin tr∆∞·ªõc khi g·ª≠i
                    </p>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    {/* Rating Summary */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold text-gray-900">
                        T√≥m t·∫Øt ƒë√°nh gi√°
                      </h3>
                      <div className="bg-gray-50 rounded-lg p-4 space-y-3">
                        <div className="flex justify-between items-center">
                          <span className="text-gray-600">ƒê√°nh gi√° t·ªïng quan:</span>
                          <Rate disabled value={form.getFieldValue('overallRating')} className="text-sm" />
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-gray-600">Ch·∫•t l∆∞·ª£ng d·ªãch v·ª•:</span>
                                                      <Rate disabled value={form.getFieldValue('serviceQuality')} className="text-sm" />
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-gray-600">B√°c sƒ©/Nh√¢n vi√™n:</span>
                          <Rate disabled value={form.getFieldValue('doctorRating')} className="text-sm" />
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-gray-600">C∆° s·ªü v·∫≠t ch·∫•t:</span>
                          <Rate disabled value={form.getFieldValue('facilityRating')} className="text-sm" />
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-gray-600">Gi√° tr·ªã/Chi ph√≠:</span>
                          <Rate disabled value={form.getFieldValue('valueForMoney')} className="text-sm" />
                        </div>
                      </div>
                    </div>

                    {/* Feedback Summary */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold text-gray-900">
                        Ph·∫£n h·ªìi c·ªßa b·∫°n
                      </h3>
                      <div className="bg-gray-50 rounded-lg p-4 space-y-3">
                        <div>
                          <span className="text-sm font-medium text-gray-600">Gi·ªõi thi·ªáu:</span>
                          <p className="text-gray-800">
                            {form.getFieldValue('wouldRecommend') ? 'C√≥' : 'Kh√¥ng'}
                          </p>
                        </div>
                        {form.getFieldValue('detailedFeedback') && (
                          <div>
                            <span className="text-sm font-medium text-gray-600">Chi ti·∫øt:</span>
                            <p className="text-gray-800 text-sm">
                              {form.getFieldValue('detailedFeedback')}
                            </p>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>

                  <div className="bg-green-50 border border-green-200 rounded-lg p-6">
                    <div className="flex items-start gap-3">
                      <TickCircle size={24} className="text-green-500 flex-shrink-0 mt-1" />
                      <div>
                        <h4 className="font-semibold text-green-800 mb-2">
                          C·∫£m ∆°n b·∫°n ƒë√£ d√†nh th·ªùi gian ƒë√°nh gi√°!
                        </h4>
                        <p className="text-green-700 text-sm">
                          Ph·∫£n h·ªìi c·ªßa b·∫°n gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng d·ªãch v·ª• v√† mang ƒë·∫øn tr·∫£i nghi·ªám t·ªët h∆°n cho t·∫•t c·∫£ kh√°ch h√†ng.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </ModernCard>
            </motion.div>
          )}

          {/* Navigation */}
          <div className="flex justify-between pt-8">
            {currentStep > 0 ? (
              <ModernButton
                variant="outline"
                onClick={handlePrev}
                icon={<span className="rotate-180">‚Üí</span>}
              >
                Quay l·∫°i
              </ModernButton>
            ) : (
              <ModernButton
                variant="outline"
                onClick={() => navigate('/booking-history')}
              >
                H·ªßy b·ªè
              </ModernButton>
            )}

            {currentStep < steps.length - 1 ? (
              <ModernButton
                variant="primary"
                onClick={handleNext}
                icon={<span>‚Üí</span>}
                iconPosition="right"
              >
                Ti·∫øp t·ª•c
              </ModernButton>
            ) : (
              <ModernButton
                variant="primary"
                htmlType="submit"
                loading={loading}
                icon={<TickCircle size={20} />}
                iconPosition="right"
                size="large"
              >
                G·ª≠i ƒë√°nh gi√°
              </ModernButton>
            )}
          </div>
        </Form>
      </div>
    </div>
  );
};

export default Feedback; 