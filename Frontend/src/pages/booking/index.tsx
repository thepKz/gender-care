import { Form, Input, message } from 'antd';
import axios from 'axios';
import {
    Activity,
    Heart,
    People
} from 'iconsax-react';
import React, { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { appointmentApi } from '../../api/endpoints';
import doctorApi from '../../api/endpoints/doctor';
import servicesApi from '../../api/endpoints/services';
import userProfileApiInstance from '../../api/endpoints/userProfileApi';

import Image1 from '../../assets/images/image1.jpg';
import Image2 from '../../assets/images/image2.jpg';
import Image3 from '../../assets/images/image3.jpg';
import BookingLayout from '../../layouts/BookingLayout';

const { TextArea } = Input;

interface ServiceOption {
  id: string;
  name: string;
  description: string;
  price: {
    online: number;
    clinic: number;
    home?: number;
  };
  duration: string;
  icon: React.ReactNode;
  image: string;
  gradient: string;
  category: string;
  packages?: ServicePackage[];
}

interface ServicePackage {
  id: string;
  name: string;
  description: string;
  price: {
    online: number;
    clinic: number;
    home?: number;
  };
  tests: string[];
  duration: string;
  isPopular?: boolean;
  gradient: string;
}

interface Doctor {
  id: string;
  name: string;
  specialization: string;
  experience: number;
  rating: number;
  reviewCount: number;
  avatar: string;
  workload: number;
  isAvailable: boolean;
  bio: string;
}

interface UserProfile {
  id: string;
  fullName: string;
  phone: string;
  birthDate: string | Date;
  gender: string;
  relationship: string; // 'self' | 'family'
  isDefault: boolean;
}

interface TimeSlot {
  id: string;
  time: string;
  isAvailable: boolean;
}

interface BookingFormData {
  serviceId: string;
  packageId?: string;
  doctorId?: string;
  typeLocation: 'online' | 'clinic' | 'home';
  appointmentDate: string;
  appointmentTime: string;
  profileId: string;
  fullName: string;
  phone: string;
  email: string;
  birthDate: string;
  gender: string;
  address?: string;
  description?: string;
  notes?: string;
  agreement: boolean;
}

const Booking: React.FC = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [currentStep, setCurrentStep] = useState(0);
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);

  // Th√™m c√°c states cho data t·ª´ API
  const [loadingServices, setLoadingServices] = useState(false);
  const [loadingDoctors, setLoadingDoctors] = useState(false);
  const [loadingProfiles, setLoadingProfiles] = useState(false);
  const [loadingTimeSlots, setLoadingTimeSlots] = useState(false);

  // Form state theo unified flow
  const [selectedService, setSelectedService] = useState<string>('');
  const [selectedPackage, setSelectedPackage] = useState<string>('');
  const [selectedDoctor, setSelectedDoctor] = useState<string>('');
  const [typeLocation, setTypeLocation] = useState<'online' | 'clinic' | 'home'>('clinic');
  const [selectedDate, setSelectedDate] = useState<string>('');
  const [selectedTimeSlot, setSelectedTimeSlot] = useState<string>('');
  const [selectedProfile, setSelectedProfile] = useState<string>('');

  // State cho data t·ª´ API
  const [services, setServices] = useState<ServiceOption[]>([]);
  const [doctors, setDoctors] = useState<Doctor[]>([]);
  const [userProfiles, setUserProfiles] = useState<UserProfile[]>([]);
  const [timeSlots, setTimeSlots] = useState<TimeSlot[]>([]);

  // State cho modal t·∫°o profile m·ªõi
  const [showCreateProfileModal, setShowCreateProfileModal] = useState(false);
  const [createProfileForm] = Form.useForm();

  // Mock data v·ªõi ID ƒë√∫ng ƒë·ªãnh d·∫°ng MongoDB ObjectId
  // Mock data ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè - ch·ªâ s·ª≠ d·ª•ng API th·∫≠t

  // Mock doctors ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè - ch·ªâ s·ª≠ d·ª•ng API th·∫≠t

  // Mock user profiles ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè - ch·ªâ s·ª≠ d·ª•ng API th·∫≠t

  // Mock time slots ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè - ch·ªâ s·ª≠ d·ª•ng API th·∫≠t

  const steps = [
    { title: 'Ch·ªçn d·ªãch v·ª•', description: 'L·ª±a ch·ªçn d·ªãch v·ª• ph√π h·ª£p' },
    { title: 'Ch·ªçn b√°c sƒ©', description: 'Ch·ªçn b√°c sƒ© ho·∫∑c ƒë·ªÉ h·ªá th·ªëng ch·ªçn' },
    { title: 'V·ªã tr√≠ th·ª±c hi·ªán', description: 'Online, ph√≤ng kh√°m ho·∫∑c t·∫°i nh√†' },
    { title: 'Ch·ªçn l·ªãch h·∫πn', description: 'Ng√†y v√† gi·ªù ph√π h·ª£p' },
    { title: 'Ch·ªçn h·ªì s∆°', description: 'H·ªì s∆° b·ªánh nh√¢n' },
    { title: 'Th√¥ng tin chi ti·∫øt', description: 'ƒêi·ªÅn th√¥ng tin b·ªï sung' },
    { title: 'X√°c nh·∫≠n', description: 'Xem l·∫°i v√† x√°c nh·∫≠n ƒë·∫∑t l·ªãch' }
  ];

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  const getSelectedService = () => services.find(s => s.id === selectedService);
  const getSelectedPackage = () => {
    const service = getSelectedService();
    return service?.packages?.find(p => p.id === selectedPackage);
  };
  const getSelectedDoctor = () => doctors.find(d => d.id === selectedDoctor);
  const getCurrentPrice = () => {
    const service = getSelectedService();
    const pkg = getSelectedPackage();
    
    if (pkg) {
      return pkg.price[typeLocation] || 0;
    }
    
    if (service) {
      return service.price[typeLocation] || 0;
    }
    
    return 0;
  };

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrev = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleServiceSelect = (serviceId: string) => {
    setSelectedService(serviceId);
    setSelectedPackage(''); // Reset package khi ƒë·ªïi service
    handleNext();
  };

  const handleLocationSelect = (location: 'online' | 'clinic' | 'home') => {
    setTypeLocation(location);
    handleNext();
  };

  const handleProfileSelect = (profileId: string) => {
    if (profileId === 'new') {
      // M·ªü modal t·∫°o profile m·ªõi
      setShowCreateProfileModal(true);
      createProfileForm.resetFields();
    } else {
      setSelectedProfile(profileId);
      const profile = userProfiles.find(p => p.id === profileId);
      if (profile) {
        form.setFieldsValue({
          fullName: profile.fullName,
          phone: profile.phone,
          birthDate: profile.birthDate,
          gender: profile.gender
        });
      }
      handleNext();
    }
  };

  // Fetch data from API
  const fetchServices = async () => {
    setLoadingServices(true);
    try {
      console.log('üîç [Debug] Fetching services from API...');
      
      // G·ªçi API l·∫•y danh s√°ch d·ªãch v·ª• th·∫≠t
      const response = await servicesApi.getServices();
      console.log('‚úÖ [Debug] Full API response:', response);
      console.log('‚úÖ [Debug] Response data:', response.data);
      console.log('‚úÖ [Debug] Response status:', response.status);
      
      // Backend tr·∫£ v·ªÅ: { success: true, data: { services: [...], pagination: {...} } }
      const servicesData = response.data?.data?.services || response.data?.services || response.data;
      console.log('‚úÖ [Debug] Extracted services data:', servicesData);
      console.log('‚úÖ [Debug] Services data type:', typeof servicesData);
      console.log('‚úÖ [Debug] Is array?', Array.isArray(servicesData));
      
      if (servicesData && Array.isArray(servicesData)) {
        const mappedServices: ServiceOption[] = servicesData.map(service => ({
          id: service._id,
          name: service.serviceName,
          description: service.description,
          price: {
            online: service.availableAt.includes('Online') ? service.price : 0,
            clinic: service.availableAt.includes('Center') ? service.price : 0,
            home: service.availableAt.includes('Athome') ? service.price * 1.5 : 0,
          },
          duration: '45-60 ph√∫t',
          icon: getIconForServiceType(service.serviceType),
          image: getImageForServiceType(service.serviceType),
          gradient: getGradientForServiceType(service.serviceType),
          category: service.serviceType,
        }));
        
        console.log('‚úÖ [Debug] Mapped services:', mappedServices);
        setServices(mappedServices);
        
        // Ki·ªÉm tra xem c√≥ d·ªãch v·ª• n√†o kh√¥ng
        if (mappedServices.length === 0) {
          console.log('‚ö†Ô∏è [Debug] No services from API');
          message.warning('Kh√¥ng c√≥ d·ªãch v·ª• n√†o kh·∫£ d·ª•ng');
        }
      } else {
        console.log('‚ö†Ô∏è [Debug] Invalid API response format');
        message.error('D·ªØ li·ªáu d·ªãch v·ª• kh√¥ng h·ª£p l·ªá');
      }
    } catch (error) {
      console.error('‚ùå [Debug] Error fetching services:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch d·ªãch v·ª• t·ª´ server');
    } finally {
      setLoadingServices(false);
    }
  };

  const fetchDoctors = async () => {
    setLoadingDoctors(true);
    try {
      console.log('üîç [Debug] Fetching doctors from API...');
      
      // G·ªçi API l·∫•y danh s√°ch b√°c sƒ© c∆° b·∫£n (endpoint c√≥ s·∫µn)
      const apiDoctors = await doctorApi.getAll();
      console.log('‚úÖ [Debug] API doctors response:', apiDoctors);
      
      // Map d·ªØ li·ªáu t·ª´ API sang interface Doctor c·ªßa booking
      const mappedDoctors: Doctor[] = apiDoctors.map(doctor => ({
        id: doctor._id,
        name: doctor.userId.fullName,
        specialization: doctor.specialization || 'Ch∆∞a x√°c ƒë·ªãnh',
        experience: doctor.experience || 0,
        rating: doctor.rating || 4.5, // S·ª≠ d·ª•ng rating t·ª´ doctor object
        reviewCount: 0, // T·∫°m th·ªùi set 0, c√≥ th·ªÉ fetch ri√™ng sau
        avatar: doctor.userId.avatar || 'https://images.unsplash.com/photo-1559839734-2b71ea197ec2?w=150',
        workload: Math.floor(Math.random() * 20) + 5, // Random workload for now
        isAvailable: doctor.userId.isActive, // Ch·ªâ check user active status
        bio: doctor.bio || 'B√°c sƒ© chuy√™n nghi·ªáp v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám'
      }));
      
      console.log('‚úÖ [Debug] Mapped doctors:', mappedDoctors);
      setDoctors(mappedDoctors);
      
      // Ki·ªÉm tra xem c√≥ b√°c sƒ© n√†o kh√¥ng
      if (mappedDoctors.length === 0) {
        console.log('‚ö†Ô∏è [Debug] No doctors from API');
        message.warning('Kh√¥ng c√≥ b√°c sƒ© n√†o kh·∫£ d·ª•ng');
      }
    } catch (error) {
      console.error('‚ùå [Debug] Error fetching doctors:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√°c sƒ© t·ª´ server');
    } finally {
      setLoadingDoctors(false);
    }
  };

  const fetchProfiles = async () => {
    setLoadingProfiles(true);
    try {
      console.log('üîç [Debug] Fetching user profiles...');
      
      // G·ªçi API l·∫•y profiles c·ªßa user ƒëƒÉng nh·∫≠p
      const response = await userProfileApiInstance.getMyProfiles();
      console.log('‚úÖ [Debug] User profiles response:', response);
      
      if (response && Array.isArray(response)) {
        // Map t·ª´ backend structure sang frontend interface
        const mappedProfiles: UserProfile[] = response.map((profile: any) => ({
          id: profile._id,
          fullName: profile.fullName,
          phone: profile.phone || '',
          email: profile.email || '',
          birthDate: typeof profile.year === 'string' ? profile.year : (profile.year ? String(profile.year) : ''),
          gender: profile.gender,
          relationship: 'self', // Default relationship
          isDefault: false // C√≥ th·ªÉ th√™m logic ƒë·ªÉ determine default profile
        }));
        
        console.log('‚úÖ [Debug] Mapped profiles:', mappedProfiles);
        setUserProfiles(mappedProfiles);
        
        if (mappedProfiles.length === 0) {
          console.log('‚ÑπÔ∏è [Debug] No existing profiles found - user will need to create new profile');
        }
      } else {
        console.log('‚ö†Ô∏è [Debug] Invalid profiles response structure');
        setUserProfiles([]);
      }
    } catch (error) {
      console.error('‚ùå [Debug] Error fetching profiles:', error);
      console.log('‚ÑπÔ∏è [Debug] User may not be authenticated or no profiles exist - allowing manual profile creation');
      // Kh√¥ng show error message v√¨ user c√≥ th·ªÉ ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c ch∆∞a c√≥ profile
      setUserProfiles([]);
    } finally {
      setLoadingProfiles(false);
    }
  };

  const fetchTimeSlots = async () => {
    if (!selectedDate) return;
    
    setLoadingTimeSlots(true);
    try {
      console.log('üîç [Debug] Fetching time slots for date:', selectedDate, 'doctor:', selectedDoctor);
      
      if (selectedDoctor) {
        // L·∫•y available slots cho doctor c·ª• th·ªÉ
        const response = await doctorApi.getAvailable(selectedDate);
        console.log('üîç [Debug] Raw response structure:', response);
        
        // Backend tr·∫£ v·ªÅ: {message, data: [...], searchCriteria}
        const availableDoctorsData = (response as any).data || response;
        console.log('üîç [Debug] Extracted data:', availableDoctorsData);
        
        const doctorSlots = availableDoctorsData.find((doc: any) => doc.doctorId === selectedDoctor || doc._id === selectedDoctor);
        
        if (doctorSlots && doctorSlots.availableSlots) {
          const mappedTimeSlots: TimeSlot[] = doctorSlots.availableSlots.map((slot: any) => ({
            id: slot.slotId,
            time: slot.slotTime,
            isAvailable: slot.status === 'Free'
          }));
          
          console.log('‚úÖ [Debug] Mapped time slots for doctor:', mappedTimeSlots);
          setTimeSlots(mappedTimeSlots);
        } else {
          console.log('‚ö†Ô∏è [Debug] No slots found for selected doctor');
          setTimeSlots([]);
        }
      } else {
        // L·∫•y t·∫•t c·∫£ available slots trong ng√†y (t·ªïng h·ª£p t·ª´ t·∫•t c·∫£ doctors)
        const response = await doctorApi.getAvailable(selectedDate);
        console.log('üîç [Debug] Raw response for all slots:', response);
        
        // Backend tr·∫£ v·ªÅ: {message, data: [...], searchCriteria}
        const availableDoctorsData = (response as any).data || response;
        const allSlots: TimeSlot[] = [];
        
        availableDoctorsData.forEach((doctor: any) => {
          if (doctor.availableSlots) {
            doctor.availableSlots.forEach((slot: any) => {
              // Tr√°nh duplicate slots
              if (!allSlots.find(s => s.time === slot.slotTime)) {
                allSlots.push({
                  id: slot.slotId,
                  time: slot.slotTime,
                  isAvailable: slot.status === 'Free'
                });
              }
            });
          }
        });
        
        console.log('‚úÖ [Debug] All available time slots:', allSlots);
        setTimeSlots(allSlots);
      }
    } catch (error) {
      console.error('‚ùå [Debug] Error fetching time slots:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch slot th·ªùi gian');
      setTimeSlots([]);
    } finally {
      setLoadingTimeSlots(false);
    }
  };

  // Helper functions for icon, image and gradient (will be used with real API)
  const getIconForServiceType = (type: string) => {
    switch (type) {
      case 'consultation': return <People size={32} variant="Bold" />;
      case 'test': return <Activity size={32} variant="Bold" />;
      default: return <Heart size={32} variant="Bold" />;
    }
  };

  const getImageForServiceType = (type: string) => {
    switch (type) {
      case 'consultation': return Image1;
      case 'test': return Image2;
      default: return Image3;
    }
  };

  const getGradientForServiceType = (type: string) => {
    switch (type) {
      case 'consultation': return 'from-blue-500 via-purple-500 to-pink-500';
      case 'test': return 'from-green-500 via-teal-500 to-blue-500';
      default: return 'from-pink-500 via-rose-500 to-red-500';
    }
  };

  // C·∫£i thi·ªán h√†m handleSubmit v·ªõi validation t·ªët h∆°n
  const handleSubmit = async (values: BookingFormData) => {
    setLoading(true);
    try {
      // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
      if (!selectedService && !selectedPackage) {
        throw new Error('Vui l√≤ng ch·ªçn d·ªãch v·ª• ho·∫∑c g√≥i d·ªãch v·ª•');
      }
      
      if (!selectedDate) {
        throw new Error('Vui l√≤ng ch·ªçn ng√†y h·∫πn');
      }
      
      if (!selectedTimeSlot) {
        throw new Error('Vui l√≤ng ch·ªçn gi·ªù h·∫πn');
      }
      
      if (!selectedProfile) {
        throw new Error('Vui l√≤ng ch·ªçn h·ªì s∆° b·ªánh nh√¢n');
      }
      
      if (typeLocation === 'home' && !values.address) {
        throw new Error('Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ khi ch·ªçn d·ªãch v·ª• t·∫°i nh√†');
      }
      
      // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ID
      const isValidObjectId = (id: string) => /^[0-9a-fA-F]{24}$/.test(id);
      
      if (!isValidObjectId(selectedProfile)) {
        throw new Error('ID h·ªì s∆° kh√¥ng h·ª£p l·ªá');
      }
      
      if (selectedService && !isValidObjectId(selectedService)) {
        throw new Error('ID d·ªãch v·ª• kh√¥ng h·ª£p l·ªá');
      }
      
      if (selectedPackage && !isValidObjectId(selectedPackage)) {
        throw new Error('ID g√≥i d·ªãch v·ª• kh√¥ng h·ª£p l·ªá');
      }
      
      if (selectedTimeSlot && !isValidObjectId(selectedTimeSlot)) {
        throw new Error('ID slot th·ªùi gian kh√¥ng h·ª£p l·ªá');
      }
      
      // Create appointment using API
      const appointmentData = {
        profileId: selectedProfile,
        packageId: selectedPackage || undefined,
        serviceId: selectedService || undefined,
        doctorId: selectedDoctor || undefined, // Th√™m doctorId v√†o request
        slotId: selectedTimeSlot,
        appointmentDate: selectedDate,
        appointmentTime: timeSlots.find(slot => slot.id === selectedTimeSlot)?.time || '',
        appointmentType: getSelectedService()?.category as 'consultation' | 'test' | 'other' || 'other',
        typeLocation: typeLocation,
        address: values.address,
        description: values.description,
        notes: values.notes
      };
      
      console.log('üîç [Debug] Appointment data being sent:', JSON.stringify(appointmentData, null, 2));
      console.log('üîç [Debug] Selected time slot details:', {
        selectedTimeSlot,
        slotFromArray: timeSlots.find(slot => slot.id === selectedTimeSlot),
        allTimeSlots: timeSlots
      });
      
      const response = await appointmentApi.createAppointment(appointmentData);
      
      console.log('Booking response:', response);
      message.success('ƒê·∫∑t l·ªãch th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t.');
      
      // Navigate to booking confirmation or history
      navigate('/booking-history');
    } catch (error) {
      console.error('Error creating appointment:', error);
      if (error instanceof Error) {
        message.error(error.message);
      } else if (axios.isAxiosError(error) && error.response?.data?.message) {
        message.error(error.response.data.message);
      } else {
        message.error('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!');
      }
    } finally {
      setLoading(false);
    }
  };

  // Load data when component mounts
  useEffect(() => {
    fetchServices();
    fetchDoctors();
    fetchProfiles();
  }, []);

  // Load time slots when date or doctor changes
  useEffect(() => {
    if (selectedDate) {
      fetchTimeSlots();
      // C·∫≠p nh·∫≠t danh s√°ch b√°c sƒ© c√≥ s·∫µn l·ªãch theo ng√†y ƒë∆∞·ª£c ch·ªçn
      fetchAvailableDoctors();
    }
  }, [selectedDate, selectedDoctor]);
  
  // Fetch doctors available for selected date
  const fetchAvailableDoctors = async () => {
    if (!selectedDate) return;
    
    try {
      console.log('üîç [Debug] Fetching available doctors for date:', selectedDate);
      const response = await doctorApi.getAvailable(selectedDate);
      console.log('‚úÖ [Debug] Available doctors response:', response);
      
      // Backend tr·∫£ v·ªÅ: {message, data: [...], searchCriteria}
      const availableDoctors = (response as any).data || response;
      console.log('‚úÖ [Debug] Available doctors count:', availableDoctors.length);
      
      // Debug: Log structure c·ªßa available doctors
      if (availableDoctors.length > 0) {
        console.log('‚úÖ [Debug] First available doctor structure:', availableDoctors[0]);
      }
      
      // Debug: Log current doctors list
      console.log('üîç [Debug] Current doctors list:', doctors.length);
      
      // Update doctor availability based on API response
      setDoctors(prevDoctors => {
        const updatedDoctors = prevDoctors.map(doctor => {
          // Check if this doctor is in available list
                     const isInAvailableList = availableDoctors.some((available: any) => {
             // Try different possible ID fields from API response
             const availableId = available._id || available.doctorId || available.id;
             const match = availableId === doctor.id;
            
            if (match) {
              console.log('‚úÖ [Debug] Found match for doctor:', doctor.name, 'ID:', doctor.id);
            }
            
            return match;
          });
          
          console.log(`üîç [Debug] Doctor ${doctor.name} (${doctor.id}): isInAvailableList=${isInAvailableList}, originalAvailable=${doctor.isAvailable}`);
          
          return {
            ...doctor,
            isAvailable: isInAvailableList && doctor.isAvailable
          };
        });
        
        console.log('‚úÖ [Debug] Updated doctors availability:', updatedDoctors.map(d => ({name: d.name, isAvailable: d.isAvailable})));
        return updatedDoctors;
      });
    } catch (error) {
      console.error('‚ùå [Debug] Error fetching available doctors:', error);
      console.log('‚ö†Ô∏è [Debug] Keeping original availability state');
      // Don't show error message as this is optional enhancement
    }
  };

  // H√†m validate v√† chuy·ªÉn t·ª´ step 6 sang step 7
  const handleStep6Continue = async () => {
    try {
      // Validate form tr∆∞·ªõc khi chuy·ªÉn step
      await form.validateFields(['description', 'agreement']);
      
      // N·∫øu l√† d·ªãch v·ª• t·∫°i nh√†, validate ƒë·ªãa ch·ªâ
      if (typeLocation === 'home') {
        await form.validateFields(['address']);
      }
      
      // Validation th√†nh c√¥ng, chuy·ªÉn sang step ti·∫øp theo
      handleNext();
    } catch (error) {
      console.log('‚ùå [Debug] Validation failed:', error);
      // Form s·∫Ω t·ª± ƒë·ªông hi·ªÉn th·ªã l·ªói validation
    }
  };

  // H√†m t·∫°o profile m·ªõi
  const handleCreateProfile = async (values: any) => {
    try {
      console.log('üîç [Debug] Creating new profile:', values);
      
      // G·ªçi API t·∫°o profile m·ªõi
      const newProfile = await userProfileApiInstance.createProfile({
        fullName: values.fullName,
        phone: values.phone,
        year: values.birthDate,
        gender: values.gender
      });
      
      console.log('‚úÖ [Debug] Created profile:', newProfile);
      
      // Th√™m profile m·ªõi v√†o danh s√°ch
      const mappedNewProfile: UserProfile = {
        id: newProfile._id,
        fullName: newProfile.fullName,
        phone: newProfile.phone || '',
        birthDate: typeof newProfile.year === 'string' ? newProfile.year : String(newProfile.year || ''),
        gender: newProfile.gender,
        relationship: 'self',
        isDefault: false
      };
      
      setUserProfiles(prev => [...prev, mappedNewProfile]);
      setSelectedProfile(mappedNewProfile.id);
      
      // Set form values v·ªõi profile m·ªõi
      form.setFieldsValue({
        fullName: mappedNewProfile.fullName,
        phone: mappedNewProfile.phone,
        birthDate: mappedNewProfile.birthDate,
        gender: mappedNewProfile.gender
      });
      
      // ƒê√≥ng modal v√† chuy·ªÉn step
      setShowCreateProfileModal(false);
      handleNext();
      
      message.success('T·∫°o h·ªì s∆° th√†nh c√¥ng!');
    } catch (error) {
      console.error('‚ùå [Debug] Error creating profile:', error);
      message.error('Kh√¥ng th·ªÉ t·∫°o h·ªì s∆°. Vui l√≤ng th·ª≠ l·∫°i!');
    }
  };

  // Auto-select service from URL params
  useEffect(() => {
    const serviceParam = searchParams.get('service');
    if (serviceParam && services.find(s => s.id === serviceParam)) {
      setSelectedService(serviceParam);
      setCurrentStep(1); // Skip to doctor selection
    }
  }, [searchParams, services]);

  return (
    <BookingLayout>
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50">
        <div className="container mx-auto px-4 py-8 max-w-full">
          <h1 className="text-3xl font-bold text-gray-800 mb-8">ƒê·∫∑t l·ªãch h·∫πn</h1>
          
          {/* Step indicator */}
          <div className="mb-10">
            <div className="flex justify-between">
              {steps.map((step, index) => (
                <div 
                  key={index} 
                  className={`flex flex-col items-center ${index <= currentStep ? 'text-blue-600' : 'text-gray-400'}`}
                >
                  <div 
                    className={`w-10 h-10 rounded-full flex items-center justify-center mb-2 
                    ${index < currentStep ? 'bg-blue-600 text-white' : 
                      index === currentStep ? 'border-2 border-blue-600 text-blue-600' : 
                      'border-2 border-gray-300 text-gray-400'}`}
                  >
                    {index < currentStep ? '‚úì' : index + 1}
                  </div>
                  <div className="text-sm hidden md:block">{step.title}</div>
                </div>
              ))}
            </div>
            <div className="relative mt-2">
              <div className="absolute h-1 bg-gray-200 w-full"></div>
              <div 
                className="absolute h-1 bg-blue-600 transition-all" 
                style={{ width: `${(currentStep / (steps.length - 1)) * 100}%` }}
              ></div>
            </div>
          </div>
          
          {/* Step content */}
          <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
            {/* Step 1: Ch·ªçn d·ªãch v·ª• */}
            {currentStep === 0 && (
              <div>
                <h2 className="text-2xl font-bold mb-6">Ch·ªçn d·ªãch v·ª•</h2>
                
                {/* Debug info cho services */}
                <div className="mb-4 p-3 bg-gray-100 rounded-lg text-sm">
                  <p><strong>Debug Services:</strong></p>
                  <p><strong>T·ªïng s·ªë d·ªãch v·ª•:</strong> {services.length}</p>
                  <p><strong>Tr·∫°ng th√°i loading:</strong> {loadingServices ? 'ƒêang t·∫£i...' : 'ƒê√£ t·∫£i xong'}</p>
                  <p><strong>Ngu·ªìn d·ªØ li·ªáu:</strong> API t·ª´ Backend</p>
                  {services.length > 0 && (
                    <p><strong>D·ªãch v·ª• ƒë·∫ßu ti√™n:</strong> {services[0].name} - {services[0].category}</p>
                  )}
                </div>
                
                {/* Loading state */}
                {loadingServices && (
                  <div className="flex justify-center items-center py-12">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                    <span className="ml-3 text-gray-600">ƒêang t·∫£i danh s√°ch d·ªãch v·ª•...</span>
                  </div>
                )}
                
                {/* Empty state */}
                {!loadingServices && services.length === 0 && (
                  <div className="text-center py-12">
                    <div className="text-gray-400 text-6xl mb-4">üè•</div>
                    <h3 className="text-lg font-medium text-gray-900 mb-2">Kh√¥ng c√≥ d·ªãch v·ª• n√†o</h3>
                    <p className="text-gray-500">Hi·ªán t·∫°i kh√¥ng c√≥ d·ªãch v·ª• n√†o kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.</p>
                    <button 
                      onClick={fetchServices}
                      className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                    >
                      T·∫£i l·∫°i
                    </button>
                  </div>
                )}
                
                {/* Services grid */}
                {!loadingServices && services.length > 0 && (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {services.map(service => (
                      <div 
                        key={service.id}
                        onClick={() => handleServiceSelect(service.id)}
                        className="bg-gradient-to-br border border-gray-100 hover:border-blue-300 rounded-xl p-5 cursor-pointer transform transition hover:scale-105 hover:shadow-md"
                      >
                        <div className="flex items-center mb-4">
                          <div className={`p-3 rounded-full bg-gradient-to-r ${service.gradient} text-white mr-4`}>
                            {service.icon}
                          </div>
                          <h3 className="text-xl font-semibold">{service.name}</h3>
                        </div>
                        <p className="text-gray-600 mb-4">{service.description}</p>
                        <div className="flex justify-between items-center">
                          <span className="text-sm text-gray-500">{service.duration}</span>
                          <span className="font-bold text-blue-600">{formatPrice(service.price.clinic)}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}
            
            {/* Step 2: Ch·ªçn b√°c sƒ© */}
            {currentStep === 1 && (
              <div>
                <h2 className="text-2xl font-bold mb-6">Ch·ªçn b√°c sƒ©</h2>
                
                {/* Debug info */}
                <div className="mb-4 p-3 bg-gray-100 rounded-lg text-sm">
                  <p><strong>Debug:</strong> Ng√†y ƒë√£ ch·ªçn: {selectedDate || 'Ch∆∞a ch·ªçn'}</p>
                  <p><strong>T·ªïng s·ªë b√°c sƒ©:</strong> {doctors.length}</p>
                  <p><strong>B√°c sƒ© c√≥ s·∫µn:</strong> {doctors.filter(d => d.isAvailable).length}</p>
                  <p><strong>B√°c sƒ© kh√¥ng c√≥ s·∫µn:</strong> {doctors.filter(d => !d.isAvailable).length}</p>
                  {!selectedDate && (
                    <p className="text-orange-600 mt-2">
                      <strong>L∆∞u √Ω:</strong> Ch∆∞a ch·ªçn ng√†y n√™n hi·ªÉn th·ªã t·∫•t c·∫£ b√°c sƒ©. Ch·ªçn ng√†y ·ªü b∆∞·ªõc ti·∫øp theo ƒë·ªÉ l·ªçc b√°c sƒ© c√≥ l·ªãch tr·ªëng.
                    </p>
                  )}
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {doctors.map(doctor => (
                    <div 
                      key={doctor.id}
                      onClick={() => {
                        // N·∫øu ch∆∞a ch·ªçn ng√†y th√¨ cho ph√©p ch·ªçn b·∫•t k·ª≥ b√°c sƒ© n√†o
                        if (selectedDate && !doctor.isAvailable) {
                          message.warning('B√°c sƒ© n√†y hi·ªán kh√¥ng c√≥ s·∫µn cho ng√†y ƒë√£ ch·ªçn');
                          return;
                        }
                        console.log('üîç [Debug] Selected doctor:', doctor);
                        setSelectedDoctor(doctor.id);
                        handleNext();
                      }}
                      className={`border rounded-xl p-5 cursor-pointer transform transition hover:scale-105 hover:shadow-md ${
                        selectedDoctor === doctor.id 
                          ? 'border-blue-500 bg-blue-50' 
                          : (selectedDate && !doctor.isAvailable)
                            ? 'border-gray-200 opacity-50 cursor-not-allowed'
                            : 'border-gray-200 hover:border-blue-300'
                      }`}
                    >
                      <div className="flex items-center mb-4">
                        <img 
                          src={doctor.avatar} 
                          alt={doctor.name} 
                          className="w-16 h-16 rounded-full object-cover mr-4"
                        />
                        <div>
                          <h3 className="text-xl font-semibold">{doctor.name}</h3>
                          <p className="text-gray-600">{doctor.specialization}</p>
                        </div>
                      </div>
                      <div className="mb-4">
                        <div className="flex items-center mb-2">
                          <span className="text-yellow-400 mr-1">‚òÖ</span>
                          <span className="font-medium">{doctor.rating}</span>
                          <span className="text-gray-500 text-sm ml-2">({doctor.reviewCount} ƒë√°nh gi√°)</span>
                        </div>
                        <p className="text-gray-600 text-sm">{doctor.bio}</p>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-500">{doctor.experience} nƒÉm kinh nghi·ªám</span>
                        <span className={`px-3 py-1 rounded-full text-xs ${
                          !selectedDate 
                            ? 'bg-blue-100 text-blue-800' 
                            : doctor.isAvailable 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-red-100 text-red-800'
                        }`}>
                          {!selectedDate 
                            ? 'S·∫µn s√†ng' 
                            : doctor.isAvailable 
                              ? 'C√≥ l·ªãch tr·ªëng' 
                              : 'Kh√¥ng c√≥ l·ªãch'
                          }
                        </span>
                      </div>
                    </div>
                  ))}
                  
                  {/* Option to let system choose */}
                  <div 
                    onClick={() => {
                      setSelectedDoctor('');
                      handleNext();
                    }}
                    className="border-2 border-dashed border-gray-300 hover:border-blue-300 rounded-xl p-5 cursor-pointer transform transition hover:scale-105 hover:shadow-md flex flex-col items-center justify-center"
                  >
                    <div className="p-4 rounded-full bg-blue-100 text-blue-600 mb-4">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                      </svg>
                    </div>
                    <h3 className="text-xl font-semibold text-center">ƒê·ªÉ h·ªá th·ªëng ch·ªçn</h3>
                    <p className="text-gray-600 text-center mt-2">Ch√∫ng t√¥i s·∫Ω ch·ªçn b√°c sƒ© ph√π h·ª£p nh·∫•t v·ªõi nhu c·∫ßu c·ªßa b·∫°n</p>
                  </div>
                </div>
              </div>
            )}
            
            {/* Step 3: V·ªã tr√≠ th·ª±c hi·ªán */}
            {currentStep === 2 && (
              <div>
                <h2 className="text-2xl font-bold mb-6">Ch·ªçn v·ªã tr√≠ th·ª±c hi·ªán</h2>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div 
                    onClick={() => handleLocationSelect('online')}
                    className={`border rounded-xl p-6 cursor-pointer transform transition hover:scale-105 hover:shadow-md ${typeLocation === 'online' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'}`}
                  >
                    <div className="flex items-center mb-4">
                      <div className="p-3 rounded-full bg-blue-100 text-blue-600 mr-4">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                        </svg>
                      </div>
                      <h3 className="text-xl font-semibold">Online</h3>
                    </div>
                    <p className="text-gray-600 mb-4">T∆∞ v·∫•n tr·ª±c tuy·∫øn qua video call</p>
                    <div className="text-lg font-bold text-blue-600">
                      {formatPrice(getSelectedService()?.price.online || getSelectedPackage()?.price.online || 0)}
                    </div>
                  </div>
                  
                  <div 
                    onClick={() => handleLocationSelect('clinic')}
                    className={`border rounded-xl p-6 cursor-pointer transform transition hover:scale-105 hover:shadow-md ${typeLocation === 'clinic' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'}`}
                  >
                    <div className="flex items-center mb-4">
                      <div className="p-3 rounded-full bg-green-100 text-green-600 mr-4">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                        </svg>
                      </div>
                      <h3 className="text-xl font-semibold">Ph√≤ng kh√°m</h3>
                    </div>
                    <p className="text-gray-600 mb-4">ƒê·∫øn tr·ª±c ti·∫øp ph√≤ng kh√°m c·ªßa ch√∫ng t√¥i</p>
                    <div className="text-lg font-bold text-blue-600">
                      {formatPrice(getSelectedService()?.price.clinic || getSelectedPackage()?.price.clinic || 0)}
                    </div>
                  </div>
                  
                  <div 
                    onClick={() => handleLocationSelect('home')}
                    className={`border rounded-xl p-6 cursor-pointer transform transition hover:scale-105 hover:shadow-md ${typeLocation === 'home' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'}`}
                  >
                    <div className="flex items-center mb-4">
                      <div className="p-3 rounded-full bg-orange-100 text-orange-600 mr-4">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                        </svg>
                      </div>
                      <h3 className="text-xl font-semibold">T·∫°i nh√†</h3>
                    </div>
                    <p className="text-gray-600 mb-4">B√°c sƒ©/nh√¢n vi√™n y t·∫ø ƒë·∫øn t·∫≠n nh√† b·∫°n</p>
                    <div className="text-lg font-bold text-blue-600">
                      {formatPrice(getSelectedService()?.price.home || getSelectedPackage()?.price.home || 0)}
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            {/* Step 4: Ch·ªçn l·ªãch h·∫πn */}
            {currentStep === 3 && (
              <div>
                <h2 className="text-2xl font-bold mb-6">Ch·ªçn l·ªãch h·∫πn</h2>
                
                {/* Date picker */}
                <div className="mb-8">
                  <h3 className="text-lg font-semibold mb-4">Ch·ªçn ng√†y</h3>
                  <div className="grid grid-cols-7 gap-2">
                    {Array.from({ length: 14 }).map((_, index) => {
                      const date = new Date();
                      date.setDate(date.getDate() + index);
                      const dateString = date.toISOString().split('T')[0];
                      const dayOfWeek = new Intl.DateTimeFormat('vi-VN', { weekday: 'short' }).format(date);
                      const dayOfMonth = date.getDate();
                      
                      return (
                        <div 
                          key={dateString}
                          onClick={() => setSelectedDate(dateString)}
                          className={`flex flex-col items-center justify-center p-2 rounded-lg cursor-pointer transition
                            ${selectedDate === dateString 
                              ? 'bg-blue-600 text-white' 
                              : 'hover:bg-blue-50 border border-gray-200'}`}
                        >
                          <span className="text-sm font-medium">{dayOfWeek}</span>
                          <span className="text-lg font-bold">{dayOfMonth}</span>
                        </div>
                      );
                    })}
                  </div>
                </div>
                
                {/* Time slots */}
                {selectedDate && (
                  <div>
                    <h3 className="text-lg font-semibold mb-4">Ch·ªçn gi·ªù</h3>
                    <div className="grid grid-cols-4 sm:grid-cols-6 gap-2">
                      {timeSlots.map(slot => (
                        <div 
                          key={slot.id}
                          onClick={() => slot.isAvailable && setSelectedTimeSlot(slot.id)}
                          className={`text-center py-2 px-3 rounded-lg cursor-pointer transition
                            ${selectedTimeSlot === slot.id 
                              ? 'bg-blue-600 text-white' 
                              : slot.isAvailable 
                                ? 'hover:bg-blue-50 border border-gray-200' 
                                : 'bg-gray-100 text-gray-400 cursor-not-allowed'}`}
                        >
                          {slot.time}
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Next button */}
                {selectedDate && selectedTimeSlot && (
                  <div className="mt-8 flex justify-end">
                    <button
                      onClick={handleNext}
                      className="px-6 py-2 bg-blue-600 rounded-md text-white hover:bg-blue-700"
                    >
                      Ti·∫øp t·ª•c
                    </button>
                  </div>
                )}
              </div>
            )}
            
            {/* Step 5: Ch·ªçn h·ªì s∆° */}
            {currentStep === 4 && (
              <div>
                <h2 className="text-2xl font-bold mb-6">Ch·ªçn h·ªì s∆° b·ªánh nh√¢n</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {userProfiles.map(profile => (
                    <div 
                      key={profile.id}
                      onClick={() => handleProfileSelect(profile.id)}
                      className="border border-gray-200 hover:border-blue-300 rounded-xl p-5 cursor-pointer transform transition hover:scale-105 hover:shadow-md"
                    >
                      <div className="flex items-center mb-4">
                        <div className="p-3 rounded-full bg-blue-100 text-blue-600 mr-4">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                          </svg>
                        </div>
                        <div>
                          <h3 className="text-xl font-semibold">{profile.fullName}</h3>
                          <p className="text-gray-600">{profile.relationship === 'self' ? 'B·∫£n th√¢n' : 'Ng∆∞·ªùi th√¢n'}</p>
                        </div>
                        {profile.isDefault && (
                          <span className="ml-auto px-2 py-1 bg-blue-100 text-blue-600 text-xs rounded-full">M·∫∑c ƒë·ªãnh</span>
                        )}
                      </div>
                      <div className="space-y-2 text-sm text-gray-600">
                        <p>SƒêT: {profile.phone || 'Ch∆∞a c√≥'}</p>
                        <p>NƒÉm sinh: {typeof profile.birthDate === 'string' ? profile.birthDate : (profile.birthDate instanceof Date ? profile.birthDate.getFullYear().toString() : 'Ch∆∞a c√≥')}</p>
                        <p>Gi·ªõi t√≠nh: {profile.gender === 'male' ? 'Nam' : profile.gender === 'female' ? 'N·ªØ' : 'Kh√°c'}</p>
                      </div>
                    </div>
                  ))}
                  
                  {/* Create new profile */}
                  <div 
                    onClick={() => handleProfileSelect('new')}
                    className="border-2 border-dashed border-gray-300 hover:border-blue-300 rounded-xl p-5 cursor-pointer transform transition hover:scale-105 hover:shadow-md flex flex-col items-center justify-center"
                  >
                    <div className="p-4 rounded-full bg-green-100 text-green-600 mb-4">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                      </svg>
                    </div>
                    <h3 className="text-xl font-semibold text-center">T·∫°o h·ªì s∆° m·ªõi</h3>
                    <p className="text-gray-600 text-center mt-2">Th√™m th√¥ng tin cho ng∆∞·ªùi th√¢n ho·∫∑c b·∫£n th√¢n</p>
                  </div>
                </div>
              </div>
            )}
            
            {/* Step 6: Th√¥ng tin chi ti·∫øt */}
            {currentStep === 5 && (
              <div>
                <h2 className="text-2xl font-bold mb-6">Th√¥ng tin chi ti·∫øt</h2>
                
                <Form
                  form={form}
                  layout="vertical"
                  onFinish={handleSubmit}
                  initialValues={{
                    agreement: false
                  }}
                >
                  {typeLocation === 'home' && (
                    <Form.Item
                      name="address"
                      label="ƒê·ªãa ch·ªâ"
                      rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ c·ªßa b·∫°n' }]}
                    >
                      <Input placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß c·ªßa b·∫°n" />
                    </Form.Item>
                  )}
                  
                  <Form.Item
                    name="description"
                    label="M√¥ t·∫£ tri·ªáu ch·ª©ng/v·∫•n ƒë·ªÅ"
                    rules={[
                      { required: true, message: 'Vui l√≤ng m√¥ t·∫£ tri·ªáu ch·ª©ng ho·∫∑c v·∫•n ƒë·ªÅ b·∫°n ƒëang g·∫∑p ph·∫£i' },
                      { min: 10, message: 'M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±' },
                      { max: 500, message: 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±' }
                    ]}
                  >
                    <TextArea 
                      placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ tri·ªáu ch·ª©ng, v·∫•n ƒë·ªÅ s·ª©c kh·ªèe ho·∫∑c l√Ω do c·∫ßn t∆∞ v·∫•n (t·ªëi thi·ªÉu 10 k√Ω t·ª±)" 
                      rows={4}
                      showCount
                      maxLength={500}
                    />
                  </Form.Item>
                  
                  <Form.Item
                    name="notes"
                    label="Ghi ch√∫ b·ªï sung"
                  >
                    <TextArea 
                      placeholder="Th√¥ng tin b·ªï sung ho·∫∑c y√™u c·∫ßu ƒë·∫∑c bi·ªát" 
                      rows={2}
                    />
                  </Form.Item>
                  
                  <Form.Item
                    name="agreement"
                    valuePropName="checked"
                    rules={[{ 
                      validator: (_, value) => 
                        value ? Promise.resolve() : Promise.reject(new Error('Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n')) 
                    }]}
                  >
                    <div className="flex items-center">
                      <input 
                        type="checkbox" 
                        className="w-4 h-4 text-blue-600 mr-2" 
                        onChange={e => form.setFieldsValue({ agreement: e.target.checked })}
                      />
                      <span className="text-sm text-gray-600">
                        T√¥i ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán
                      </span>
                    </div>
                  </Form.Item>
                  
                  <div className="mt-8 flex justify-end">
                    <button
                      onClick={handleStep6Continue}
                      className="px-6 py-2 bg-blue-600 rounded-md text-white hover:bg-blue-700"
                    >
                      Ti·∫øp t·ª•c
                    </button>
                  </div>
                </Form>
              </div>
            )}
            
            {/* Step 7: X√°c nh·∫≠n */}
            {currentStep === 6 && (
              <div>
                <h2 className="text-2xl font-bold mb-6">X√°c nh·∫≠n ƒë·∫∑t l·ªãch</h2>
                
                <div className="bg-blue-50 rounded-lg p-6 mb-6">
                  <h3 className="text-lg font-semibold mb-4">Th√¥ng tin ƒë·∫∑t l·ªãch</h3>
                  
                  <div className="space-y-4">
                    <div className="flex justify-between">
                      <span className="text-gray-600">D·ªãch v·ª•:</span>
                      <span className="font-medium">{getSelectedService()?.name}</span>
                    </div>
                    
                    {selectedPackage && (
                      <div className="flex justify-between">
                        <span className="text-gray-600">G√≥i d·ªãch v·ª•:</span>
                        <span className="font-medium">{getSelectedPackage()?.name}</span>
                      </div>
                    )}
                    
                    {selectedDoctor && (
                      <div className="flex justify-between">
                        <span className="text-gray-600">B√°c sƒ©:</span>
                        <span className="font-medium">{getSelectedDoctor()?.name}</span>
                      </div>
                    )}
                    
                    <div className="flex justify-between">
                      <span className="text-gray-600">H√¨nh th·ª©c:</span>
                      <span className="font-medium">
                        {typeLocation === 'online' ? 'Online' : 
                         typeLocation === 'clinic' ? 'T·∫°i ph√≤ng kh√°m' : 'T·∫°i nh√†'}
                      </span>
                    </div>
                    
                    <div className="flex justify-between">
                      <span className="text-gray-600">Ng√†y h·∫πn:</span>
                      <span className="font-medium">{new Date(selectedDate).toLocaleDateString('vi-VN')}</span>
                    </div>
                    
                    <div className="flex justify-between">
                      <span className="text-gray-600">Gi·ªù h·∫πn:</span>
                      <span className="font-medium">{timeSlots.find(slot => slot.id === selectedTimeSlot)?.time}</span>
                    </div>
                    
                    <div className="flex justify-between">
                      <span className="text-gray-600">Gi√° d·ªãch v·ª•:</span>
                      <span className="font-medium text-blue-600">{formatPrice(getCurrentPrice())}</span>
                    </div>
                  </div>
                </div>
                
                <div className="mt-8 flex justify-between">
                  <button
                    onClick={handlePrev}
                    className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                  >
                    Quay l·∫°i
                  </button>
                  
                  <button
                    onClick={() => form.submit()}
                    className="px-6 py-2 bg-blue-600 rounded-md text-white hover:bg-blue-700"
                    disabled={loading}
                  >
                    {loading ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n ƒë·∫∑t l·ªãch'}
                  </button>
                </div>
              </div>
            )}
            
            {/* Navigation buttons */}
            <div className="mt-8 flex justify-between">
              {currentStep > 0 && (
                <button
                  onClick={handlePrev}
                  className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                >
                  Quay l·∫°i
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Modal t·∫°o profile m·ªõi */}
      {showCreateProfileModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 w-full max-w-md mx-4">
            <h3 className="text-xl font-bold mb-6">T·∫°o h·ªì s∆° m·ªõi</h3>
            
            <Form
              form={createProfileForm}
              layout="vertical"
              onFinish={handleCreateProfile}
            >
              <Form.Item
                name="fullName"
                label="H·ªç v√† t√™n"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n' }]}
              >
                <Input placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß" />
              </Form.Item>

              <Form.Item
                name="phone"
                label="S·ªë ƒëi·ªán tho·∫°i"
                rules={[
                  { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i' },
                  { pattern: /^[0-9]{10,11}$/, message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá' }
                ]}
              >
                <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
              </Form.Item>



              <Form.Item
                name="birthDate"
                label="NƒÉm sinh"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p nƒÉm sinh' }]}
              >
                <Input placeholder="V√≠ d·ª•: 1990" />
              </Form.Item>

              <Form.Item
                name="gender"
                label="Gi·ªõi t√≠nh"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn gi·ªõi t√≠nh' }]}
              >
                <select className="w-full p-2 border border-gray-300 rounded-md">
                  <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                  <option value="male">Nam</option>
                  <option value="female">N·ªØ</option>
                  <option value="other">Kh√°c</option>
                </select>
              </Form.Item>

              <div className="flex justify-end space-x-3 mt-6">
                <button
                  type="button"
                  onClick={() => setShowCreateProfileModal(false)}
                  className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  T·∫°o h·ªì s∆°
                </button>
              </div>
            </Form>
          </div>
        </div>
      )}
    </BookingLayout>
  );
};

export default Booking; 