import mongoose from 'mongoose';
import TestCategories from '../models/TestCategories';
import { config } from 'dotenv';

// Load bi·∫øn m√¥i tr∆∞·ªùng
config();

interface TestCategorySeed {
  name: string;
  description: string;
  unit: string;
  normalRange: string;
}

const testCategoriesData: TestCategorySeed[] = [
  // 1. Blood Sugar Tests
  {
    name: 'Glucose l√∫c ƒë√≥i',
    description: 'ƒêo n·ªìng ƒë·ªô ƒë∆∞·ªùng huy·∫øt sau khi nh·ªãn ƒÉn √≠t nh·∫•t 8 gi·ªù',
    unit: 'mg/dL',
    normalRange: '70-100'
  },
  {
    name: 'HbA1c',
    description: 'ƒêo n·ªìng ƒë·ªô ƒë∆∞·ªùng huy·∫øt trung b√¨nh trong 2-3 th√°ng qua',
    unit: '%',
    normalRange: '4.0-5.6'
  },
  {
    name: 'Glucose sau ƒÉn 2h',
    description: 'ƒêo n·ªìng ƒë·ªô ƒë∆∞·ªùng huy·∫øt 2 gi·ªù sau khi ƒÉn',
    unit: 'mg/dL',
    normalRange: '<140'
  },

  // 2. Lipid Panel Tests
  {
    name: 'Cholesterol to√†n ph·∫ßn',
    description: 'ƒêo t·ªïng l∆∞·ª£ng cholesterol trong m√°u',
    unit: 'mg/dL',
    normalRange: '<200'
  },
  {
    name: 'HDL Cholesterol',
    description: 'Cholesterol t·ªët - gi√∫p b·∫£o v·ªá tim m·∫°ch',
    unit: 'mg/dL',
    normalRange: '>40 (nam), >50 (n·ªØ)'
  },
  {
    name: 'LDL Cholesterol',
    description: 'Cholesterol x·∫•u - c√≥ th·ªÉ g√¢y t·∫Øc ngh·∫Ωn ƒë·ªông m·∫°ch',
    unit: 'mg/dL',
    normalRange: '<100'
  },
  {
    name: 'Triglycerides',
    description: 'Ch·∫•t b√©o trong m√°u c√≥ th·ªÉ g√¢y b·ªánh tim m·∫°ch',
    unit: 'mg/dL',
    normalRange: '<150'
  },

  // 3. Liver Function Tests
  {
    name: 'ALT (SGPT)',
    description: 'Enzyme gan - ch·ªâ b√°o t·ªïn th∆∞∆°ng t·∫ø b√†o gan',
    unit: 'IU/L',
    normalRange: '7-41'
  },
  {
    name: 'AST (SGOT)',
    description: 'Enzyme gan - ch·ªâ b√°o t·ªïn th∆∞∆°ng gan v√† tim',
    unit: 'IU/L',
    normalRange: '13-35'
  },
  {
    name: 'Bilirubin to√†n ph·∫ßn',
    description: 'S·∫£n ph·∫©m ph√¢n h·ªßy h·ªìng c·∫ßu - ch·ªâ b√°o ch·ª©c nƒÉng gan',
    unit: 'mg/dL',
    normalRange: '0.2-1.2'
  },

  // 4. Kidney Function Tests
  {
    name: 'Creatinine',
    description: 'Ch·ªâ b√°o ch·ª©c nƒÉng th·∫≠n v√† kh·ªëi l∆∞·ª£ng c∆°',
    unit: 'mg/dL',
    normalRange: '0.6-1.2 (nam), 0.5-1.1 (n·ªØ)'
  },
  {
    name: 'Urea',
    description: 'S·∫£n ph·∫©m chuy·ªÉn h√≥a protein - ch·ªâ b√°o ch·ª©c nƒÉng th·∫≠n',
    unit: 'mg/dL',
    normalRange: '7-25'
  },
  {
    name: 'eGFR',
    description: 'T·ªëc ƒë·ªô l·ªçc c·∫ßu th·∫≠n ∆∞·ªõc t√≠nh',
    unit: 'mL/min/1.73m¬≤',
    normalRange: '>60'
  },

  // 5. Thyroid Function Tests
  {
    name: 'TSH',
    description: 'Hormone k√≠ch th√≠ch tuy·∫øn gi√°p',
    unit: 'mIU/L',
    normalRange: '0.4-4.0'
  },
  {
    name: 'Free T4',
    description: 'Hormone tuy·∫øn gi√°p t·ª± do',
    unit: 'ng/dL',
    normalRange: '0.8-1.8'
  },
  {
    name: 'Free T3',
    description: 'Hormone tuy·∫øn gi√°p ho·∫°t t√≠nh t·ª± do',
    unit: 'pg/mL',
    normalRange: '2.3-4.2'
  },

  // 6. Complete Blood Count
  {
    name: 'Hemoglobin',
    description: 'Protein v·∫≠n chuy·ªÉn oxy trong h·ªìng c·∫ßu',
    unit: 'g/dL',
    normalRange: '12-15 (n·ªØ), 14-17 (nam)'
  },
  {
    name: 'Hematocrit',
    description: 'T·ª∑ l·ªá th·ªÉ t√≠ch h·ªìng c·∫ßu trong m√°u',
    unit: '%',
    normalRange: '36-46 (n·ªØ), 41-50 (nam)'
  },
  {
    name: 'B·∫°ch c·∫ßu',
    description: 'T·∫ø b√†o b·∫°ch c·∫ßu - ch·ªâ b√°o nhi·ªÖm tr√πng v√† mi·ªÖn d·ªãch',
    unit: 'cells/ŒºL',
    normalRange: '4,000-11,000'
  },
  {
    name: 'Ti·ªÉu c·∫ßu',
    description: 'T·∫ø b√†o gi√∫p ƒë√¥ng m√°u',
    unit: 'cells/ŒºL',
    normalRange: '150,000-450,000'
  },

  // 7. Inflammation Markers
  {
    name: 'CRP',
    description: 'Protein ph·∫£n ·ª©ng C - ch·ªâ b√°o vi√™m nhi·ªÖm',
    unit: 'mg/L',
    normalRange: '<3.0'
  },
  {
    name: 'ESR',
    description: 'T·ªëc ƒë·ªô l·∫Øng h·ªìng c·∫ßu - ch·ªâ b√°o vi√™m nhi·ªÖm',
    unit: 'mm/h',
    normalRange: '<20 (nam), <30 (n·ªØ)'
  },

  // 8. Vitamin & Minerals
  {
    name: 'Vitamin D',
    description: 'Vitamin h·ªó tr·ª£ h·∫•p thu canxi v√† s·ª©c kh·ªèe x∆∞∆°ng',
    unit: 'ng/mL',
    normalRange: '30-100'
  },
  {
    name: 'Vitamin B12',
    description: 'Vitamin c·∫ßn thi·∫øt cho h·ªá th·∫ßn kinh v√† t·∫°o m√°u',
    unit: 'pg/mL',
    normalRange: '300-900'
  },
  {
    name: 'Folate',
    description: 'Vitamin B9 c·∫ßn thi·∫øt cho t·∫°o DNA v√† h·ªìng c·∫ßu',
    unit: 'ng/mL',
    normalRange: '3-17'
  }
];

async function seedTestCategories() {
  try {
    // K·∫øt n·ªëi ƒë·∫øn MongoDB
    await mongoose.connect(process.env.MONGO_URI as string);
    console.log('‚úÖ Connected to MongoDB for Test Categories seeding');

    // X√≥a d·ªØ li·ªáu c≈©
    await TestCategories.deleteMany({});
    console.log('üßπ Cleared existing test categories');

    // T·∫°o test categories m·ªõi
    const createdCategories = await TestCategories.insertMany(testCategoriesData);
    console.log(`‚úÖ Created ${createdCategories.length} test categories`);

    // Hi·ªÉn th·ªã th·ªëng k√™
    const stats = {
      total: createdCategories.length,
      withUnit: createdCategories.filter(cat => cat.unit && cat.unit.trim().length > 0).length,
      withNormalRange: createdCategories.filter(cat => cat.normalRange && cat.normalRange.trim().length > 0).length,
      complete: createdCategories.filter(cat => 
        cat.unit && cat.unit.trim().length > 0 && 
        cat.normalRange && cat.normalRange.trim().length > 0
      ).length
    };

    console.log('\nüìä Test Categories Statistics:');
    console.log(`   üî¨ T·ªïng s·ªë lo·∫°i x√©t nghi·ªám: ${stats.total}`);
    console.log(`   üìè C√≥ ƒë∆°n v·ªã ƒëo: ${stats.withUnit}`);
    console.log(`   üìä C√≥ gi√° tr·ªã chu·∫©n: ${stats.withNormalRange}`);
    console.log(`   ‚úÖ Th√¥ng tin ƒë·∫ßy ƒë·ªß: ${stats.complete}`);

    // Hi·ªÉn th·ªã m·ªôt s·ªë examples
    console.log('\nüîç V√≠ d·ª• v·ªÅ test categories ƒë√£ t·∫°o:');
    const examples = createdCategories.slice(0, 5);
    examples.forEach((cat, index) => {
      console.log(`   ${index + 1}. ${cat.name} (${cat.unit}) - B√¨nh th∆∞·ªùng: ${cat.normalRange}`);
    });

    console.log('\nüéâ Test Categories seeding completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error seeding test categories:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå Disconnected from MongoDB');
  }
}

// Ch·∫°y seed n·∫øu file ƒë∆∞·ª£c th·ª±c thi tr·ª±c ti·∫øp
if (require.main === module) {
  seedTestCategories()
    .then(() => {
      console.log('‚úÖ Test Categories seed process completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Test Categories seed process failed:', error);
      process.exit(1);
    });
}

export { seedTestCategories }; 