import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';
import { User, UserProfiles, Doctor, Appointments, MedicalRecords } from '../models';

export const seedUserMedicalData = async () => {
  try {
    console.log('üå± Starting User Medical Data Seeding...');

    // 1. T·∫°o 2 Users
    const hashedPassword = await bcrypt.hash('123456', 10);
    
    const users = await User.insertMany([
      {
        email: 'patient1@gmail.com',
        password: hashedPassword,
        fullName: 'Nguy·ªÖn Th·ªã H·∫°nh',
        phone: '0987654321',
        role: 'customer',
        emailVerified: true,
        isActive: true,
        gender: 'female',
        address: 'H√† N·ªôi',
        year: new Date('1990-05-15')
      },
      {
        email: 'patient2@gmail.com', 
        password: hashedPassword,
        fullName: 'Tr·∫ßn VƒÉn Nam',
        phone: '0976543210',
        role: 'customer',
        emailVerified: true,
        isActive: true,
        gender: 'male',
        address: 'TP.HCM',
        year: new Date('1985-12-20')
      }
    ]);

    console.log(`‚úÖ Created ${users.length} users`);

    // 2. T·∫°o 1 Doctor ƒë·ªÉ l√†m doctorId cho medical records
    const doctorUser = await User.create({
      email: 'doctor.medical@clinic.com',
      password: hashedPassword,
      fullName: 'B√°c sƒ© L√™ Th·ªã Minh',
      phone: '0123456789',
      role: 'doctor',
      emailVerified: true,
      isActive: true,
      gender: 'female',
      address: 'B·ªánh vi·ªán ABC'
    });

    const doctor = await Doctor.create({
      userId: doctorUser._id,
      bio: 'B√°c sƒ© chuy√™n khoa S·∫£n Ph·ª• khoa v·ªõi 10 nƒÉm kinh nghi·ªám',
      experience: 10,
      rating: 4.8,
      specialization: 'S·∫£n Ph·ª• khoa',
      education: 'ƒê·∫°i h·ªçc Y H√† N·ªôi',
      certificate: 'Ch·ª©ng ch·ªâ h√†nh ngh·ªÅ s·ªë 12345'
    });

    console.log('‚úÖ Created doctor for medical records');

    // 3. T·∫°o UserProfiles v√† Medical Records
    const allProfiles = [];
    const allAppointments = [];
    const allMedicalRecords = [];

    for (let userIndex = 0; userIndex < users.length; userIndex++) {
      const user = users[userIndex];
      
      // T·∫°o 3 profiles cho m·ªói user
      for (let profileIndex = 1; profileIndex <= 3; profileIndex++) {
        const profileName = userIndex === 0 
          ? [`Nguy·ªÖn Th·ªã H·∫°nh`, `Con g√°i - Nguy·ªÖn Th·ªã Lan`, `Con trai - Nguy·ªÖn VƒÉn Minh`][profileIndex - 1]
          : [`Tr·∫ßn VƒÉn Nam`, `V·ª£ - Nguy·ªÖn Th·ªã Thu`, `Con g√°i - Tr·∫ßn Th·ªã H∆∞∆°ng`][profileIndex - 1];

        const profileGender = userIndex === 0 
          ? ['female', 'female', 'male'][profileIndex - 1]
          : ['male', 'female', 'female'][profileIndex - 1];

        const profileYear = userIndex === 0
          ? [new Date('1990-05-15'), new Date('2015-08-10'), new Date('2018-03-25')][profileIndex - 1]
          : [new Date('1985-12-20'), new Date('1992-07-18'), new Date('2020-11-05')][profileIndex - 1];

        // T·∫°o UserProfile
        const profile = await UserProfiles.create({
          ownerId: user._id,
          fullName: profileName,
          gender: profileGender,
          phone: user.phone,
          year: profileYear
        });

        allProfiles.push(profile);

        // T·∫°o Appointment cho m·ªói profile  
        const appointmentDate = new Date();
        appointmentDate.setDate(appointmentDate.getDate() - Math.floor(Math.random() * 30)); // Random trong 30 ng√†y qua

        const appointment = await Appointments.create({
          createdByUserId: user._id,
          profileId: profile._id,
          appointmentDate: appointmentDate,
          appointmentTime: ['09:00', '14:00', '16:00'][profileIndex - 1],
          appointmentType: 'consultation',
          typeLocation: 'clinic',
          address: 'Ph√≤ng kh√°m ABC, 123 ƒê∆∞·ªùng XYZ',
          description: `Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ cho ${profileName}`,
          status: 'completed'
        });

        allAppointments.push(appointment);

        // T·∫°o Medical Record t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng profile
        const medicalRecordData = getMedicalRecordData(userIndex, profileIndex, profileGender);
        
        const medicalRecord = await MedicalRecords.create({
          doctorId: doctor._id,
          profileId: profile._id,
          appointmentId: appointment._id,
          conclusion: medicalRecordData.conclusion,
          symptoms: medicalRecordData.symptoms,
          treatment: medicalRecordData.treatment,
          medicines: medicalRecordData.medicines,
          notes: medicalRecordData.notes,
          status: "completed"
        });

        allMedicalRecords.push(medicalRecord);

        console.log(`‚úÖ Created profile, appointment & medical record: ${profileName}`);
      }
    }

    console.log(`üéâ Seeding completed successfully!`);
    console.log(`üìä Summary:`);
    console.log(`   - Users: ${users.length}`);
    console.log(`   - Doctor: 1`);
    console.log(`   - UserProfiles: ${allProfiles.length}`);
    console.log(`   - Appointments: ${allAppointments.length}`);
    console.log(`   - Medical Records: ${allMedicalRecords.length}`);

  } catch (error) {
    console.error('‚ùå Error seeding user medical data:', error);
    throw error;
  }
};

// H√†m helper t·∫°o d·ªØ li·ªáu medical record ƒëa d·∫°ng
function getMedicalRecordData(userIndex: number, profileIndex: number, gender: string) {
  const medicalData = [
    // User 1 - Nguy·ªÖn Th·ªã H·∫°nh
    [
      // Profile 1 - Ch√≠nh ch·ªß (female)
      {
        conclusion: 'Vi√™m nhi·ªÖm ph·ª• khoa nh·∫π',
        symptoms: 'Ng·ª©a v√πng k√≠n, kh√≠ h∆∞ b·∫•t th∆∞·ªùng, ƒëau b·ª•ng d∆∞·ªõi nh·∫π',
        treatment: 'S·ª≠ d·ª•ng thu·ªëc kh√°ng sinh v√† gel v·ªá sinh ph·ª• khoa, ki√™ng quan h·ªá trong 1 tu·∫ßn',
        medicines: [
          {
            name: 'Metronidazole',
            type: 'antibiotic' as const,
            dosage: '500mg',
            frequency: 2,
            timingInstructions: 'S√°ng v√† t·ªëi sau ƒÉn',
            duration: '7 ng√†y',
            instructions: 'U·ªëng ƒë·ªß li·ªÅu, kh√¥ng b·ªè s√≥t. Tr√°nh u·ªëng r∆∞·ª£u khi d√πng thu·ªëc.'
          },
          {
            name: 'Lactacyd Feminine',
            type: 'other' as const,
            dosage: '5ml',
            frequency: 2,
            timingInstructions: 'S√°ng v√† t·ªëi khi t·∫Øm',
            duration: '2 tu·∫ßn',
            instructions: 'Pha lo√£ng v·ªõi n∆∞·ªõc s·∫°ch, v·ªá sinh nh·∫π nh√†ng.'
          }
        ],
        notes: 'T√°i kh√°m sau 1 tu·∫ßn. Gi·ªØ v·ªá sinh c√° nh√¢n, m·∫∑c ƒë·ªì l√≥t cotton.'
      },
      // Profile 2 - Con g√°i (female, 9 tu·ªïi)
      {
        conclusion: 'Vi√™m h·ªçng c·∫•p t√≠nh',
        symptoms: 'S·ªët 38.5¬∞C, ƒëau h·ªçng, kh√≥ nu·ªët, ho khan',
        treatment: 'Ngh·ªâ ng∆°i, u·ªëng nhi·ªÅu n∆∞·ªõc, d√πng thu·ªëc theo ƒë∆°n',
        medicines: [
          {
            name: 'Paracetamol tr·∫ª em',
            type: 'painkiller' as const,
            dosage: '250mg',
            frequency: 3,
            timingInstructions: 'S√°ng, tr∆∞a, t·ªëi sau ƒÉn',
            duration: '5 ng√†y',
            instructions: 'Ch·ªâ u·ªëng khi s·ªët tr√™n 38¬∞C. C√°ch nhau √≠t nh·∫•t 6 ti·∫øng.'
          },
          {
            name: 'Amoxicillin tr·∫ª em',
            type: 'antibiotic' as const,
            dosage: '125mg',
            frequency: 3,
            timingInstructions: 'S√°ng, tr∆∞a, t·ªëi tr∆∞·ªõc ƒÉn 30 ph√∫t',
            duration: '7 ng√†y',
            instructions: 'U·ªëng ƒë·ªß li·ªÅu theo ƒë∆°n. Kh√¥ng ƒë∆∞·ª£c ng·ª´ng thu·ªëc khi h·∫øt tri·ªáu ch·ª©ng.'
          }
        ],
        notes: 'Cho b√© u·ªëng nhi·ªÅu n∆∞·ªõc ·∫•m, ƒÉn m·ªÅm. T√°i kh√°m n·∫øu s·ªët kh√¥ng gi·∫£m sau 3 ng√†y.'
      },
      // Profile 3 - Con trai (male, 6 tu·ªïi)
      {
        conclusion: 'Vi√™m da c∆° ƒë·ªãa (Eczema)',
        symptoms: 'Da kh√¥, ng·ª©a, ƒë·ªè ·ªü khu·ª∑u tay v√† ƒë·∫ßu g·ªëi',
        treatment: 'Thoa kem d∆∞·ª°ng ·∫©m, tr√°nh ch·∫•t k√≠ch ·ª©ng, d√πng thu·ªëc theo ƒë∆°n',
        medicines: [
          {
            name: 'Hydrocortisone cream 1%',
            type: 'other' as const,
            dosage: 'L∆∞·ª£ng v·ª´a ƒë·ªß',
            frequency: 2,
            timingInstructions: 'S√°ng v√† t·ªëi sau t·∫Øm',
            duration: '2 tu·∫ßn',
            instructions: 'Thoa m·ªèng l√™n v√πng da b·ªã vi√™m. Kh√¥ng thoa qu√° 2 tu·∫ßn li√™n t·ª•c.'
          },
          {
            name: 'Cetaphil Baby Moisturizer',
            type: 'other' as const,
            dosage: 'L∆∞·ª£ng v·ª´a ƒë·ªß',
            frequency: 3,
            timingInstructions: 'Sau m·ªói l·∫ßn t·∫Øm v√† khi da kh√¥',
            duration: 'S·ª≠ d·ª•ng l√¢u d√†i',
            instructions: 'Thoa ƒë·ªÅu l√™n to√†n th√¢n, ƒë·∫∑c bi·ªát v√πng da kh√¥.'
          }
        ],
        notes: 'Tr√°nh x√† ph√≤ng m·∫°nh, m·∫∑c qu·∫ßn √°o cotton. C·∫Øt ng·∫Øn m√≥ng tay ƒë·ªÉ tr√°nh g√£i.'
      }
    ],
    // User 2 - Tr·∫ßn VƒÉn Nam  
    [
      // Profile 1 - Ch√≠nh ch·ªß (male)
      {
        conclusion: 'Vi√™m d·∫° d√†y - t√° tr√†ng',
        symptoms: 'ƒêau b·ª•ng tr√™n r·ªën, ·ª£ h∆°i, bu·ªìn n√¥n, ƒë·∫ßy b·ª•ng sau ƒÉn',
        treatment: 'ƒÇn nh·ªè nhi·ªÅu b·ªØa, tr√°nh cay n√≥ng, u·ªëng thu·ªëc theo ƒë∆°n',
        medicines: [
          {
            name: 'Omeprazole',
            type: 'other' as const,
            dosage: '20mg',
            frequency: 1,
            timingInstructions: 'S√°ng tr∆∞·ªõc ƒÉn 30 ph√∫t',
            duration: '4 tu·∫ßn',
            instructions: 'Nu·ªët nguy√™n vi√™n, kh√¥ng nhai. U·ªëng ƒë·ªÅu ƒë·∫∑n m·ªói ng√†y.'
          },
          {
            name: 'Domperidone',
            type: 'other' as const,
            dosage: '10mg',
            frequency: 3,
            timingInstructions: 'Tr∆∞·ªõc m·ªói b·ªØa ƒÉn 15 ph√∫t',
            duration: '2 tu·∫ßn',
            instructions: 'Gi√∫p ti√™u h√≥a v√† gi·∫£m bu·ªìn n√¥n.'
          }
        ],
        notes: 'Ki√™ng r∆∞·ª£u bia, c√† ph√™, th·ª©c ƒÉn cay. ƒÇn ch·∫≠m, nhai k·ªπ. T√°i kh√°m sau 2 tu·∫ßn.'
      },
      // Profile 2 - V·ª£ (female)
      {
        conclusion: 'Thi·ªÉu nƒÉng tu·∫ßn ho√†n n√£o',
        symptoms: 'ƒêau ƒë·∫ßu, ch√≥ng m·∫∑t, m·ªát m·ªèi, kh√≥ t·∫≠p trung',
        treatment: 'Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß, t·∫≠p th·ªÉ d·ª•c nh·∫π, d√πng thu·ªëc c·∫£i thi·ªán tu·∫ßn ho√†n',
        medicines: [
          {
            name: 'Ginkgo Biloba',
            type: 'other' as const,
            dosage: '120mg',
            frequency: 2,
            timingInstructions: 'S√°ng v√† chi·ªÅu sau ƒÉn',
            duration: '1 th√°ng',
            instructions: 'C·∫£i thi·ªán tu·∫ßn ho√†n m√°u n√£o, tƒÉng kh·∫£ nƒÉng t·∫≠p trung.'
          },
          {
            name: 'Vitamin B Complex',
            type: 'vitamin' as const,
            dosage: '1 vi√™n',
            frequency: 1,
            timingInstructions: 'S√°ng sau ƒÉn',
            duration: '2 th√°ng',
            instructions: 'B·ªï sung vitamin nh√≥m B cho h·ªá th·∫ßn kinh.'
          }
        ],
        notes: 'Ng·ªß ƒë·ªß 8 ti·∫øng, tr√°nh stress. T·∫≠p yoga ho·∫∑c ƒëi b·ªô 30 ph√∫t/ng√†y.'
      },
      // Profile 3 - Con g√°i (female, 4 tu·ªïi)
      {
        conclusion: 'Vi√™m ph·∫ø qu·∫£n c·∫•p',
        symptoms: 'Ho c√≥ ƒë·ªùm, s·ªët nh·∫π, kh√≥ th·ªü, th·ªü kh√≤ kh√®',
        treatment: 'X√¥ng m≈©i h·ªçng, u·ªëng nhi·ªÅu n∆∞·ªõc ·∫•m, d√πng thu·ªëc theo ƒë∆°n',
        medicines: [
          {
            name: 'Salbutamol syrup',
            type: 'other' as const,
            dosage: '2.5ml',
            frequency: 3,
            timingInstructions: 'S√°ng, tr∆∞a, t·ªëi sau ƒÉn',
            duration: '7 ng√†y',
            instructions: 'Gi√∫p gi√£n ph·∫ø qu·∫£n, gi·∫£m kh√≥ th·ªü. L·∫Øc ƒë·ªÅu tr∆∞·ªõc khi u·ªëng.'
          },
          {
            name: 'Carbocisteine syrup',
            type: 'other' as const,
            dosage: '2.5ml',
            frequency: 3,
            timingInstructions: 'S√°ng, tr∆∞a, t·ªëi tr∆∞·ªõc ƒÉn',
            duration: '5 ng√†y',
            instructions: 'L√†m lo√£ng ƒë·ªùm, d·ªÖ t·ªëng ƒë·ªùm ra ngo√†i.'
          }
        ],
        notes: 'X√¥ng m≈©i h·ªçng 2 l·∫ßn/ng√†y. Tr√°nh kh√≥i thu·ªëc, b·ª•i. T√°i kh√°m n·∫øu ho kh√¥ng gi·∫£m sau 1 tu·∫ßn.'
      }
    ]
  ];

  return medicalData[userIndex][profileIndex - 1];
} 