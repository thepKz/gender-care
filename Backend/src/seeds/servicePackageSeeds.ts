import Service from '../models/Service';
import ServicePackages from '../models/ServicePackages';
import mongoose from 'mongoose';

// ƒê·ªãnh nghƒ©a c√°c g√≥i d·ªãch v·ª• v·ªõi logic bundling
const packageTemplates = [
  {
    name: 'G√≥i T∆∞ v·∫•n C∆° b·∫£n',
    description: 'G√≥i t∆∞ v·∫•n s·ª©c kh·ªèe sinh s·∫£n c∆° b·∫£n v·ªõi b√°c sƒ© chuy√™n khoa',
    serviceTypes: ['consultation'],
    serviceNames: ['T∆∞ v·∫•n s·ª©c kh·ªèe sinh s·∫£n'],
    discountPercent: 0, // Kh√¥ng gi·∫£m gi√° cho single service
    durationInDays: 30,
    maxUsages: 2,
    maxProfiles: [1],
    isMultiProfile: false
  },
  {
    name: 'G√≥i X√©t nghi·ªám STI C∆° b·∫£n',
    description: 'G√≥i x√©t nghi·ªám c∆° b·∫£n c√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c',
    serviceTypes: ['test'],
    serviceNames: ['X√©t nghi·ªám STI/STD c∆° b·∫£n'],
    discountPercent: 0,
    durationInDays: 60,
    maxUsages: 1,
    maxProfiles: [1],
    isMultiProfile: false
  },
  {
    name: 'G√≥i ChƒÉm s√≥c T√¢m l√Ω',
    description: 'G√≥i t∆∞ v·∫•n t√¢m l√Ω t√¨nh d·ª•c v√† theo d√µi chu k·ª≥ kinh nguy·ªát',
    serviceTypes: ['consultation'],
    serviceNames: ['T∆∞ v·∫•n t√¢m l√Ω t√¨nh d·ª•c', 'Theo d√µi chu k·ª≥ kinh nguy·ªát'],
    discountPercent: 15,
    durationInDays: 90,
    maxUsages: 5,
    maxProfiles: [1],
    isMultiProfile: false
  },
  {
    name: 'G√≥i T∆∞ v·∫•n Premium',
    description: 'G√≥i t∆∞ v·∫•n to√†n di·ªán bao g·ªìm s·ª©c kh·ªèe sinh s·∫£n v√† t√¢m l√Ω',
    serviceTypes: ['consultation'],
    serviceNames: ['T∆∞ v·∫•n s·ª©c kh·ªèe sinh s·∫£n', 'T∆∞ v·∫•n t√¢m l√Ω t√¨nh d·ª•c', 'Theo d√µi chu k·ª≥ kinh nguy·ªát'],
    discountPercent: 20,
    durationInDays: 120,
    maxUsages: 8,
    maxProfiles: [1, 2],
    isMultiProfile: true
  },
  {
    name: 'G√≥i Ki·ªÉm tra S·ª©c kh·ªèe To√†n di·ªán',
    description: 'G√≥i bao g·ªìm kh√°m t·ªïng qu√°t v√† x√©t nghi·ªám STI to√†n di·ªán',
    serviceTypes: ['test'],
    serviceNames: ['Kh√°m s·ª©c kh·ªèe t·ªïng qu√°t', 'X√©t nghi·ªám STI/STD to√†n di·ªán'],
    discountPercent: 18,
    durationInDays: 180,
    maxUsages: 2,
    maxProfiles: [1],
    isMultiProfile: false
  },
  {
    name: 'G√≥i Gia ƒë√¨nh Standard',
    description: 'G√≥i d√†nh cho c·∫∑p ƒë√¥i bao g·ªìm t∆∞ v·∫•n v√† x√©t nghi·ªám c∆° b·∫£n',
    serviceTypes: ['consultation', 'test'],
    serviceNames: ['T∆∞ v·∫•n s·ª©c kh·ªèe sinh s·∫£n', 'X√©t nghi·ªám STI/STD c∆° b·∫£n', 'T∆∞ v·∫•n t√¢m l√Ω t√¨nh d·ª•c'],
    discountPercent: 25,
    durationInDays: 180,
    maxUsages: 6,
    maxProfiles: [2],
    isMultiProfile: true
  },
  {
    name: 'G√≥i VIP - ChƒÉm s√≥c Cao c·∫•p',
    description: 'G√≥i VIP bao g·ªìm t·∫•t c·∫£ d·ªãch v·ª• v·ªõi s·ªë l∆∞·ª£t s·ª≠ d·ª•ng kh√¥ng gi·ªõi h·∫°n',
    serviceTypes: ['consultation', 'test'],
    serviceNames: [], // S·∫Ω include t·∫•t c·∫£ services
    discountPercent: 30,
    durationInDays: 365,
    maxUsages: 20,
    maxProfiles: [1, 2, 4],
    isMultiProfile: true
  },
  {
    name: 'G√≥i Sinh vi√™n',
    description: 'G√≥i ∆∞u ƒë√£i d√†nh cho sinh vi√™n v·ªõi gi√° c·∫£ ph·∫£i chƒÉng',
    serviceTypes: ['consultation'],
    serviceNames: ['T∆∞ v·∫•n s·ª©c kh·ªèe sinh s·∫£n', 'T∆∞ v·∫•n t√¢m l√Ω t√¨nh d·ª•c'],
    discountPercent: 35,
    durationInDays: 90,
    maxUsages: 4,
    maxProfiles: [1],
    isMultiProfile: false
  }
];

// H√†m t√≠nh gi√° g√≥i d·ª±a tr√™n services
const calculatePackagePrice = (services: any[], discountPercent: number) => {
  const totalPrice = services.reduce((sum, service) => sum + service.price, 0);
  const discountedPrice = totalPrice * (1 - discountPercent / 100);
  
  return {
    priceBeforeDiscount: totalPrice,
    price: Math.round(discountedPrice / 1000) * 1000 // L√†m tr√≤n ƒë·∫øn ngh√¨n
  };
};

export const seedServicePackages = async () => {
  try {
    console.log('üå± ƒêang t·∫°o Service Package seed data...');

    // Ki·ªÉm tra ƒë√£ c√≥ package n√†o ch∆∞a
    const existingPackages = await ServicePackages.countDocuments();
    if (existingPackages > 0) {
      console.log('‚úÖ Service Package seed data ƒë√£ t·ªìn t·∫°i, b·ªè qua vi·ªác t·∫°o m·ªõi');
      return;
    }

    // L·∫•y t·∫•t c·∫£ services hi·ªán c√≥
    const allServices = await Service.find({ isDeleted: { $ne: 1 } });
    
    if (allServices.length === 0) {
      throw new Error('‚ùå Kh√¥ng t√¨m th·∫•y service n√†o. Vui l√≤ng ch·∫°y servicesSeed tr∆∞·ªõc!');
    }

    console.log(`üìã T√¨m th·∫•y ${allServices.length} services, ƒëang t·∫°o ${packageTemplates.length} g√≥i d·ªãch v·ª•...`);

    // T·∫°o t·ª´ng package
    const packagePromises = packageTemplates.map(async (template) => {
      let selectedServices;

      // Logic ch·ªçn services cho package
      if (template.serviceNames.length === 0) {
        // VIP package - include t·∫•t c·∫£ services
        selectedServices = allServices;
      } else {
        // Ch·ªçn services theo t√™n c·ª• th·ªÉ
        selectedServices = allServices.filter(service => 
          template.serviceNames.includes(service.serviceName)
        );
      }

      // Fallback n·∫øu kh√¥ng t√¨m th·∫•y services theo t√™n
      if (selectedServices.length === 0) {
        selectedServices = allServices.filter(service => 
          template.serviceTypes.includes(service.serviceType)
        );
      }

      // N·∫øu v·∫´n kh√¥ng c√≥ services, skip package n√†y
      if (selectedServices.length === 0) {
        console.log(`   ‚ö†Ô∏è B·ªè qua g√≥i "${template.name}" - kh√¥ng t√¨m th·∫•y services ph√π h·ª£p`);
        return null;
      }

      // T√≠nh gi√° package
      const pricing = calculatePackagePrice(selectedServices, template.discountPercent);

      // T·∫°o package data
      const packageData = {
        name: template.name,
        description: template.description,
        priceBeforeDiscount: pricing.priceBeforeDiscount,
        price: pricing.price,
        serviceIds: selectedServices.map(service => service._id),
        isActive: true,
        durationInDays: template.durationInDays,
        maxUsages: template.maxUsages,
        maxProfiles: template.maxProfiles,
        isMultiProfile: template.isMultiProfile
      };

      // T·∫°o package trong database
      const createdPackage = await ServicePackages.create(packageData);

      // Log th√¥ng tin package ƒë√£ t·∫°o
      const discountAmount = pricing.priceBeforeDiscount - pricing.price;
      console.log(`   ‚úÖ ${template.name}`);
      console.log(`      - Services: ${selectedServices.length} d·ªãch v·ª•`);
      console.log(`      - Gi√° g·ªëc: ${pricing.priceBeforeDiscount.toLocaleString('vi-VN')}ƒë`);
      console.log(`      - Gi√° b√°n: ${pricing.price.toLocaleString('vi-VN')}ƒë (ti·∫øt ki·ªám ${discountAmount.toLocaleString('vi-VN')}ƒë)`);
      console.log(`      - Th·ªùi h·∫°n: ${template.durationInDays} ng√†y, T·ªëi ƒëa: ${template.maxUsages} l∆∞·ª£t`);

      return createdPackage;
    });

    // Th·ª±c hi·ªán t·∫°o t·∫•t c·∫£ packages (filter null values)
    const createdPackages = (await Promise.all(packagePromises)).filter(pkg => pkg !== null);

    // Th·ªëng k√™ k·∫øt qu·∫£
    const totalSavings = createdPackages.reduce((total, pkg) => {
      return total + (pkg!.priceBeforeDiscount - pkg!.price);
    }, 0);

    console.log('\nüéâ Ho√†n th√†nh t·∫°o Service Package seed data!');
    console.log(`üìä Th·ªëng k√™:`);
    console.log(`   - S·ªë g√≥i ƒë√£ t·∫°o: ${createdPackages.length}/${packageTemplates.length}`);
    console.log(`   - T·ªïng ti·∫øt ki·ªám cho kh√°ch h√†ng: ${totalSavings.toLocaleString('vi-VN')}ƒë`);
    console.log(`   - G√≥i r·∫ª nh·∫•t: ${Math.min(...createdPackages.map(p => p!.price)).toLocaleString('vi-VN')}ƒë`);
    console.log(`   - G√≥i ƒë·∫Øt nh·∫•t: ${Math.max(...createdPackages.map(p => p!.price)).toLocaleString('vi-VN')}ƒë`);

    return createdPackages;

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o service package seeds:', error);
    throw error;
  }
};

export default seedServicePackages; 