import bcrypt from 'bcryptjs';
import Doctor from '../models/Doctor';
import User from '../models/User';
import DoctorSchedules from '../models/DoctorSchedules';

const seedDoctors = async () => {
  try {
    // Ki·ªÉm tra ƒë√£ c√≥ doctor n√†o ch∆∞a
    const existingDoctors = await Doctor.countDocuments();
    if (existingDoctors > 0) {
      console.log('‚úÖ Doctor seed data ƒë√£ t·ªìn t·∫°i, b·ªè qua vi·ªác t·∫°o m·ªõi');
      return;
    }

    console.log('üå± ƒêang t·∫°o Doctor seed data...');

    // Data demo cho 5 b√°c sƒ©
    const doctorsData = [
      {
        user: {
          email: 'dr.nguyen@genderhealthcare.com',
          password: 'doctor123',
          fullName: 'BS. Nguy·ªÖn VƒÉn Nam',
          phone: '0901234567',
          role: 'doctor' as const,
          emailVerified: true,
          isActive: true,
          gender: 'male',
          address: 'H√† N·ªôi'
        },
        doctor: {
          bio: 'B√°c sƒ© chuy√™n khoa N·ªôi ti·∫øt - Sinh s·∫£n nam v·ªõi 15 nƒÉm kinh nghi·ªám',
          experience: 15,
          rating: 4.8,
          image: 'https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?w=300&h=300&fit=crop&crop=face',
          specialization: 'N·ªôi ti·∫øt - Sinh s·∫£n nam',
          education: 'Ti·∫øn sƒ© Y khoa - ƒê·∫°i h·ªçc Y H√† N·ªôi',
          certificate: 'Ch·ª©ng ch·ªâ chuy√™n khoa c·∫•p I N·ªôi ti·∫øt'
        }
      },
      {
        user: {
          email: 'dr.le@genderhealthcare.com',
          password: 'doctor123',
          fullName: 'BS. L√™ Th·ªã Hoa',
          phone: '0901234568',
          role: 'doctor' as const,
          emailVerified: true,
          isActive: true,
          gender: 'female',
          address: 'TP. H·ªì Ch√≠ Minh'
        },
        doctor: {
          bio: 'Chuy√™n gia v·ªÅ s·ª©c kh·ªèe sinh s·∫£n n·ªØ v√† ƒëi·ªÅu tr·ªã v√¥ sinh',
          experience: 12,
          rating: 4.9,
          image: 'https://images.unsplash.com/photo-1559839734-2b71ea197ec2?w=300&h=300&fit=crop&crop=face',
          specialization: 'Ph·ª• khoa - Sinh s·∫£n',
          education: 'Th·∫°c sƒ© Y khoa - ƒê·∫°i h·ªçc Y Ph·∫°m Ng·ªçc Th·∫°ch',
          certificate: 'Ch·ª©ng ch·ªâ chuy√™n khoa c·∫•p II Ph·ª• s·∫£n'
        }
      },
      {
        user: {
          email: 'dr.tran@genderhealthcare.com',
          password: 'doctor123',
          fullName: 'BS. Tr·∫ßn Minh ƒê·ª©c',
          phone: '0901234569',
          role: 'doctor' as const,
          emailVerified: true,
          isActive: true,
          gender: 'male',
          address: 'ƒê√† N·∫µng'
        },
        doctor: {
          bio: 'B√°c sƒ© chuy√™n v·ªÅ t√¢m l√Ω h·ªçc gi·ªõi t√≠nh v√† t∆∞ v·∫•n chuy·ªÉn ƒë·ªïi gi·ªõi t√≠nh',
          experience: 8,
          rating: 4.7,
          image: 'https://images.unsplash.com/photo-1582750433449-648ed127bb54?w=300&h=300&fit=crop&crop=face',
          specialization: 'T√¢m l√Ω h·ªçc gi·ªõi t√≠nh',
          education: 'Th·∫°c sƒ© T√¢m l√Ω h·ªçc - ƒê·∫°i h·ªçc Qu·ªëc gia TP.HCM',
          certificate: 'Ch·ª©ng ch·ªâ t∆∞ v·∫•n t√¢m l√Ω gi·ªõi t√≠nh qu·ªëc t·∫ø'
        }
      },
      {
        user: {
          email: 'dr.pham@genderhealthcare.com',
          password: 'doctor123',
          fullName: 'BS. Ph·∫°m Th·ªã Lan',
          phone: '0901234570',
          role: 'doctor' as const,
          emailVerified: true,
          isActive: true,
          gender: 'female',
          address: 'H·∫£i Ph√≤ng'
        },
        doctor: {
          bio: 'Chuy√™n gia ph·∫´u thu·∫≠t th·∫©m m·ªπ v√† t√°i t·∫°o h√¨nh d·∫°ng c∆° th·ªÉ',
          experience: 10,
          rating: 4.6,
          image: 'https://images.unsplash.com/photo-1594824694996-0ff5843e293c?w=300&h=300&fit=crop&crop=face',
          specialization: 'Ph·∫´u thu·∫≠t th·∫©m m·ªπ gi·ªõi t√≠nh',
          education: 'Ti·∫øn sƒ© Y khoa - ƒê·∫°i h·ªçc Y H·∫£i Ph√≤ng',
          certificate: 'Ch·ª©ng ch·ªâ ph·∫´u thu·∫≠t t·∫°o h√¨nh qu·ªëc t·∫ø'
        }
      },
      {
        user: {
          email: 'dr.hoang@genderhealthcare.com',
          password: 'doctor123',
          fullName: 'BS. Ho√†ng VƒÉn Tu·∫•n',
          phone: '0901234571',
          role: 'doctor' as const,
          emailVerified: true,
          isActive: true,
          gender: 'male',
          address: 'C·∫ßn Th∆°'
        },
        doctor: {
          bio: 'B√°c sƒ© ƒëi·ªÅu tr·ªã hormone v√† chƒÉm s√≥c s·ª©c kh·ªèe ng∆∞·ªùi chuy·ªÉn gi·ªõi',
          experience: 7,
          rating: 4.5,
          image: 'https://images.unsplash.com/photo-1607990281513-2c110a25bd8c?w=300&h=300&fit=crop&crop=face',
          specialization: 'ƒêi·ªÅu tr·ªã hormone',
          education: 'Th·∫°c sƒ© Y khoa - ƒê·∫°i h·ªçc Y C·∫ßn Th∆°',
          certificate: 'Ch·ª©ng ch·ªâ ƒëi·ªÅu tr·ªã hormone replacement therapy'
        }
      }
    ];

    // T·∫°o t·ª´ng b√°c sƒ©
    const createdDoctors = [];
    for (const data of doctorsData) {
      // Hash password
      const hashedPassword = await bcrypt.hash(data.user.password, 10);
      
      // T·∫°o User tr∆∞·ªõc
      const newUser = await User.create({
        ...data.user,
        password: hashedPassword
      });

      // T·∫°o Doctor v·ªõi userId
      const newDoctor = await Doctor.create({
        ...data.doctor,
        userId: newUser._id
      });

      createdDoctors.push(newDoctor);
      console.log(`‚úÖ ƒê√£ t·∫°o b√°c sƒ©: ${data.user.fullName} (${data.doctor.specialization})`);
    }

    // üóìÔ∏è T·∫†O DOCTOR SCHEDULES M·∫™U
    console.log('\nüóìÔ∏è ƒêang t·∫°o l·ªãch l√†m vi·ªác m·∫´u cho b√°c sƒ©...');
    
    const timeSlots = [
      "07:00-08:00", "08:00-09:00", "09:00-10:00", "10:00-11:00",
      "13:00-14:00", "14:00-15:00", "15:00-16:00", "16:00-17:00"
    ];

    // T·∫°o l·ªãch cho 7 ng√†y t·ªõi t·ª´ h√¥m nay
    const today = new Date();
    const schedulePromises = createdDoctors.map(async (doctor) => {
      const weekSchedule = [];
      
      for (let i = 0; i < 7; i++) {
        const workDate = new Date(today);
        workDate.setDate(today.getDate() + i);
        workDate.setHours(0, 0, 0, 0);
        
        // T·∫°o slots cho ng√†y n√†y
        const slots = timeSlots.map(slotTime => ({
          slotTime,
          status: 'Free'
        }));
        
        weekSchedule.push({
          dayOfWeek: workDate,
          slots
        });
      }
      
      // T·∫°o DoctorSchedule record
      const schedule = await DoctorSchedules.create({
        doctorId: doctor._id,
        weekSchedule
      });
      
      console.log(`   ‚úÖ T·∫°o l·ªãch l√†m vi·ªác cho ${doctor.userId ? 'doctor' : 'unknown'} (7 ng√†y, ${timeSlots.length} slots/ng√†y)`);
      return schedule;
    });

    await Promise.all(schedulePromises);

    console.log('üéâ Ho√†n th√†nh seed 5 b√°c sƒ© demo v√† l·ªãch l√†m vi·ªác!');
    console.log('\nüìã Th√¥ng tin ƒëƒÉng nh·∫≠p:');
    console.log('   Email: dr.nguyen@genderhealthcare.com | Password: doctor123');
    console.log('   Email: dr.le@genderhealthcare.com | Password: doctor123');
    console.log('   Email: dr.tran@genderhealthcare.com | Password: doctor123');
    console.log('   Email: dr.pham@genderhealthcare.com | Password: doctor123');
    console.log('   Email: dr.hoang@genderhealthcare.com | Password: doctor123');
    console.log('\nüóìÔ∏è M·ªói b√°c sƒ© c√≥ 7 ng√†y l·ªãch l√†m vi·ªác t·ª´ h√¥m nay v·ªõi 8 time slots m·ªói ng√†y');

  } catch (error) {
    console.error('‚ùå L·ªói khi seed doctors:', error);
  }
};

export default seedDoctors;

// Th√™m k·∫øt n·ªëi MongoDB v√† ch·∫°y seed
import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const runSeed = async () => {
  try {
    // K·∫øt n·ªëi MongoDB
    const mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:27017/gender-healthcare';
    await mongoose.connect(mongoURI);
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    // Ch·∫°y seed
    await seedDoctors();

  } catch (error) {
    console.error('‚ùå L·ªói khi seed doctors:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
    process.exit(0);
  }
};

// Ch·ªâ ch·∫°y khi ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  console.log('üöÄ Doctor Seed Tool');
  console.log('==================');
  runSeed();
} 

