import mongoose from 'mongoose';
import DoctorQA from '../models/DoctorQA';
import Doctor from '../models/Doctor';
import User from '../models/User';

export const seedDoctorQA = async () => {
  try {
    // Ki·ªÉm tra xem ƒë√£ c√≥ data DoctorQA ch∆∞a
    const existingQAs = await DoctorQA.countDocuments();
    if (existingQAs > 0) {
      console.log('‚úÖ DoctorQA seed data ƒë√£ t·ªìn t·∫°i, b·ªè qua vi·ªác t·∫°o m·ªõi');
      return;
    }

    console.log('üå± ƒêang t·∫°o DoctorQA seed data...');

    // L·∫•y user customer v√† doctor t·ª´ DB
    const customerUser = await User.findOne({ role: 'customer' });
    const doctorUser = await User.findOne({ role: 'doctor' });
    
    if (!customerUser) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y user customer ƒë·ªÉ t·∫°o DoctorQA seed');
      return;
    }

    if (!doctorUser) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y user doctor ƒë·ªÉ t·∫°o DoctorQA seed');
      return;
    }

    // L·∫•y doctor record
    const doctor = await Doctor.findOne({ userId: doctorUser._id });
    if (!doctor) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y doctor record ƒë·ªÉ t·∫°o DoctorQA seed');
      return;
    }

    // T·∫°o 3 DoctorQA m·∫´u v·ªõi c√°c status kh√°c nhau
    const doctorQASeeds = [
      {
        doctorId: doctor._id,
        userId: customerUser._id,
        fullName: customerUser.fullName,
        phone: customerUser.phone || '0987654321',
        question: 'T√¥i b·ªã ƒëau b·ª•ng th∆∞·ªùng xuy√™n sau khi ƒÉn, c√≥ ph·∫£i b·ªánh g√¨ kh√¥ng? Tri·ªáu ch·ª©ng k√©o d√†i kho·∫£ng 2 tu·∫ßn r·ªìi.',
        notes: 'ƒêau nhi·ªÅu nh·∫•t v√†o bu·ªïi t·ªëi, c√≥ k√®m theo ƒë·∫ßy h∆°i',
        status: 'pending_payment',
        consultationFee: 200000,
        createdAt: new Date('2024-01-15T10:30:00Z'),
        updatedAt: new Date('2024-01-15T10:30:00Z')
      },
      {
        doctorId: doctor._id,
        userId: customerUser._id,
        fullName: customerUser.fullName,
        phone: customerUser.phone || '0987654321',
        question: 'Con t√¥i 5 tu·ªïi b·ªã s·ªët 38.5 ƒë·ªô t·ª´ h√¥m qua, c√≥ c·∫ßn ƒë∆∞a ƒëi vi·ªán ngay kh√¥ng?',
        notes: 'B√© ƒÉn u·ªëng b√¨nh th∆∞·ªùng, tinh th·∫ßn kh√° t·ªânh t√°o',
        status: 'paid',
        consultationFee: 200000,
        createdAt: new Date('2024-01-16T14:20:00Z'),
        updatedAt: new Date('2024-01-16T15:45:00Z')
      },
      {
        doctorId: doctor._id,
        userId: customerUser._id,
        fullName: customerUser.fullName,
        phone: customerUser.phone || '0987654321',
        question: 'T√¥i b·ªã m·∫•t ng·ªß li√™n t·ª•c 1 tu·∫ßn nay, c√≥ thu·ªëc g√¨ kh√¥ng g√¢y nghi·ªán ƒë·ªÉ ƒëi·ªÅu tr·ªã kh√¥ng?',
        notes: 'Stress c√¥ng vi·ªác nhi·ªÅu, th∆∞·ªùng xuy√™n lo l·∫Øng',
        status: 'completed',
        consultationFee: 200000,
        appointmentDate: new Date('2024-01-17T00:00:00Z'),
        appointmentSlot: '14:00-15:00',
        slotId: new mongoose.Types.ObjectId(),
        doctorNotes: 'ƒê√£ t∆∞ v·∫•n v·ªÅ vi·ªác qu·∫£n l√Ω stress v√† k√™ ƒë∆°n thu·ªëc an th·∫ßn nh·∫π. Khuy√™n theo d√µi th√™m 1 tu·∫ßn.',
        createdAt: new Date('2024-01-17T09:15:00Z'),
        updatedAt: new Date('2024-01-17T15:30:00Z')
      }
    ];

    // Insert t·∫•t c·∫£ DoctorQA
    const createdQAs = await DoctorQA.insertMany(doctorQASeeds);
    
    console.log(`‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng ${createdQAs.length} DoctorQA m·∫´u:`);
    createdQAs.forEach((qa, index) => {
      console.log(`   ${index + 1}. Status: ${qa.status} - Question: ${qa.question.substring(0, 50)}...`);
    });

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o DoctorQA seed data:', error);
  }
};

// Export default ƒë·ªÉ c√≥ th·ªÉ import d·ªÖ d√†ng
export default seedDoctorQA; 