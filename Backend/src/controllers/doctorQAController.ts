import { Request, Response } from 'express';
import { AuthRequest } from '../types/auth';
import mongoose from 'mongoose';
import * as doctorQAService from '../services/doctorQAService';

// Validate ObjectId helper
const isValidObjectId = (id: string): boolean => {
  return mongoose.Types.ObjectId.isValid(id);
};

// GET /api/doctor-qa/least-booked-doctor - T√¨m b√°c sƒ© c√≥ √≠t slot booked nh·∫•t (STAFF ONLY)
export const getLeastBookedDoctor = async (req: Request, res: Response): Promise<void> => {
  try {
    const leastBookedDoctorId = await doctorQAService.findLeastBookedDoctor();
    
    res.status(200).json({
      message: 'T√¨m b√°c sƒ© c√≥ √≠t l·ªãch ƒë·∫∑t nh·∫•t th√†nh c√¥ng',
      data: {
        doctorId: leastBookedDoctorId
      }
    });

  } catch (error: any) {
    console.error('Error getting least booked doctor:', error);
    res.status(500).json({ 
      message: error.message || 'L·ªói server khi t√¨m b√°c sƒ©' 
    });
  }
};

// POST /api/doctor-qa - T·∫°o y√™u c·∫ßu t∆∞ v·∫•n m·ªõi (USER)
export const createDoctorQA = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { doctorId, fullName, phone, question, notes } = req.body;
    const userId = req.user?._id;  // T·ª´ middleware auth

    if (!fullName || !phone || !question) {
      res.status(400).json({ 
        message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß: fullName, phone, question' 
      });
      return;
    }

    // Validate doctorId n·∫øu c√≥
    if (doctorId && !isValidObjectId(doctorId)) {
      res.status(400).json({ 
        message: 'Doctor ID kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    const newQA = await doctorQAService.createDoctorQA({
      doctorId,
      userId,
      fullName,
      phone,
      question,
      notes
    });

    res.status(201).json({
      message: 'T·∫°o y√™u c·∫ßu t∆∞ v·∫•n th√†nh c√¥ng! Vui l√≤ng thanh to√°n ƒë·ªÉ ho√†n t·∫•t.',
      data: newQA
    });

  } catch (error: any) {
    console.error('Error creating DoctorQA:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi t·∫°o y√™u c·∫ßu t∆∞ v·∫•n' 
    });
  }
};

// GET /api/doctor-qa - L·∫•y t·∫•t c·∫£ y√™u c·∫ßu t∆∞ v·∫•n (STAFF ONLY)
export const getAllDoctorQAs = async (req: Request, res: Response): Promise<void> => {
  try {
    const { status } = req.query;
    const filter = status ? { status } : {};
    
    const qas = await doctorQAService.getAllDoctorQAs(filter);
    
    res.status(200).json({
      message: `L·∫•y danh s√°ch y√™u c·∫ßu t∆∞ v·∫•n th√†nh c√¥ng (${qas.length} y√™u c·∫ßu)`,
      data: qas,
      summary: {
        total: qas.length,
        filter: filter
      }
    });

  } catch (error: any) {
    console.error('Error getting all DoctorQAs:', error);
    res.status(500).json({ 
      message: error.message || 'L·ªói server khi l·∫•y danh s√°ch y√™u c·∫ßu t∆∞ v·∫•n' 
    });
  }
};

// GET /api/doctor-qa/:id - L·∫•y y√™u c·∫ßu t∆∞ v·∫•n theo ID (USER/STAFF/DOCTOR)
export const getDoctorQAById = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    
    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }
    
    const qa = await doctorQAService.getDoctorQAById(id);
    
    res.status(200).json({
      message: 'L·∫•y th√¥ng tin y√™u c·∫ßu t∆∞ v·∫•n th√†nh c√¥ng',
      data: qa
    });

  } catch (error: any) {
    console.error('Error getting DoctorQA by ID:', error);
    res.status(404).json({ 
      message: error.message || 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu t∆∞ v·∫•n' 
    });
  }
};

// GET /api/doctor-qa/my-requests - L·∫•y y√™u c·∫ßu t∆∞ v·∫•n c·ªßa user ƒëang ƒëƒÉng nh·∫≠p (USER)
export const getMyDoctorQAs = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    console.log('üîç [DEBUG] User object:', req.user);
    
    const userId = req.user?._id;
    console.log('üîç [DEBUG] Extracted userId:', userId);
    
    if (!userId) {
      res.status(401).json({ 
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin user t·ª´ token' 
      });
      return;
    }
    
    const qas = await doctorQAService.getDoctorQAByUserId(userId);
    
    res.status(200).json({
      message: `L·∫•y danh s√°ch y√™u c·∫ßu t∆∞ v·∫•n c·ªßa b·∫°n th√†nh c√¥ng (${qas.length} y√™u c·∫ßu)`,
      data: qas
    });

  } catch (error: any) {
    console.error('Error getting my DoctorQAs:', error);
    res.status(500).json({ 
      message: error.message || 'L·ªói server khi l·∫•y y√™u c·∫ßu t∆∞ v·∫•n' 
    });
  }
};

// GET /api/doctor-qa/doctor/:doctorId - L·∫•y y√™u c·∫ßu t∆∞ v·∫•n c·ªßa b√°c sƒ© c·ª• th·ªÉ (DOCTOR/STAFF)
export const getDoctorQAByDoctorId = async (req: Request, res: Response): Promise<void> => {
  try {
    const { doctorId } = req.params;
    
    if (!isValidObjectId(doctorId)) {
      res.status(400).json({ 
        message: 'Doctor ID kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }
    
    const qas = await doctorQAService.getDoctorQAByDoctorId(doctorId);
    
    res.status(200).json({
      message: `L·∫•y danh s√°ch y√™u c·∫ßu t∆∞ v·∫•n c·ªßa b√°c sƒ© th√†nh c√¥ng (${qas.length} y√™u c·∫ßu)`,
      data: qas
    });

  } catch (error: any) {
    console.error('Error getting DoctorQAs by doctorId:', error);
    res.status(500).json({ 
      message: error.message || 'L·ªói server khi l·∫•y y√™u c·∫ßu t∆∞ v·∫•n c·ªßa b√°c sƒ©' 
    });
  }
};

// PUT /api/doctor-qa/:id/payment - C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n (PAYMENT GATEWAY CALLBACK)
export const updatePaymentStatus = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { paymentSuccess } = req.body;

    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    if (typeof paymentSuccess !== 'boolean') {
      res.status(400).json({ 
        message: 'Vui l√≤ng cung c·∫•p paymentSuccess (true/false)' 
      });
      return;
    }

    const updatedQA = await doctorQAService.updatePaymentStatus(id, paymentSuccess);
    
    const message = paymentSuccess 
      ? 'Thanh to√°n th√†nh c√¥ng! Y√™u c·∫ßu t∆∞ v·∫•n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn b√°c sƒ©.'
      : 'Thanh to√°n th·∫•t b·∫°i. Y√™u c·∫ßu t∆∞ v·∫•n ƒë√£ b·ªã h·ªßy.';

    res.status(200).json({
      message,
      data: updatedQA
    });

  } catch (error: any) {
    console.error('Error updating payment status:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n' 
    });
  }
};

// PUT /api/doctor-qa/:id/confirm - B√°c sƒ© confirm/reject y√™u c·∫ßu t∆∞ v·∫•n (DOCTOR)
export const doctorConfirmQA = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { action } = req.body;

    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    if (!action || !['confirm', 'reject'].includes(action)) {
      res.status(400).json({ 
        message: 'Vui l√≤ng cung c·∫•p action: confirm ho·∫∑c reject' 
      });
      return;
    }

    const updatedQA = await doctorQAService.doctorConfirmQA(id, action);
    
    const message = action === 'confirm' 
      ? 'B√°c sƒ© ƒë√£ x√°c nh·∫≠n nh·∫≠n t∆∞ v·∫•n. Staff s·∫Ω s·∫Øp x·∫øp l·ªãch c·ª• th·ªÉ.'
      : 'B√°c sƒ© ƒë√£ t·ª´ ch·ªëi y√™u c·∫ßu t∆∞ v·∫•n.';

    res.status(200).json({
      message,
      data: updatedQA
    });

  } catch (error: any) {
    console.error('Error doctor confirming QA:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi x√°c nh·∫≠n y√™u c·∫ßu t∆∞ v·∫•n' 
    });
  }
};

// PUT /api/doctor-qa/:id/schedule - Staff x·∫øp l·ªãch t·ª± ƒë·ªông (STAFF ONLY)
export const scheduleQA = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;

    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    // Kh√¥ng c·∫ßn body n·ªØa - t·ª± ƒë·ªông t√¨m slot g·∫ßn nh·∫•t
    const result = await doctorQAService.scheduleQA(id);

    res.status(200).json({
      message: 'X·∫øp l·ªãch t∆∞ v·∫•n t·ª± ƒë·ªông th√†nh c√¥ng!',
      data: result.qa,
      autoScheduleInfo: result.autoBookedInfo
    });

  } catch (error: any) {
    console.error('Error auto-scheduling QA:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi x·∫øp l·ªãch t·ª± ƒë·ªông' 
    });
  }
};

// PUT /api/doctor-qa/:id/status - C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ªïng qu√°t (STAFF/DOCTOR)
export const updateQAStatus = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { status, doctorNotes } = req.body;

    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    if (!status) {
      res.status(400).json({ 
        message: 'Vui l√≤ng cung c·∫•p status m·ªõi' 
      });
      return;
    }

    const validStatuses = ["pending_payment", "paid", "doctor_confirmed", "scheduled", "consulting", "completed", "cancelled"];
    if (!validStatuses.includes(status)) {
      res.status(400).json({ 
        message: `Status kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: ${validStatuses.join(', ')}` 
      });
      return;
    }

    const updatedQA = await doctorQAService.updateQAStatus(id, status, doctorNotes);

    res.status(200).json({
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu t∆∞ v·∫•n th√†nh c√¥ng',
      data: updatedQA
    });

  } catch (error: any) {
    console.error('Error updating QA status:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i' 
    });
  }
};

// DELETE /api/doctor-qa/:id - X√≥a y√™u c·∫ßu t∆∞ v·∫•n (STAFF ONLY)
export const deleteDoctorQA = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    
    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }
    
    const deletedQA = await doctorQAService.deleteDoctorQA(id);

    res.status(200).json({
      message: 'X√≥a y√™u c·∫ßu t∆∞ v·∫•n th√†nh c√¥ng',
      data: deletedQA
    });

  } catch (error: any) {
    console.error('Error deleting DoctorQA:', error);
    res.status(404).json({ 
      message: error.message || 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu t∆∞ v·∫•n ƒë·ªÉ x√≥a' 
    });
  }
}; 