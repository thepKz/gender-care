import { Request, Response } from 'express';
import { AuthRequest } from '../types/auth';
import mongoose from 'mongoose';
import * as doctorQAService from '../services/doctorQAService';
import * as meetingService from '../services/meetingService';

// Validate ObjectId helper
const isValidObjectId = (id: string): boolean => {
  return mongoose.Types.ObjectId.isValid(id);
};

// GET /api/doctor-qa/best-assignment - T√¨m assignment t·ªët nh·∫•t cho slot g·∫ßn nh·∫•t (STAFF ONLY)
export const getBestAssignment = async (req: Request, res: Response): Promise<void> => {
  try {
    const bestAssignment = await doctorQAService.findBestDoctorForNextSlot();
    
    res.status(200).json({
      message: 'T√¨m assignment t·ªët nh·∫•t th√†nh c√¥ng',
      data: bestAssignment
    });

  } catch (error: any) {
    console.error('Error getting best assignment:', error);
    res.status(500).json({ 
      message: error.message || 'L·ªói server khi t√¨m assignment' 
    });
  }
};

// Legacy endpoint ƒë·ªÉ backward compatibility
export const getLeastBookedDoctor = async (req: Request, res: Response): Promise<void> => {
  try {
    const leastBookedDoctorId = await doctorQAService.findLeastBookedDoctor();
    
    res.status(200).json({
      message: 'T√¨m b√°c sƒ© c√≥ √≠t l·ªãch ƒë·∫∑t nh·∫•t th√†nh c√¥ng',
      data: {
        doctorId: leastBookedDoctorId
      }
    });

  } catch (error: any) {
    console.error('Error getting least booked doctor:', error);
    res.status(500).json({ 
      message: error.message || 'L·ªói server khi t√¨m b√°c sƒ©' 
    });
  }
};

// POST /api/doctor-qa - T·∫°o y√™u c·∫ßu t∆∞ v·∫•n m·ªõi (USER) v·ªõi AUTO-ASSIGN
export const createDoctorQA = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { doctorId, fullName, phone, question, notes } = req.body;
    const userId = req.user?._id;  // T·ª´ middleware auth

    // üîß Enhanced validation
    if (!userId) {
      res.status(401).json({ 
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin user t·ª´ token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.' 
      });
      return;
    }

    if (!fullName?.trim() || !phone?.trim() || !question?.trim()) {
      res.status(400).json({ 
        message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß: fullName, phone, question' 
      });
      return;
    }

    // Validate doctorId n·∫øu c√≥ (manual assignment)
    if (doctorId && !isValidObjectId(doctorId)) {
      res.status(400).json({ 
        message: 'Doctor ID kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    console.log('üöÄ [CREATE-QA-CONTROLLER] Starting QA creation...', {
      userId,
      fullName: fullName?.trim(),
      hasManualDoctorId: !!doctorId,
      autoAssign: !doctorId
    });

    // üéØ Call service ƒë·ªÉ t·∫°o QA v·ªõi auto-assign logic
    const newQA = await doctorQAService.createDoctorQA({
      doctorId,  // c√≥ th·ªÉ null ƒë·ªÉ trigger auto-assign
      userId,
      fullName: fullName.trim(),
      phone: phone.trim(),
      question: question.trim(),
      notes: notes?.trim()
    });

    // üéâ Success response v·ªõi th√¥ng tin assignment
    if (!newQA) {
      throw new Error('Kh√¥ng th·ªÉ t·∫°o y√™u c·∫ßu t∆∞ v·∫•n. Vui l√≤ng th·ª≠ l·∫°i.');
    }

    const response: any = {
      message: 'T·∫°o y√™u c·∫ßu t∆∞ v·∫•n th√†nh c√¥ng! Vui l√≤ng thanh to√°n ƒë·ªÉ ho√†n t·∫•t.',
      data: newQA
    };

    // ‚ú® Th√™m th√¥ng tin v·ªÅ vi·ªác auto-assign n·∫øu c√≥
    if (newQA.doctorId && newQA.appointmentDate && newQA.appointmentSlot) {
      response.autoAssigned = true;
      response.assignmentInfo = {
        doctorName: (newQA.doctorId as any)?.userId?.fullName || 'N/A',
        appointmentDate: newQA.appointmentDate,
        appointmentSlot: newQA.appointmentSlot,
        message: 'ƒê√£ t·ª± ƒë·ªông ph√¢n c√¥ng b√°c sƒ© v√† l·ªãch h·∫πn g·∫ßn nh·∫•t cho b·∫°n!'
      };
    }

    res.status(201).json(response);

  } catch (error: any) {
    console.error('‚ùå [ERROR] Creating DoctorQA failed:', error);
    
    // üîß Enhanced error handling
    if (error.message?.includes('Kh√¥ng c√≥ slot n√†o kh·∫£ d·ª•ng')) {
      res.status(400).json({ 
        message: 'Hi·ªán t·∫°i kh√¥ng c√≥ l·ªãch tr·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.',
        error: 'NO_AVAILABLE_SLOTS',
        details: error.message
      });
    } else if (error.message?.includes('Kh√¥ng c√≥ b√°c sƒ© n√†o')) {
      res.status(400).json({ 
        message: 'Hi·ªán t·∫°i ch∆∞a c√≥ b√°c sƒ© n√†o s·∫µn s√†ng. Vui l√≤ng li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.',
        error: 'NO_AVAILABLE_DOCTORS',
        details: error.message
      });
    } else {
      res.status(400).json({ 
        message: error.message || 'L·ªói server khi t·∫°o y√™u c·∫ßu t∆∞ v·∫•n',
        error: 'GENERAL_ERROR'
      });
    }
  }
};

// GET /api/doctor-qa - L·∫•y t·∫•t c·∫£ y√™u c·∫ßu t∆∞ v·∫•n (STAFF ONLY)
export const getAllDoctorQAs = async (req: Request, res: Response): Promise<void> => {
  try {
    const { status } = req.query;
    const filter = status ? { status } : {};
    
    const qas = await doctorQAService.getAllDoctorQAs(filter);
    
    res.status(200).json({
      message: `L·∫•y danh s√°ch y√™u c·∫ßu t∆∞ v·∫•n th√†nh c√¥ng (${qas.length} y√™u c·∫ßu)`,
      data: qas,
      summary: {
        total: qas.length,
        filter: filter
      }
    });

  } catch (error: any) {
    console.error('Error getting all DoctorQAs:', error);
    res.status(500).json({ 
      message: error.message || 'L·ªói server khi l·∫•y danh s√°ch y√™u c·∫ßu t∆∞ v·∫•n' 
    });
  }
};

// GET /api/doctor-qa/:id - L·∫•y y√™u c·∫ßu t∆∞ v·∫•n theo ID (USER/STAFF/DOCTOR)
export const getDoctorQAById = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    
    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }
    
    const qa = await doctorQAService.getDoctorQAById(id);
    
    res.status(200).json({
      message: 'L·∫•y th√¥ng tin y√™u c·∫ßu t∆∞ v·∫•n th√†nh c√¥ng',
      data: qa
    });

  } catch (error: any) {
    console.error('Error getting DoctorQA by ID:', error);
    res.status(404).json({ 
      message: error.message || 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu t∆∞ v·∫•n' 
    });
  }
};

// GET /api/doctor-qa/my-requests - L·∫•y y√™u c·∫ßu t∆∞ v·∫•n c·ªßa user ƒëang ƒëƒÉng nh·∫≠p (USER)
export const getMyDoctorQAs = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    console.log('üîç [DEBUG] User object:', req.user);
    
    const userId = req.user?._id;
    console.log('üîç [DEBUG] Extracted userId:', userId);
    
    if (!userId) {
      res.status(401).json({ 
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin user t·ª´ token' 
      });
      return;
    }
    
    const qas = await doctorQAService.getDoctorQAByUserId(userId);
    
    res.status(200).json({
      message: `L·∫•y danh s√°ch y√™u c·∫ßu t∆∞ v·∫•n c·ªßa b·∫°n th√†nh c√¥ng (${qas.length} y√™u c·∫ßu)`,
      data: qas
    });

  } catch (error: any) {
    console.error('Error getting my DoctorQAs:', error);
    res.status(500).json({ 
      message: error.message || 'L·ªói server khi l·∫•y y√™u c·∫ßu t∆∞ v·∫•n' 
    });
  }
};

// GET /api/doctor-qa/doctor/:doctorId - L·∫•y y√™u c·∫ßu t∆∞ v·∫•n c·ªßa b√°c sƒ© c·ª• th·ªÉ (DOCTOR/STAFF)
export const getDoctorQAByDoctorId = async (req: Request, res: Response): Promise<void> => {
  try {
    const { doctorId } = req.params;
    
    if (!isValidObjectId(doctorId)) {
      res.status(400).json({ 
        message: 'Doctor ID kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }
    
    const qas = await doctorQAService.getDoctorQAByDoctorId(doctorId);
    
    res.status(200).json({
      message: `L·∫•y danh s√°ch y√™u c·∫ßu t∆∞ v·∫•n c·ªßa b√°c sƒ© th√†nh c√¥ng (${qas.length} y√™u c·∫ßu)`,
      data: qas
    });

  } catch (error: any) {
    console.error('Error getting DoctorQAs by doctorId:', error);
    res.status(500).json({ 
      message: error.message || 'L·ªói server khi l·∫•y y√™u c·∫ßu t∆∞ v·∫•n c·ªßa b√°c sƒ©' 
    });
  }
};

// GET /api/doctor-qa/my - L·∫•y y√™u c·∫ßu t∆∞ v·∫•n c·ªßa b√°c sƒ© hi·ªán t·∫°i (DOCTOR ONLY)
export const getMyDoctorQAAsDoctor = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const userId = req.user?._id;
    
    if (!userId) {
      res.status(401).json({ 
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin user t·ª´ token' 
      });
      return;
    }

    // Ki·ªÉm tra user c√≥ ph·∫£i doctor kh√¥ng
    if (req.user?.role !== 'doctor') {
      res.status(403).json({ 
        message: 'Ch·ªâ b√°c sƒ© m·ªõi c√≥ th·ªÉ truy c·∫≠p endpoint n√†y' 
      });
      return;
    }

    // Import Doctor model dynamically ƒë·ªÉ tr√°nh circular dependency
    const { Doctor } = await import('../models');
    
    // T√¨m doctor record d·ª±a tr√™n userId t·ª´ token
    const doctor = await Doctor.findOne({ userId: userId });
    
    if (!doctor) {
      // N·∫øu ch∆∞a c√≥ doctor record, tr·∫£ v·ªÅ empty list v·ªõi format consistent
      res.status(200).json({
        message: 'Ch∆∞a c√≥ th√¥ng tin b√°c sƒ© trong h·ªá th·ªëng. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ thi·∫øt l·∫≠p h·ªì s∆°.',
        data: []
      });
      return;
    }
    
    // L·∫•y y√™u c·∫ßu t∆∞ v·∫•n c·ªßa b√°c sƒ© n√†y
    const qas = await doctorQAService.getDoctorQAByDoctorId(doctor._id.toString());
    
    // Tr·∫£ v·ªÅ format consistent v·ªõi getAllDoctorQAs - ch·ªâ data array
    res.status(200).json({
      message: `L·∫•y danh s√°ch y√™u c·∫ßu t∆∞ v·∫•n c·ªßa b·∫°n th√†nh c√¥ng (${qas.length} y√™u c·∫ßu)`,
      data: qas
    });

  } catch (error: any) {
    console.error('Error getting my DoctorQAs as doctor:', error);
    res.status(500).json({ 
      message: error.message || 'L·ªói server khi l·∫•y y√™u c·∫ßu t∆∞ v·∫•n c·ªßa b√°c sƒ©',
      data: []
    });
  }
};

// PUT /api/doctor-qa/:id/payment - C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n (PAYMENT GATEWAY CALLBACK)
export const updatePaymentStatus = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { paymentSuccess } = req.body;

    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    if (typeof paymentSuccess !== 'boolean') {
      res.status(400).json({ 
        message: 'Vui l√≤ng cung c·∫•p paymentSuccess (true/false)' 
      });
      return;
    }

    const updatedQA = await doctorQAService.updatePaymentStatus(id, paymentSuccess);
    
    if (!updatedQA) {
      res.status(500).json({ 
        message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n' 
      });
      return;
    }

    let message;
    let extraInfo = {};
    
    if (paymentSuccess) {
      // Check if smart auto-scheduling worked
      if (updatedQA.status === 'scheduled') {
        message = 'üéâ Thanh to√°n th√†nh c√¥ng! ƒê√£ t·ª± ƒë·ªông t√¨m slot g·∫ßn nh·∫•t v√† ph√¢n c√¥ng b√°c sƒ© ph√π h·ª£p. Link t∆∞ v·∫•n s·∫Ω ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc 30 ph√∫t.';
        extraInfo = {
          smartScheduled: true,
          doctorAssigned: !!updatedQA.doctorId,
          doctorName: (updatedQA.doctorId as any)?.userId?.fullName || 'B√°c sƒ©',
          appointmentDate: updatedQA.appointmentDate,
          appointmentSlot: updatedQA.appointmentSlot,
          nextStep: 'Ch·ªù link Google Meet ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc gi·ªù kh√°m',
          note: 'H·ªá th·ªëng ƒë√£ t·ª± ƒë·ªông ch·ªçn slot s·ªõm nh·∫•t v√† b√°c sƒ© √≠t b·∫≠n nh·∫•t'
        };
      } else if (updatedQA.status === 'pending_payment') {
        message = '‚ö†Ô∏è Thanh to√°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω. Vui l√≤ng ch·ªù x√°c nh·∫≠n.';
        extraInfo = {
          smartScheduled: false,
          doctorAssigned: !!updatedQA.doctorId,
          doctorName: (updatedQA.doctorId as any)?.userId?.fullName || 'B√°c sƒ©',
          needManualSchedule: false,
          nextStep: 'H·ªá th·ªëng ƒëang x·ª≠ l√Ω thanh to√°n'
        };
      } else {
        message = '‚úÖ Thanh to√°n th√†nh c√¥ng! Y√™u c·∫ßu t∆∞ v·∫•n ƒë√£ ƒë∆∞·ª£c ti·∫øp nh·∫≠n.';
      }
    } else {
      message = '‚ùå Thanh to√°n th·∫•t b·∫°i. Y√™u c·∫ßu t∆∞ v·∫•n ƒë√£ b·ªã h·ªßy.';
    }

    res.status(200).json({
      message,
      data: updatedQA,
      ...extraInfo
    });

  } catch (error: any) {
    console.error('Error updating payment status:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n' 
    });
  }
};

// PUT /api/doctor-qa/:id/confirm-consultation - X√°c nh·∫≠n cu·ªôc t∆∞ v·∫•n ƒë√£ thanh to√°n (chuy·ªÉn t·ª´ paid sang confirmed) (DOCTOR/STAFF)
export const confirmConsultation = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;

    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    const qa = await doctorQAService.getDoctorQAById(id);

    // Ch·ªâ cho ph√©p x√°c nh·∫≠n n·∫øu tr·∫°ng th√°i hi·ªán t·∫°i l√† scheduled
    if (qa.status !== 'scheduled') {
      res.status(400).json({ 
        message: 'Ch·ªâ c√≥ th·ªÉ x√°c nh·∫≠n cu·ªôc t∆∞ v·∫•n ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch' 
      });
      return;
    }

    const updatedQA = await doctorQAService.updateQAStatus(id, 'confirmed');

    res.status(200).json({
      message: 'X√°c nh·∫≠n cu·ªôc t∆∞ v·∫•n th√†nh c√¥ng',
      data: updatedQA
    });

  } catch (error: any) {
    console.error('Error confirming consultation:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi x√°c nh·∫≠n cu·ªôc t∆∞ v·∫•n' 
    });
  }
};

// PUT /api/doctor-qa/:id/confirm - B√°c sƒ© confirm/reject y√™u c·∫ßu t∆∞ v·∫•n (DOCTOR)
export const doctorConfirmQA = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { action } = req.body;

    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    if (!action || !['confirm', 'reject'].includes(action)) {
      res.status(400).json({ 
        message: 'Vui l√≤ng cung c·∫•p action: confirm ho·∫∑c reject' 
      });
      return;
    }

    const updatedQA = await doctorQAService.doctorConfirmQA(id, action);
    
    const message = action === 'confirm' 
      ? 'B√°c sƒ© ƒë√£ x√°c nh·∫≠n nh·∫≠n t∆∞ v·∫•n. Staff s·∫Ω s·∫Øp x·∫øp l·ªãch c·ª• th·ªÉ.'
      : 'B√°c sƒ© ƒë√£ t·ª´ ch·ªëi y√™u c·∫ßu t∆∞ v·∫•n.';

    res.status(200).json({
      message,
      data: updatedQA
    });

  } catch (error: any) {
    console.error('Error doctor confirming QA:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi x√°c nh·∫≠n y√™u c·∫ßu t∆∞ v·∫•n' 
    });
  }
};

// PUT /api/doctor-qa/:id/schedule - Staff x·∫øp l·ªãch t·ª± ƒë·ªông (STAFF ONLY)
// ‚ö†Ô∏è DEPRECATED ENDPOINT - Kh√¥ng c√≤n c·∫ßn thi·∫øt v√¨ auto assignment ƒë∆∞·ª£c th·ª±c hi·ªán khi t·∫°o QA
export const scheduleQA = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    
    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    // Tr·∫£ v·ªÅ error v√¨ function ƒë√£ deprecated
    res.status(400).json({
      message: '‚ö†Ô∏è Endpoint n√†y ƒë√£ deprecated. L·ªãch h·∫πn ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫°o khi t·∫°o QA m·ªõi.',
      deprecated: true,
      suggestion: 'S·ª≠ d·ª•ng POST /api/doctor-qa ƒë·ªÉ t·∫°o QA v·ªõi auto assignment'
    });

  } catch (error: any) {
    console.error('Error in deprecated scheduleQA:', error);
    res.status(400).json({ 
      message: error.message || 'Endpoint ƒë√£ deprecated' 
    });
  }
};

// PUT /api/doctor-qa/:id/status - C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ªïng qu√°t (STAFF/DOCTOR)
export const updateQAStatus = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { status, doctorNotes } = req.body;

    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    if (!status) {
      res.status(400).json({ 
        message: 'Vui l√≤ng cung c·∫•p status m·ªõi' 
      });
      return;
    }

    const validStatuses = ["pending_payment", "scheduled", "consulting", "completed", "cancelled"];
    if (!validStatuses.includes(status)) {
      res.status(400).json({ 
        message: `Status kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: ${validStatuses.join(', ')}` 
      });
      return;
    }

    const updatedQA = await doctorQAService.updateQAStatus(id, status, doctorNotes);

    res.status(200).json({
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu t∆∞ v·∫•n th√†nh c√¥ng',
      data: updatedQA
    });

  } catch (error: any) {
    console.error('Error updating QA status:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i' 
    });
  }
};

// DELETE /api/doctor-qa/:id - X√≥a y√™u c·∫ßu t∆∞ v·∫•n (STAFF ONLY)
export const deleteDoctorQA = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    
    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }
    
    const deletedQA = await doctorQAService.deleteDoctorQA(id);

    res.status(200).json({
      message: 'X√≥a y√™u c·∫ßu t∆∞ v·∫•n th√†nh c√¥ng',
      data: deletedQA
    });

  } catch (error: any) {
    console.error('Error deleting DoctorQA:', error);
    res.status(404).json({ 
      message: error.message || 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu t∆∞ v·∫•n ƒë·ªÉ x√≥a' 
    });
  }
};

// =============== MEETING INTEGRATION APIS ===============

// GET /api/doctor-qa/:id/meeting - L·∫•y meeting info c·ªßa QA (USER/DOCTOR/STAFF)
export const getQAMeeting = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;

    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    const meeting = await meetingService.getMeetingByQaId(id);

    res.status(200).json({
      message: 'L·∫•y th√¥ng tin meeting th√†nh c√¥ng',
      data: {
        meetLink: meeting.meetingLink,
        meetId: meeting.meetingId,
        scheduledStartTime: meeting.scheduledStartTime,
        scheduledEndTime: meeting.scheduledEndTime,
        actualStartTime: meeting.actualStartTime,
        actualEndTime: meeting.actualEndTime,
        status: meeting.status,
        participants: meeting.participants,
        notes: meeting.notes
      }
    });

  } catch (error: any) {
    console.error('Error getting QA meeting:', error);
    res.status(404).json({ 
      message: error.message || 'Kh√¥ng t√¨m th·∫•y meeting cho y√™u c·∫ßu t∆∞ v·∫•n n√†y' 
    });
  }
};

// POST /api/doctor-qa/:id/join-meeting - Join meeting (USER/DOCTOR)
export const joinQAMeeting = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { participantType } = req.body;
    const currentUserId = req.user?._id;

    if (!isValidObjectId(id) || !currentUserId) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá ho·∫∑c user ch∆∞a ƒëƒÉng nh·∫≠p' 
      });
      return;
    }

    if (!participantType || !['doctor', 'user'].includes(participantType)) {
      res.status(400).json({ 
        message: 'Vui l√≤ng cung c·∫•p participantType: doctor ho·∫∑c user' 
      });
      return;
    }

    const updatedMeeting = await meetingService.participantJoinMeeting(
      id, 
      currentUserId.toString(), 
      participantType
    );

    res.status(200).json({
      message: `B·∫°n ƒë√£ tham gia meeting th√†nh c√¥ng v·ªõi vai tr√≤ ${participantType}`,
      data: {
        meetingStatus: updatedMeeting.status,
        actualStartTime: updatedMeeting.actualStartTime,
        participants: updatedMeeting.participants
      }
    });

  } catch (error: any) {
    console.error('Error joining QA meeting:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi tham gia meeting' 
    });
  }
};

// PUT /api/doctor-qa/:id/complete-meeting - Ho√†n th√†nh meeting v√† QA (DOCTOR only)
export const completeQAMeeting = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { doctorNotes } = req.body;

    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    const completedMeeting = await meetingService.completeMeeting(id, doctorNotes);

    res.status(200).json({
      message: 'Ho√†n th√†nh t∆∞ v·∫•n v√† meeting th√†nh c√¥ng!',
      data: {
        meetingStatus: completedMeeting.status,
        actualEndTime: completedMeeting.actualEndTime,
        notes: completedMeeting.notes,
        duration: completedMeeting.actualStartTime && completedMeeting.actualEndTime
          ? Math.round((completedMeeting.actualEndTime.getTime() - completedMeeting.actualStartTime.getTime()) / 60000)
          : null
      }
    });

  } catch (error: any) {
    console.error('Error completing QA meeting:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi ho√†n th√†nh meeting' 
    });
  }
};

// PUT /api/doctor-qa/:id/manual-schedule - Manually trigger auto-scheduling cho QA ƒë√£ paid (STAFF ONLY)
export const manualTriggerScheduling = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;

    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    // G·ªçi l·∫°i logic updatePaymentStatus v·ªõi paymentSuccess=true
    const updatedQA = await doctorQAService.updatePaymentStatus(id, true);
    
    if (!updatedQA) {
      res.status(500).json({ 
        message: 'L·ªói khi trigger auto-scheduling' 
      });
      return;
    }

    let message;
    let extraInfo = {};
    
    // Check if smart auto-scheduling worked
    if (updatedQA.status === 'scheduled') {
      message = 'üéâ Auto-scheduling th√†nh c√¥ng! ƒê√£ t·ª± ƒë·ªông t√¨m slot g·∫ßn nh·∫•t v√† ph√¢n c√¥ng b√°c sƒ©.';
      extraInfo = {
        smartScheduled: true,
        doctorAssigned: !!updatedQA.doctorId,
        doctorName: (updatedQA.doctorId as any)?.userId?.fullName || 'B√°c sƒ©',
        appointmentDate: updatedQA.appointmentDate,
        appointmentSlot: updatedQA.appointmentSlot,
        nextStep: 'ƒê√£ book slot th√†nh c√¥ng',
        note: 'H·ªá th·ªëng ƒë√£ t·ª± ƒë·ªông ch·ªçn slot s·ªõm nh·∫•t v√† b√°c sƒ© √≠t b·∫≠n nh·∫•t'
      };
            } else if (updatedQA.status === 'pending_payment') {
      message = '‚ö†Ô∏è Ch∆∞a ho√†n t·∫•t auto-scheduling. QA v·∫´n ƒëang ch·ªù x·ª≠ l√Ω.';
      extraInfo = {
        smartScheduled: false,
        doctorAssigned: !!updatedQA.doctorId,
        doctorName: (updatedQA.doctorId as any)?.userId?.fullName || 'B√°c sƒ©',
        needManualSchedule: true,
        nextStep: 'G·ªçi l·∫°i API ƒë·ªÉ trigger scheduling'
      };
    } else {
      message = '‚úÖ ƒê√£ process QA th√†nh c√¥ng.';
    }

    res.status(200).json({
      message,
      data: updatedQA,
      ...extraInfo
    });

  } catch (error: any) {
    console.error('Error manually triggering scheduling:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi trigger auto-scheduling' 
    });
  }
};

// PUT /api/doctor-qa/:id/cancel-by-doctor - H·ªßy cu·ªôc t∆∞ v·∫•n b·ªüi b√°c sƒ© v·ªõi l√Ω do (DOCTOR ONLY)
export const cancelConsultationByDoctor = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { id } = req.params;
    const { reason } = req.body;

    if (!isValidObjectId(id)) {
      res.status(400).json({ 
        message: 'ID y√™u c·∫ßu t∆∞ v·∫•n kh√¥ng h·ª£p l·ªá' 
      });
      return;
    }

    // Ki·ªÉm tra user c√≥ ph·∫£i doctor kh√¥ng
    if (req.user?.role !== 'doctor') {
      res.status(403).json({ 
        message: 'Ch·ªâ b√°c sƒ© m·ªõi c√≥ th·ªÉ h·ªßy cu·ªôc t∆∞ v·∫•n' 
      });
      return;
    }

    // Ki·ªÉm tra l√Ω do h·ªßy
    if (!reason || reason.trim().length === 0) {
      res.status(400).json({ 
        message: 'Vui l√≤ng nh·∫≠p l√Ω do h·ªßy cu·ªôc t∆∞ v·∫•n' 
      });
      return;
    }

    const qa = await doctorQAService.getDoctorQAById(id);

    // Ki·ªÉm tra cu·ªôc t∆∞ v·∫•n ƒë√£ b·ªã h·ªßy ch∆∞a
    if (qa.status === 'cancelled') {
      res.status(400).json({ 
        message: 'Cu·ªôc t∆∞ v·∫•n ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥' 
      });
      return;
    }

    // Ki·ªÉm tra cu·ªôc t∆∞ v·∫•n ƒë√£ ho√†n th√†nh ch∆∞a
    if (qa.status === 'completed') {
      res.status(400).json({ 
        message: 'Kh√¥ng th·ªÉ h·ªßy cu·ªôc t∆∞ v·∫•n ƒë√£ ho√†n th√†nh' 
      });
      return;
    }

    // G·ªçi service ƒë·ªÉ h·ªßy consultation v·ªõi l√Ω do
    const updatedQA = await doctorQAService.cancelConsultationByDoctor(id, reason.trim());

    res.status(200).json({
      message: 'H·ªßy cu·ªôc t∆∞ v·∫•n th√†nh c√¥ng',
      data: updatedQA
    });

  } catch (error: any) {
    console.error('Error cancelling consultation by doctor:', error);
    res.status(400).json({ 
      message: error.message || 'L·ªói server khi h·ªßy cu·ªôc t∆∞ v·∫•n' 
    });
  }
};

// POST /api/doctor-qa/batch-process-paid - Batch process t·∫•t c·∫£ QA c√≥ status "paid" (STAFF ONLY)
export const batchProcessPaidQAs = async (req: Request, res: Response): Promise<void> => {
  try {
    // T√¨m t·∫•t c·∫£ QA c√≥ status "paid" nh∆∞ng ch∆∞a scheduled
    const { DoctorQA } = await import('../models');
    
    const paidQAs = await DoctorQA.find({ 
      status: 'paid'
    }).select('_id fullName phone question');

    if (paidQAs.length === 0) {
      res.status(200).json({
        message: 'Kh√¥ng c√≥ QA n√†o c·∫ßn process',
        processed: 0,
        total: 0
      });
      return;
    }

    const results = [];
    let successCount = 0;
    let errorCount = 0;

    for (const qa of paidQAs) {
      try {
        console.log(`üîÑ Processing QA ${qa._id} - ${qa.fullName}`);
        
        const updatedQA = await doctorQAService.updatePaymentStatus(qa._id.toString(), true);
        
        results.push({
          qaId: qa._id,
          fullName: qa.fullName,
          status: updatedQA?.status || 'unknown',
          success: true,
          scheduled: updatedQA?.status === 'scheduled',
          appointmentDate: updatedQA?.appointmentDate,
          appointmentSlot: updatedQA?.appointmentSlot
        });
        
        successCount++;
        
      } catch (error: any) {
        console.error(`‚ùå Error processing QA ${qa._id}:`, error.message);
        
        results.push({
          qaId: qa._id,
          fullName: qa.fullName,
          success: false,
          error: error.message
        });
        
        errorCount++;
      }
    }

    const scheduledCount = results.filter(r => r.scheduled).length;
    
    res.status(200).json({
      message: `Batch process ho√†n t·∫•t: ${successCount}/${paidQAs.length} th√†nh c√¥ng, ${scheduledCount} ƒë∆∞·ª£c schedule t·ª± ƒë·ªông`,
      summary: {
        total: paidQAs.length,
        successful: successCount,
        errors: errorCount,
        autoScheduled: scheduledCount,
        needManualSchedule: successCount - scheduledCount
      },
      results
    });

  } catch (error: any) {
    console.error('Error batch processing paid QAs:', error);
    res.status(500).json({ 
      message: error.message || 'L·ªói server khi batch process QAs' 
    });
  }
}; 