import { Request, Response } from 'express';
import mongoose from 'mongoose';
import { Appointments, DoctorSchedules, Services, ServicePackages, UserProfiles, PackagePurchases, Doctor } from '../models';
import { NotFoundError } from '../errors/notFoundError';
import { ValidationError } from '../errors/validationError';
import { UnauthorizedError } from '../errors/unauthorizedError';

interface AuthRequest extends Request {
    user?: {
        _id: string;
        email: string;
        role: string;
    };
}

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ c√°c cu·ªôc h·∫πn
 * Ph√¢n trang v√† l·ªçc theo c√°c ti√™u ch√≠ kh√°c nhau
 */
export const getAllAppointments = async (req: AuthRequest, res: Response) => {
    try {
        const {
            page = 1,
            limit = 10,
            status,
            appointmentType,
            startDate,
            endDate,
            profileId,
            createdByUserId
        } = req.query;

        const query: any = {};

        // √Åp d·ª•ng c√°c b·ªô l·ªçc n·∫øu c√≥
        if (status) query.status = status;
        if (appointmentType) query.appointmentType = appointmentType;
        if (profileId) query.profileId = profileId;
        if (createdByUserId) query.createdByUserId = createdByUserId;

        // L·ªçc theo kho·∫£ng th·ªùi gian
        if (startDate && endDate) {
            query.appointmentDate = {
                $gte: new Date(startDate as string),
                $lte: new Date(endDate as string)
            };
        } else if (startDate) {
            query.appointmentDate = { $gte: new Date(startDate as string) };
        } else if (endDate) {
            query.appointmentDate = { $lte: new Date(endDate as string) };
        }

        // T√≠nh to√°n skip value cho ph√¢n trang
        const pageNumber = parseInt(page as string, 10);
        const limitNumber = parseInt(limit as string, 10);
        const skip = (pageNumber - 1) * limitNumber;

        // ƒê·∫øm t·ªïng s·ªë b·∫£n ghi th·ªèa m√£n ƒëi·ªÅu ki·ªán
        const total = await Appointments.countDocuments(query);

        // L·∫•y d·ªØ li·ªáu v·ªõi populate c√°c tr∆∞·ªùng li√™n quan
        const appointments = await Appointments.find(query)
            .populate('profileId', 'fullName gender phone year')
            .populate('serviceId', 'serviceName price serviceType')
            .populate('packageId', 'name price')
            .populate({
                path: 'doctorId',
                match: { isDeleted: { $ne: true } }, // Lo·∫°i tr·ª´ doctor ƒë√£ b·ªã x√≥a
                populate: {
                    path: 'userId',
                    select: 'fullName email avatar'
                }
            })
            .sort({ appointmentDate: -1, appointmentTime: -1 })
            .skip(skip)
            .limit(limitNumber);

        // Debug logging ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu doctor
        console.log('üîç [Debug] Sample appointment doctor data:', appointments.slice(0, 2).map(apt => ({
            _id: apt._id,
            doctorId: apt.doctorId,
            doctorIdType: typeof apt.doctorId,
            hasDoctor: apt.doctorId ? true : false,
            doctorUserId: (apt.doctorId as any)?.userId,
            doctorFullName: (apt.doctorId as any)?.userId?.fullName
        })));

        return res.status(200).json({
            success: true,
            data: {
                appointments,
                pagination: {
                    total,
                    page: pageNumber,
                    limit: limitNumber,
                    pages: Math.ceil(total / limitNumber)
                }
            }
        });
    } catch (error) {
        console.error('Error in getAllAppointments:', error);
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch cu·ªôc h·∫πn'
        });
    }
};

/**
 * T·∫°o cu·ªôc h·∫πn m·ªõi
 */
export const createAppointment = async (req: AuthRequest, res: Response) => {
    try {
        const {
            profileId,
            packageId,
            serviceId,
            slotId,
            appointmentDate,
            appointmentTime,
            appointmentType,
            typeLocation,
            address,
            description,
            notes
        } = req.body;

        // Ki·ªÉm tra profileId c√≥ t·ªìn t·∫°i kh√¥ng
        const profile = await UserProfiles.findById(profileId);
        if (!profile) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y h·ªì s∆° ng∆∞·ªùi d√πng');
        }

        // Ki·ªÉm tra √≠t nh·∫•t m·ªôt trong hai: packageId ho·∫∑c serviceId ph·∫£i ƒë∆∞·ª£c cung c·∫•p
        if (!packageId && !serviceId) {
            throw new ValidationError({ general: 'Ph·∫£i cung c·∫•p m·ªôt trong hai: packageId ho·∫∑c serviceId' });
        }

        // T√≠nh to√°n totalAmount d·ª±a tr√™n service/package
        let totalAmount = 0;

        // N·∫øu c√≥ packageId, ki·ªÉm tra n√≥ c√≥ t·ªìn t·∫°i kh√¥ng v√† l·∫•y gi√°
        if (packageId) {
            const packageData = await ServicePackages.findById(packageId);
            if (!packageData) {
                throw new NotFoundError('Kh√¥ng t√¨m th·∫•y g√≥i d·ªãch v·ª•');
            }
            totalAmount = packageData.price;
        }

        // N·∫øu c√≥ serviceId, ki·ªÉm tra n√≥ c√≥ t·ªìn t·∫°i kh√¥ng v√† l·∫•y gi√°
        if (serviceId) {
            const serviceData = await Services.findById(serviceId);
            if (!serviceData) {
                throw new NotFoundError('Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•');
            }
            totalAmount = serviceData.price;
        }

        console.log('üí∞ [Debug] Payment calculation:', {
            packageId,
            serviceId,
            typeLocation,
            totalAmount
        });

        // Ki·ªÉm tra slot c√≥ tr·ªëng kh√¥ng v√† l·∫•y th√¥ng tin b√°c sƒ© (n·∫øu slotId ƒë∆∞·ª£c cung c·∫•p)
        let assignedDoctorId = null;
        if (slotId) {
            console.log('üîç [Debug] Checking slot availability:', { slotId, appointmentDate, appointmentTime });

            // Logic ƒë·ªÉ ki·ªÉm tra slot c√≥ tr·ªëng kh√¥ng
            // T√¨m schedule c√≥ ch·ª©a slot v·ªõi _id matching slotId
            const schedule = await DoctorSchedules.findOne({
                'weekSchedule.slots._id': slotId
            });

            console.log('üîç [Debug] Found schedule for slot:', schedule ? 'YES' : 'NO');

            if (!schedule) {
                console.log('‚ùå [Debug] No schedule found containing slotId:', slotId);
                throw new NotFoundError('Kh√¥ng t√¨m th·∫•y slot th·ªùi gian');
            }

            // L·∫•y doctorId t·ª´ schedule ƒë·ªÉ assign v√†o appointment
            assignedDoctorId = schedule.doctorId;
            console.log('üîç [Debug] Assigned doctor ID:', assignedDoctorId);

            // T√¨m slot c·ª• th·ªÉ v√† ki·ªÉm tra tr·∫°ng th√°i
            let slotFound = false;
            let slotIsBooked = true;

            for (const week of schedule.weekSchedule) {
                for (const slot of week.slots) {
                    if (slot._id?.toString() === slotId) {
                        slotFound = true;
                        slotIsBooked = slot.status !== "Free";
                        break;
                    }
                }
                if (slotFound) break;
            }

            if (!slotFound) {
                throw new NotFoundError('Kh√¥ng t√¨m th·∫•y slot th·ªùi gian');
            }

            if (slotIsBooked) {
                throw new ValidationError({ slotId: 'Slot th·ªùi gian n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t' });
            }
        }

        // Ki·ªÉm tra n·∫øu typeLocation l√† "home" th√¨ ph·∫£i c√≥ address
        if (typeLocation === 'home' && !address) {
            throw new ValidationError({ address: 'ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc khi ch·ªçn lo·∫°i ƒë·ªãa ƒëi·ªÉm l√† "home"' });
        }

        // üéØ PACKAGE USAGE INTEGRATION: Non-transaction approach for single-node MongoDB
        let newAppointment: any = null;
        let packagePurchase: any = null;
        let originalRemainingUsages = 0;
        let packageUpdatePerformed = false;

        try {
            // üîç STEP 1: If using packageId, validate and consume package usage first
            if (packageId) {
                console.log('üîç [Package Creation] Appointment uses package, validating purchased package...', {
                    packageId,
                    userId: req.user?._id,
                    profileId
                });

                // Find the corresponding package purchase record
                packagePurchase = await PackagePurchases.findOne({
                    userId: req.user?._id,
                    profileId,
                    packageId,
                    isActive: true,
                    remainingUsages: { $gt: 0 },
                    expiredAt: { $gt: new Date() }
                });

                if (!packagePurchase) {
                    console.log('‚ùå [Package Creation] No valid package purchase found', {
                        packageId,
                        userId: req.user?._id,
                        profileId
                    });
                    throw new ValidationError({ 
                        package: 'Kh√¥ng t√¨m th·∫•y g√≥i d·ªãch v·ª• h·ª£p l·ªá ho·∫∑c g√≥i ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng' 
                    });
                }

                console.log('‚úÖ [Package Creation] Found valid package purchase, consuming usage...', {
                    packagePurchaseId: packagePurchase._id?.toString() || 'unknown',
                    remainingUsages: packagePurchase.remainingUsages,
                    totalAllowedUses: packagePurchase.totalAllowedUses
                });

                // Store original value for logging and potential rollback
                originalRemainingUsages = packagePurchase.remainingUsages;

                // Validate remaining usages
                if (packagePurchase.remainingUsages <= 0) {
                    throw new ValidationError({ 
                        package: 'G√≥i d·ªãch v·ª• ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng' 
                    });
                }

                // Calculate new values
                const newRemainingUsages = packagePurchase.remainingUsages - 1;
                const now = new Date();
                const newIsActive = (packagePurchase.expiredAt > now && newRemainingUsages > 0);

                // Update package purchase with optimistic approach
                const updateResult = await PackagePurchases.findByIdAndUpdate(
                    packagePurchase._id,
                    {
                        $set: {
                            remainingUsages: newRemainingUsages,
                            isActive: newIsActive
                        }
                    },
                    { new: true }
                );

                if (!updateResult) {
                    throw new ValidationError({ 
                        package: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t g√≥i d·ªãch v·ª•, c√≥ th·ªÉ g√≥i ƒë√£ b·ªã x√≥a' 
                    });
                }

                packageUpdatePerformed = true;

                console.log('‚úÖ [Package Creation] Successfully consumed package usage', {
                    packagePurchaseId: packagePurchase._id?.toString() || 'unknown',
                    oldRemainingUsages: originalRemainingUsages,
                    newRemainingUsages: newRemainingUsages,
                    isStillActive: newIsActive
                });
            }

            // üîç STEP 2: Create appointment
            // For package bookings, set status to 'confirmed' directly since package is already consumed
            // For service bookings, set status to 'pending_payment' as before
            const appointmentStatus = packageId ? 'confirmed' : 'pending_payment';

            newAppointment = await Appointments.create({
                createdByUserId: req.user?._id, // L·∫•y t·ª´ middleware x√°c th·ª±c
                profileId,
                packageId: packageId || undefined,
                serviceId: serviceId || undefined,
                doctorId: assignedDoctorId || undefined, // G√°n b√°c sƒ© t·ª´ slot
                slotId: slotId || undefined,
                appointmentDate,
                appointmentTime,
                appointmentType,
                typeLocation,
                address,
                description,
                notes,
                status: appointmentStatus
            });

            // üîç STEP 3: Update slot status if needed
            if (slotId) {
                await DoctorSchedules.updateOne(
                    { 'weekSchedule.slots._id': new mongoose.Types.ObjectId(slotId) },
                    { $set: { 'weekSchedule.$.slots.$[slot].status': 'Booked' } },
                    { arrayFilters: [{ 'slot._id': new mongoose.Types.ObjectId(slotId) }] }
                );
            }

            console.log('‚úÖ [Success] Appointment creation and package usage completed successfully', {
                appointmentId: newAppointment._id?.toString() || 'unknown',
                status: appointmentStatus,
                hasPackage: !!packageId,
                packageConsumed: packageUpdatePerformed
            });

        } catch (error: any) {
            console.error('‚ùå [Error] Error in appointment creation + package usage:', error);
            
            // Manual rollback for package usage if appointment creation failed
            if (packageUpdatePerformed && packagePurchase && originalRemainingUsages > 0) {
                console.log('üîÑ [Rollback] Attempting to rollback package usage...');
                try {
                    const now = new Date();
                    const rollbackIsActive = (packagePurchase.expiredAt > now && originalRemainingUsages > 0);
                    
                    await PackagePurchases.findByIdAndUpdate(
                        packagePurchase._id,
                        {
                            $set: {
                                remainingUsages: originalRemainingUsages,
                                isActive: rollbackIsActive
                            }
                        }
                    );
                    console.log('‚úÖ [Rollback] Package usage rolled back successfully');
                } catch (rollbackError) {
                    console.error('‚ùå [Rollback] Failed to rollback package usage:', rollbackError);
                    // Log for manual intervention
                    console.error('üö® [Critical] Manual intervention required for package:', {
                        packagePurchaseId: packagePurchase._id?.toString(),
                        shouldBeRemainingUsages: originalRemainingUsages
                    });
                }
            }
            
            // Re-throw the original error
            if (error instanceof ValidationError || error instanceof NotFoundError) {
                throw error;
            }
            
            throw new ValidationError({ 
                general: error.message || 'Kh√¥ng th·ªÉ t·∫°o cu·ªôc h·∫πn v√† s·ª≠ d·ª•ng g√≥i d·ªãch v·ª•' 
            });
        }

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        return res.status(201).json({
            success: true,
            message: 'ƒê·∫∑t l·ªãch h·∫πn th√†nh c√¥ng! Vui l√≤ng ho√†n t·∫•t thanh to√°n.',
            data: newAppointment
        });
    } catch (error) {
        console.error('Error in createAppointment:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o cu·ªôc h·∫πn'
        });
    }
};

/**
 * L·∫•y chi ti·∫øt cu·ªôc h·∫πn theo ID
 */
export const getAppointmentById = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;

        // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(id)) {
            throw new ValidationError({ id: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá' });
        }

        // T√¨m cu·ªôc h·∫πn theo ID
        const appointment = await Appointments.findById(id)
            .populate('profileId', 'fullName gender phone year')
            .populate('serviceId', 'serviceName price serviceType')
            .populate('packageId', 'name price serviceIds')
            .populate('createdByUserId', 'fullName email')
            .populate({
                path: 'doctorId',
                match: { isDeleted: { $ne: true } }, // Lo·∫°i tr·ª´ doctor ƒë√£ b·ªã x√≥a
                populate: {
                    path: 'userId',
                    select: 'fullName email avatar'
                }
            });

        if (!appointment) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn');
        }

        return res.status(200).json({
            success: true,
            data: appointment
        });
    } catch (error) {
        console.error('Error in getAppointmentById:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y chi ti·∫øt cu·ªôc h·∫πn'
        });
    }
};

/**
 * C·∫≠p nh·∫≠t th√¥ng tin cu·ªôc h·∫πn
 */
export const updateAppointment = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const updateData = req.body;

        // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(id)) {
            throw new ValidationError({ id: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá' });
        }

        // T√¨m cu·ªôc h·∫πn hi·ªán t·∫°i
        const appointment = await Appointments.findById(id);
        if (!appointment) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn');
        }

        // Ch·ªâ cho ph√©p c·∫≠p nh·∫≠t n·∫øu tr·∫°ng th√°i l√† pending ho·∫∑c confirmed
        if (!['pending', 'confirmed'].includes(appointment.status)) {
            throw new ValidationError({ status: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t cu·ªôc h·∫πn ƒë√£ ho√†n th√†nh ho·∫∑c ƒë√£ h·ªßy' });
        }

        // N·∫øu thay ƒë·ªïi slot, ki·ªÉm tra slot m·ªõi c√≥ tr·ªëng kh√¥ng
        if (updateData.slotId && updateData.slotId !== appointment.slotId?.toString()) {
            // Gi·∫£i ph√≥ng slot c≈©
            if (appointment.slotId) {
                await DoctorSchedules.updateOne(
                    { 'weekSchedule.slots._id': appointment.slotId },
                    { $set: { 'weekSchedule.$.slots.$[slot].status': 'Free' } },
                    { arrayFilters: [{ 'slot._id': appointment.slotId }] }
                );
            }

            // Ki·ªÉm tra v√† ƒë·∫∑t slot m·ªõi
            const schedule = await DoctorSchedules.findOne({
                'weekSchedule.slots._id': new mongoose.Types.ObjectId(updateData.slotId)
            });

            if (!schedule) {
                throw new NotFoundError('Kh√¥ng t√¨m th·∫•y slot th·ªùi gian m·ªõi');
            }

            // T√¨m slot c·ª• th·ªÉ v√† ki·ªÉm tra tr·∫°ng th√°i
            let slotFound = false;
            let slotIsBooked = true;

            for (const week of schedule.weekSchedule) {
                for (const slot of week.slots) {
                    if (slot._id?.toString() === updateData.slotId) {
                        slotFound = true;
                        slotIsBooked = slot.status !== "Free";
                        break;
                    }
                }
                if (slotFound) break;
            }

            if (!slotFound) {
                throw new NotFoundError('Kh√¥ng t√¨m th·∫•y slot th·ªùi gian m·ªõi');
            }

            if (slotIsBooked) {
                throw new ValidationError({ slotId: 'Slot th·ªùi gian m·ªõi ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t' });
            }

            // C·∫≠p nh·∫≠t slot m·ªõi th√†nh Booked
            await DoctorSchedules.updateOne(
                { 'weekSchedule.slots._id': new mongoose.Types.ObjectId(updateData.slotId) },
                { $set: { 'weekSchedule.$.slots.$[slot].status': 'Booked' } },
                { arrayFilters: [{ 'slot._id': new mongoose.Types.ObjectId(updateData.slotId) }] }
            );
        }

        // Ki·ªÉm tra n·∫øu thay ƒë·ªïi typeLocation th√†nh "home" th√¨ ph·∫£i c√≥ address
        if (updateData.typeLocation === 'home' && !updateData.address && !appointment.address) {
            throw new ValidationError({ address: 'ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc khi ch·ªçn lo·∫°i ƒë·ªãa ƒëi·ªÉm l√† "home"' });
        }

        // C·∫≠p nh·∫≠t cu·ªôc h·∫πn
        const updatedAppointment = await Appointments.findByIdAndUpdate(
            id,
            { $set: updateData },
            { new: true }
        ).populate('profileId', 'fullName gender phone year')
            .populate('serviceId', 'serviceName price serviceType')
            .populate('packageId', 'name price serviceIds')
            .populate({
                path: 'doctorId',
                match: { isDeleted: { $ne: true } }, // Lo·∫°i tr·ª´ doctor ƒë√£ b·ªã x√≥a
                populate: {
                    path: 'userId',
                    select: 'fullName email avatar'
                }
            });

        return res.status(200).json({
            success: true,
            message: 'C·∫≠p nh·∫≠t cu·ªôc h·∫πn th√†nh c√¥ng',
            data: updatedAppointment
        });
    } catch (error) {
        console.error('Error in updateAppointment:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t cu·ªôc h·∫πn'
        });
    }
};

/**
 * X√≥a m·ªÅm cu·ªôc h·∫πn (c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh cancelled)
 * Admin v√† Staff c√≥ th·ªÉ h·ªßy b·∫•t k·ª≥ l·ªãch n√†o
 * Customer ch·ªâ c√≥ th·ªÉ h·ªßy l·ªãch do m√¨nh ƒë·∫∑t v√† sau khi ƒë√£ ƒë·ª£i √≠t nh·∫•t 10 ph√∫t k·ªÉ t·ª´ khi ƒë·∫∑t l·ªãch
 */
export const deleteAppointment = async (req: AuthRequest, res: Response) => {
    try {
        const { id } = req.params;

        // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(id)) {
            throw new ValidationError({ id: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá' });
        }

        // T√¨m cu·ªôc h·∫πn hi·ªán t·∫°i
        const appointment = await Appointments.findById(id);
        if (!appointment) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn');
        }

        // Ki·ªÉm tra quy·ªÅn h·ªßy l·ªãch
        const userRole = req.user?.role || '';
        const userId = req.user?._id || '';

        // N·∫øu l√† customer, ki·ªÉm tra th√™m ƒëi·ªÅu ki·ªán
        if (userRole === 'customer') {
            // 1. Ki·ªÉm tra xem l·ªãch h·∫πn c√≥ ph·∫£i c·ªßa customer n√†y kh√¥ng
            if (appointment.createdByUserId?.toString() !== userId.toString()) {
                console.log('‚ùå [Debug] User kh√¥ng c√≥ quy·ªÅn h·ªßy l·ªãch ng∆∞·ªùi kh√°c:', { appointmentUserId: appointment.createdByUserId, requestUserId: userId });
                throw new UnauthorizedError('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p');
            }

            // 2. Ch·ªâ cho ph√©p h·ªßy sau khi ƒë√£ ƒë·ª£i 10 ph√∫t k·ªÉ t·ª´ khi ƒë·∫∑t l·ªãch
            // Ki·ªÉm tra n·∫øu createdAt t·ªìn t·∫°i
            if (!appointment.createdAt) {
                console.log('‚ùå [Debug] Kh√¥ng t√¨m th·∫•y th·ªùi gian t·∫°o l·ªãch');
                throw new ValidationError({ time: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh th·ªùi gian ƒë·∫∑t l·ªãch' });
            }

            // ƒê·∫£m b·∫£o createdAt l√† ki·ªÉu Date
            const createdAt = appointment.createdAt instanceof Date
                ? appointment.createdAt
                : new Date(appointment.createdAt);

            const now = new Date();
            const diffMinutes = (now.getTime() - createdAt.getTime()) / (1000 * 60);

            console.log('üîç [Debug] Th·ªùi gian t·ª´ khi t·∫°o l·ªãch ƒë·∫øn gi·ªù:', {
                createdAt,
                now,
                diffMinutes,
                appointmentId: id
            });

            if (diffMinutes < 10) {
                console.log('‚ùå [Debug] Kh√¥ng th·ªÉ h·ªßy l·ªãch khi ch∆∞a ƒë·ªß 10 ph√∫t:', { diffMinutes, appointmentId: id });
                throw new ValidationError({ time: 'B·∫°n ph·∫£i ƒë·ª£i √≠t nh·∫•t 10 ph√∫t sau khi ƒë·∫∑t l·ªãch m·ªõi c√≥ th·ªÉ h·ªßy' });
            }
        }

        // Ch·ªâ cho ph√©p h·ªßy n·∫øu tr·∫°ng th√°i l√† pending, pending_payment, ho·∫∑c confirmed
        if (!['pending', 'pending_payment', 'confirmed'].includes(appointment.status)) {
            throw new ValidationError({ status: 'Kh√¥ng th·ªÉ h·ªßy cu·ªôc h·∫πn ƒë√£ ho√†n th√†nh ho·∫∑c ƒë√£ h·ªßy' });
        }

        // üéØ PACKAGE REFUND INTEGRATION: Non-transaction approach for single-node MongoDB
        let packagePurchase: any = null;
        let originalRemainingUsages = 0;
        let packageRefundPerformed = false;

        try {
            // üîç STEP 1: If appointment uses package, refund +1 usage back to package
            if (appointment.packageId) {
                console.log('üîç [Package Refund] Appointment uses package, processing refund...', {
                    appointmentId: id,
                    packageId: appointment.packageId,
                    userId: appointment.createdByUserId,
                    profileId: appointment.profileId
                });

                // Find the corresponding package purchase record
                packagePurchase = await PackagePurchases.findOne({
                    userId: appointment.createdByUserId,
                    profileId: appointment.profileId,
                    packageId: appointment.packageId,
                    // Note: We don't filter by isActive here because we want to refund even expired packages
                    expiredAt: { $gt: new Date() } // Only refund if package hasn't expired yet
                });

                if (!packagePurchase) {
                    console.log('‚ö†Ô∏è [Package Refund] No package purchase found or package expired', {
                        appointmentId: id,
                        packageId: appointment.packageId,
                        userId: appointment.createdByUserId,
                        profileId: appointment.profileId
                    });
                    // Continue with cancellation even if package not found (maybe manual appointment)
                } else {
                    console.log('‚úÖ [Package Refund] Found package purchase, refunding usage...', {
                        packagePurchaseId: packagePurchase._id?.toString() || 'unknown',
                        currentRemainingUsages: packagePurchase.remainingUsages,
                        totalAllowedUses: packagePurchase.totalAllowedUses
                    });

                    // Store original value for logging and potential rollback
                    originalRemainingUsages = packagePurchase.remainingUsages;

                    // Validate we don't refund more than total allowed uses
                    if (packagePurchase.remainingUsages >= packagePurchase.totalAllowedUses) {
                        console.log('‚ö†Ô∏è [Package Refund] Package already at maximum usage, skipping refund', {
                            packagePurchaseId: packagePurchase._id?.toString(),
                            remainingUsages: packagePurchase.remainingUsages,
                            totalAllowedUses: packagePurchase.totalAllowedUses
                        });
                        // Continue with cancellation but don't refund
                    } else {
                        // Calculate new values - add back 1 usage
                        const newRemainingUsages = packagePurchase.remainingUsages + 1;
                        const now = new Date();
                        const newIsActive = (packagePurchase.expiredAt > now && newRemainingUsages > 0);

                        // Update package purchase with optimistic approach
                        const updateResult = await PackagePurchases.findByIdAndUpdate(
                            packagePurchase._id,
                            {
                                $set: {
                                    remainingUsages: newRemainingUsages,
                                    isActive: newIsActive
                                }
                            },
                            { new: true }
                        );

                        if (!updateResult) {
                            console.log('‚ùå [Package Refund] Failed to update package purchase, continuing with cancellation');
                            // Continue with cancellation even if package update failed
                        } else {
                            packageRefundPerformed = true;

                            console.log('‚úÖ [Package Refund] Successfully refunded package usage', {
                                packagePurchaseId: packagePurchase._id?.toString() || 'unknown',
                                oldRemainingUsages: originalRemainingUsages,
                                newRemainingUsages: newRemainingUsages,
                                isNowActive: newIsActive
                            });
                        }
                    }
                }
            }

            // üîç STEP 2: Free up the slot if appointment had one
            if (appointment.slotId) {
                await DoctorSchedules.updateOne(
                    { 'weekSchedule.slots._id': appointment.slotId },
                    { $set: { 'weekSchedule.$.slots.$[slot].status': 'Free' } },
                    { arrayFilters: [{ 'slot._id': appointment.slotId }] }
                );
                console.log('‚úÖ [Slot Liberation] Successfully freed up appointment slot', {
                    slotId: appointment.slotId?.toString()
                });
            }

            // üîç STEP 3: Update appointment status to cancelled
            const updatedAppointment = await Appointments.findByIdAndUpdate(
                id,
                { $set: { status: 'cancelled' } },
                { new: true }
            );

            console.log('‚úÖ [Success] Appointment cancellation completed successfully', {
                appointmentId: id,
                hasPackage: !!appointment.packageId,
                packageRefunded: packageRefundPerformed,
                slotFreed: !!appointment.slotId
            });

            return res.status(200).json({
                success: true,
                message: packageRefundPerformed 
                    ? 'H·ªßy cu·ªôc h·∫πn th√†nh c√¥ng v√† ƒë√£ ho√†n tr·∫£ l∆∞·ª£t s·ª≠ d·ª•ng g√≥i d·ªãch v·ª•'
                    : 'H·ªßy cu·ªôc h·∫πn th√†nh c√¥ng',
                data: updatedAppointment
            });

        } catch (error: any) {
            console.error('‚ùå [Error] Error in appointment cancellation + package refund:', error);
            
            // Manual rollback for package refund if appointment cancellation failed
            if (packageRefundPerformed && packagePurchase && originalRemainingUsages >= 0) {
                console.log('üîÑ [Rollback] Attempting to rollback package refund...');
                try {
                    const now = new Date();
                    const rollbackIsActive = (packagePurchase.expiredAt > now && originalRemainingUsages > 0);
                    
                    await PackagePurchases.findByIdAndUpdate(
                        packagePurchase._id,
                        {
                            $set: {
                                remainingUsages: originalRemainingUsages,
                                isActive: rollbackIsActive
                            }
                        }
                    );
                    console.log('‚úÖ [Rollback] Package refund rolled back successfully');
                } catch (rollbackError) {
                    console.error('‚ùå [Rollback] Failed to rollback package refund:', rollbackError);
                    // Log for manual intervention
                    console.error('üö® [Critical] Manual intervention required for package refund rollback:', {
                        packagePurchaseId: packagePurchase._id?.toString(),
                        shouldBeRemainingUsages: originalRemainingUsages
                    });
                }
            }
            
            // Re-throw the original error
            throw error;
        }
    } catch (error) {
        console.error('Error in deleteAppointment:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi h·ªßy cu·ªôc h·∫πn'
        });
    }
};

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc h·∫πn
 */
export const updateAppointmentStatus = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const { status } = req.body;

        // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(id)) {
            throw new ValidationError({ id: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá' });
        }

        // Ki·ªÉm tra status c√≥ h·ª£p l·ªá kh√¥ng
        if (!['pending', 'pending_payment', 'paid', 'confirmed', 'completed', 'cancelled'].includes(status)) {
            throw new ValidationError({ status: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá' });
        }

        // T√¨m cu·ªôc h·∫πn hi·ªán t·∫°i
        const appointment = await Appointments.findById(id);
        if (!appointment) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn');
        }

        // Ki·ªÉm tra logic chuy·ªÉn tr·∫°ng th√°i
        if (appointment.status === 'cancelled' && status !== 'cancelled') {
            throw new ValidationError({ status: 'Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i c·ªßa cu·ªôc h·∫πn ƒë√£ h·ªßy' });
        }

        if (appointment.status === 'completed' && status !== 'completed') {
            throw new ValidationError({ status: 'Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i c·ªßa cu·ªôc h·∫πn ƒë√£ ho√†n th√†nh' });
        }

        // N·∫øu chuy·ªÉn sang cancelled, gi·∫£i ph√≥ng slot
        if (status === 'cancelled' && appointment.status !== 'cancelled' && appointment.slotId) {
            await DoctorSchedules.updateOne(
                { 'weekSchedule.slots._id': appointment.slotId },
                { $set: { 'weekSchedule.$.slots.$[slot].status': 'Free' } },
                { arrayFilters: [{ 'slot._id': appointment.slotId }] }
            );
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i
        const updatedAppointment = await Appointments.findByIdAndUpdate(
            id,
            { $set: { status } },
            { new: true }
        ).populate('profileId', 'fullName gender phone year')
            .populate('serviceId', 'serviceName price serviceType')
            .populate('packageId', 'name price serviceIds');

        return res.status(200).json({
            success: true,
            message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc h·∫πn th√†nh c√¥ng',
            data: updatedAppointment
        });
    } catch (error) {
        console.error('Error in updateAppointmentStatus:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc h·∫πn'
        });
    }
};

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n - chuy·ªÉn t·ª´ pending_payment sang confirmed
 */
export const updatePaymentStatus = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const { status } = req.body;

        console.log('updatePaymentStatus called with:', { id, status });

        // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(id)) {
            throw new ValidationError({ id: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá' });
        }

        // Ki·ªÉm tra status c√≥ h·ª£p l·ªá kh√¥ng (ch·ªâ cho ph√©p scheduled)
        if (status !== 'scheduled') {
            throw new ValidationError({ status: 'Ch·ªâ cho ph√©p x√°c nh·∫≠n thanh to√°n th√†nh scheduled' });
        }

        // T√¨m cu·ªôc h·∫πn hi·ªán t·∫°i
        const appointment = await Appointments.findById(id);
        if (!appointment) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn');
        }

        console.log('Current appointment status:', appointment.status);

        // N·∫øu ƒë√£ scheduled r·ªìi th√¨ tr·∫£ v·ªÅ th√†nh c√¥ng lu√¥n
        if (appointment.status === 'scheduled') {
            console.log('Appointment already scheduled, returning success');
            return res.status(200).json({
                success: true,
                message: 'Cu·ªôc h·∫πn ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n tr∆∞·ªõc ƒë√≥',
                data: appointment
            });
        }

        // Ch·ªâ cho ph√©p c·∫≠p nh·∫≠t n·∫øu tr·∫°ng th√°i hi·ªán t·∫°i l√† pending_payment
        if (appointment.status !== 'pending_payment') {
            throw new ValidationError({ status: `Ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t thanh to√°n cho cu·ªôc h·∫πn ƒëang ch·ªù thanh to√°n. Tr·∫°ng th√°i hi·ªán t·∫°i: ${appointment.status}` });
        }

        // üéØ PACKAGE USAGE INTEGRATION: Non-transaction approach for single-node MongoDB
        let packagePurchase: any = null;
        let originalRemainingUsages = 0;
        let packageUpdatePerformed = false;
        
        try {
            // üîç STEP 1: Check and consume package usage if appointment uses package
            if (appointment.packageId) {
                console.log('üîç [Package Usage] Appointment uses package, checking purchased package...', {
                    appointmentId: id,
                    packageId: appointment.packageId,
                    userId: appointment.createdByUserId,
                    profileId: appointment.profileId
                });

                // Find the corresponding package purchase record
                packagePurchase = await PackagePurchases.findOne({
                    userId: appointment.createdByUserId,
                    profileId: appointment.profileId,
                    packageId: appointment.packageId,
                    isActive: true,
                    remainingUsages: { $gt: 0 },
                    expiredAt: { $gt: new Date() }
                });

                if (!packagePurchase) {
                    console.log('‚ùå [Package Usage] No valid package purchase found', {
                        appointmentId: id,
                        packageId: appointment.packageId,
                        userId: appointment.createdByUserId,
                        profileId: appointment.profileId
                    });
                    throw new ValidationError({ 
                        package: 'Kh√¥ng t√¨m th·∫•y g√≥i d·ªãch v·ª• h·ª£p l·ªá ho·∫∑c g√≥i ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng' 
                    });
                }

                console.log('‚úÖ [Package Usage] Found valid package purchase, consuming usage...', {
                    packagePurchaseId: packagePurchase._id?.toString() || 'unknown',
                    remainingUsages: packagePurchase.remainingUsages,
                    totalAllowedUses: packagePurchase.totalAllowedUses
                });

                // Store original value for logging and potential rollback
                originalRemainingUsages = packagePurchase.remainingUsages;

                // Validate remaining usages
                if (packagePurchase.remainingUsages <= 0) {
                    throw new ValidationError({ 
                        package: 'G√≥i d·ªãch v·ª• ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng' 
                    });
                }

                // Calculate new values
                const newRemainingUsages = packagePurchase.remainingUsages - 1;
                const now = new Date();
                const newIsActive = (packagePurchase.expiredAt > now && newRemainingUsages > 0);

                // Update package purchase with optimistic approach
                const updateResult = await PackagePurchases.findByIdAndUpdate(
                    packagePurchase._id,
                    {
                        $set: {
                            remainingUsages: newRemainingUsages,
                            isActive: newIsActive
                        }
                    },
                    { new: true }
                );

                if (!updateResult) {
                    throw new ValidationError({ 
                        package: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t g√≥i d·ªãch v·ª•, c√≥ th·ªÉ g√≥i ƒë√£ b·ªã x√≥a' 
                    });
                }

                packageUpdatePerformed = true;

                console.log('‚úÖ [Package Usage] Successfully consumed package usage', {
                    packagePurchaseId: packagePurchase._id?.toString() || 'unknown',
                    oldRemainingUsages: originalRemainingUsages,
                    newRemainingUsages: newRemainingUsages,
                    isStillActive: newIsActive
                });
            }

            // üîç STEP 2: Update appointment status to confirmed
            await Appointments.findByIdAndUpdate(
                id,
                { $set: { status: 'confirmed' } }
            );

            console.log('‚úÖ [Success] Package usage and appointment status updated successfully', {
                appointmentId: id,
                hasPackage: !!appointment.packageId,
                packageConsumed: packageUpdatePerformed
            });

        } catch (error: any) {
            console.error('‚ùå [Error] Error in package usage + appointment update:', error);
            
            // Manual rollback for package usage if appointment update failed
            if (packageUpdatePerformed && packagePurchase && originalRemainingUsages > 0) {
                console.log('üîÑ [Rollback] Attempting to rollback package usage...');
                try {
                    const now = new Date();
                    const rollbackIsActive = (packagePurchase.expiredAt > now && originalRemainingUsages > 0);
                    
                    await PackagePurchases.findByIdAndUpdate(
                        packagePurchase._id,
                        {
                            $set: {
                                remainingUsages: originalRemainingUsages,
                                isActive: rollbackIsActive
                            }
                        }
                    );
                    console.log('‚úÖ [Rollback] Package usage rolled back successfully');
                } catch (rollbackError) {
                    console.error('‚ùå [Rollback] Failed to rollback package usage:', rollbackError);
                    // Log for manual intervention
                    console.error('üö® [Critical] Manual intervention required for package:', {
                        packagePurchaseId: packagePurchase._id?.toString(),
                        shouldBeRemainingUsages: originalRemainingUsages
                    });
                }
            }
            
            // Re-throw the original error
            if (error instanceof ValidationError || error instanceof NotFoundError) {
                throw error;
            }
            
            throw new ValidationError({ 
                package: error.message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω thanh to√°n v√† s·ª≠ d·ª•ng g√≥i d·ªãch v·ª•' 
            });
        }

        // üîç STEP 3: Fetch updated appointment with populated data (outside transaction)
        const updatedAppointment = await Appointments.findById(id)
            .populate('profileId', 'fullName gender phone year')
            .populate('serviceId', 'serviceName price serviceType')
            .populate('packageId', 'name price serviceIds');

        console.log('‚úÖ [Payment] Payment status updated successfully', {
            appointmentId: id,
            newStatus: 'confirmed',
            hasPackage: !!appointment.packageId
        });
        
        return res.status(200).json({
            success: true,
            message: 'X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng',
            data: updatedAppointment
        });
    } catch (error) {
        console.error('Error in updatePaymentStatus:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n'
        });
    }
};

/**
 * L·∫•y danh s√°ch cu·ªôc h·∫πn theo doctorId t·ª´ slot schedule
 * Ph√¢n trang v√† l·ªçc theo c√°c ti√™u ch√≠ kh√°c nhau
 */
export const getAppointmentsByDoctorId = async (req: AuthRequest, res: Response) => {
    try {
        const { doctorId } = req.params;
        const {
            page = 1,
            limit = 10,
            status,
            appointmentType,
            startDate,
            endDate
        } = req.query;

        // Ki·ªÉm tra doctorId c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(doctorId)) {
            throw new ValidationError({ doctorId: 'ID b√°c sƒ© kh√¥ng h·ª£p l·ªá' });
        }

        // T·∫°o aggregation pipeline ƒë·ªÉ t√¨m appointments d·ª±a tr√™n doctorId t·ª´ slot
        const matchStage: any = {};

        // √Åp d·ª•ng c√°c b·ªô l·ªçc n·∫øu c√≥
        if (status) matchStage.status = status;
        if (appointmentType) matchStage.appointmentType = appointmentType;

        // L·ªçc theo kho·∫£ng th·ªùi gian
        if (startDate && endDate) {
            matchStage.appointmentDate = {
                $gte: new Date(startDate as string),
                $lte: new Date(endDate as string)
            };
        } else if (startDate) {
            matchStage.appointmentDate = { $gte: new Date(startDate as string) };
        } else if (endDate) {
            matchStage.appointmentDate = { $lte: new Date(endDate as string) };
        }

        // Pipeline ƒë·ªÉ t√¨m appointments c·ªßa doctor c·ª• th·ªÉ
        const pipeline: any[] = [
            // B∆∞·ªõc 1: Match appointments c√≥ slotId
            {
                $match: {
                    slotId: { $exists: true, $ne: null },
                    ...matchStage
                }
            },
            // B∆∞·ªõc 2: Lookup ƒë·ªÉ join v·ªõi DoctorSchedules
            {
                $lookup: {
                    from: 'doctorschedules',
                    let: { slotId: '$slotId' },
                    pipeline: [
                        {
                            $match: {
                                doctorId: new mongoose.Types.ObjectId(doctorId),
                                $expr: {
                                    $in: ['$$slotId', {
                                        $reduce: {
                                            input: '$weekSchedule',
                                            initialValue: [],
                                            in: {
                                                $concatArrays: ['$$value', {
                                                    $map: {
                                                        input: '$$this.slots',
                                                        as: 'slot',
                                                        in: '$$slot._id'
                                                    }
                                                }]
                                            }
                                        }
                                    }]
                                }
                            }
                        }
                    ],
                    as: 'doctorSchedule'
                }
            },
            // B∆∞·ªõc 3: Ch·ªâ l·∫•y appointments c√≥ matching doctor schedule
            {
                $match: {
                    'doctorSchedule.0': { $exists: true }
                }
            },
            // B∆∞·ªõc 4: Lookup c√°c th√¥ng tin li√™n quan
            {
                $lookup: {
                    from: 'userprofiles',
                    localField: 'profileId',
                    foreignField: '_id',
                    as: 'profileId',
                    pipeline: [
                        { $project: { fullName: 1, gender: 1, phone: 1, year: 1 } }
                    ]
                }
            },
            {
                $lookup: {
                    from: 'services',
                    localField: 'serviceId',
                    foreignField: '_id',
                    as: 'serviceId',
                    pipeline: [
                        { $project: { serviceName: 1, price: 1, serviceType: 1 } }
                    ]
                }
            },
            {
                $lookup: {
                    from: 'servicepackages',
                    localField: 'packageId',
                    foreignField: '_id',
                    as: 'packageId',
                    pipeline: [
                        { $project: { name: 1, price: 1 } }
                    ]
                }
            },
            // B∆∞·ªõc 5: Unwind ƒë·ªÉ flatten arrays
            {
                $unwind: {
                    path: '$profileId',
                    preserveNullAndEmptyArrays: true
                }
            },
            {
                $unwind: {
                    path: '$serviceId',
                    preserveNullAndEmptyArrays: true
                }
            },
            {
                $unwind: {
                    path: '$packageId',
                    preserveNullAndEmptyArrays: true
                }
            },
            // B∆∞·ªõc 6: Sort theo th·ªùi gian
            {
                $sort: { appointmentDate: -1, appointmentTime: -1 }
            }
        ];

        // T√≠nh to√°n skip value cho ph√¢n trang
        const pageNumber = parseInt(page as string, 10);
        const limitNumber = parseInt(limit as string, 10);
        const skip = (pageNumber - 1) * limitNumber;

        // ƒê·∫øm t·ªïng s·ªë b·∫£n ghi
        const countPipeline = [...pipeline, { $count: 'total' }];
        const countResult = await Appointments.aggregate(countPipeline);
        const total = countResult.length > 0 ? countResult[0].total : 0;

        // L·∫•y d·ªØ li·ªáu v·ªõi ph√¢n trang
        const resultPipeline = [
            ...pipeline,
            { $skip: skip },
            { $limit: limitNumber }
        ];

        const appointments = await Appointments.aggregate(resultPipeline);

        return res.status(200).json({
            success: true,
            data: {
                appointments,
                pagination: {
                    total,
                    page: pageNumber,
                    limit: limitNumber,
                    pages: Math.ceil(total / limitNumber)
                }
            }
        });
    } catch (error) {
        console.error('Error in getAppointmentsByDoctorId:', error);
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch cu·ªôc h·∫πn theo b√°c sƒ©'
        });
    }
};

/**
 * X√°c nh·∫≠n cu·ªôc h·∫πn (chuy·ªÉn t·ª´ paid sang confirmed)
 */
export const confirmAppointment = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;

        // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(id)) {
            throw new ValidationError({ id: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá' });
        }

        // T√¨m cu·ªôc h·∫πn hi·ªán t·∫°i
        const appointment = await Appointments.findById(id);
        if (!appointment) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn');
        }

        // Ch·ªâ cho ph√©p x√°c nh·∫≠n n·∫øu tr·∫°ng th√°i hi·ªán t·∫°i l√† scheduled
        if (appointment.status !== 'scheduled') {
            throw new ValidationError({ status: 'Ch·ªâ c√≥ th·ªÉ x√°c nh·∫≠n cu·ªôc h·∫πn ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch' });
        }

        // Keep status as scheduled (theo workflow m·ªõi kh√¥ng c·∫ßn confirmed step)
        const updatedAppointment = await Appointments.findByIdAndUpdate(
            id,
            { $set: { status: 'scheduled' } },
            { new: true }
        ).populate('profileId', 'fullName gender phone year')
            .populate('serviceId', 'serviceName price serviceType')
            .populate('packageId', 'name price serviceIds');

        return res.status(200).json({
            success: true,
            message: 'X√°c nh·∫≠n cu·ªôc h·∫πn th√†nh c√¥ng',
            data: updatedAppointment
        });
    } catch (error) {
        console.error('Error in confirmAppointment:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi x√°c nh·∫≠n cu·ªôc h·∫πn'
        });
    }
};

/**
 * H·ªßy cu·ªôc h·∫πn b·ªüi b√°c sƒ© v·ªõi l√Ω do (Doctor only)
 */
export const cancelAppointmentByDoctor = async (req: AuthRequest, res: Response) => {
    try {
        const { id } = req.params;
        const { reason } = req.body;

        // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(id)) {
            throw new ValidationError({ id: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá' });
        }

        // Ki·ªÉm tra user c√≥ ph·∫£i doctor kh√¥ng
        if (req.user?.role !== 'doctor') {
            throw new UnauthorizedError('Ch·ªâ b√°c sƒ© m·ªõi c√≥ th·ªÉ h·ªßy l·ªãch h·∫πn');
        }

        // Ki·ªÉm tra l√Ω do h·ªßy
        if (!reason || reason.trim().length === 0) {
            throw new ValidationError({ reason: 'Vui l√≤ng nh·∫≠p l√Ω do h·ªßy l·ªãch h·∫πn' });
        }

        // T√¨m cu·ªôc h·∫πn hi·ªán t·∫°i
        const appointment = await Appointments.findById(id);
        if (!appointment) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn');
        }

        // Ki·ªÉm tra l·ªãch h·∫πn ƒë√£ b·ªã h·ªßy ch∆∞a
        if (appointment.status === 'cancelled') {
            throw new ValidationError({ status: 'Cu·ªôc h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥' });
        }

        // Ki·ªÉm tra l·ªãch h·∫πn ƒë√£ ho√†n th√†nh ch∆∞a
        if (appointment.status === 'completed') {
            throw new ValidationError({ status: 'Kh√¥ng th·ªÉ h·ªßy cu·ªôc h·∫πn ƒë√£ ho√†n th√†nh' });
        }

        // Gi·∫£i ph√≥ng slot n·∫øu c√≥
        if (appointment.slotId) {
            console.log(`üîì [CANCEL] Releasing slot ${appointment.slotId} for appointment ${id}`);
            await DoctorSchedules.updateOne(
                { 'weekSchedule.slots._id': appointment.slotId },
                { 
                    $set: { 'weekSchedule.$.slots.$[slot].status': 'Absent' },
                    $unset: {
                        'weekSchedule.$.slots.$[slot].bookedBy': 1,
                        'weekSchedule.$.slots.$[slot].bookedAt': 1
                    }
                },
                { arrayFilters: [{ 'slot._id': appointment.slotId }] }
            );
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh cancelled v√† l∆∞u l√Ω do v√†o notes
        const cancelNote = `[DOCTOR CANCELLED] ${reason.trim()}`;
        const existingNotes = appointment.notes || '';
        const updatedNotes = existingNotes 
            ? `${existingNotes}\n\n${cancelNote}` 
            : cancelNote;

        const updatedAppointment = await Appointments.findByIdAndUpdate(
            id,
            { 
                $set: { 
                    status: 'cancelled',
                    notes: updatedNotes
                } 
            },
            { new: true }
        ).populate('profileId', 'fullName gender phone year')
            .populate('serviceId', 'serviceName price serviceType')
            .populate('packageId', 'name price serviceIds');

        return res.status(200).json({
            success: true,
            message: 'H·ªßy cu·ªôc h·∫πn th√†nh c√¥ng',
            data: updatedAppointment
        });
    } catch (error) {
        console.error('Error in cancelAppointmentByDoctor:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        if (error instanceof UnauthorizedError) {
            return res.status(403).json({
                success: false,
                message: error.message
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi h·ªßy cu·ªôc h·∫πn'
        });
    }
};

/**
 * L·∫•y danh s√°ch cu·ªôc h·∫πn c·ªßa b√°c sƒ© hi·ªán t·∫°i (t·ª´ token)
 * Kh√¥ng c·∫ßn truy·ªÅn doctorId trong params
 */
export const getMyAppointments = async (req: AuthRequest, res: Response) => {
    try {
        const {
            page = 1,
            limit = 10,
            status,
            appointmentType,
            startDate,
            endDate
        } = req.query;

        // Ki·ªÉm tra user c√≥ trong token kh√¥ng
        if (!req.user?._id) {
            throw new UnauthorizedError('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng trong token');
        }

        // Ki·ªÉm tra user c√≥ ph·∫£i doctor kh√¥ng
        if (req.user.role !== 'doctor') {
            throw new UnauthorizedError('Ch·ªâ b√°c sƒ© m·ªõi c√≥ th·ªÉ truy c·∫≠p endpoint n√†y');
        }

        // T√¨m doctor record d·ª±a tr√™n userId t·ª´ token
        const doctor = await Doctor.findOne({ userId: req.user._id });
        
        if (!doctor) {
            // N·∫øu ch∆∞a c√≥ doctor record, tr·∫£ v·ªÅ empty list thay v√¨ error
            return res.status(200).json({
                success: true,
                data: {
                    appointments: [],
                    pagination: {
                        total: 0,
                        page: parseInt(page as string, 10),
                        limit: parseInt(limit as string, 10),
                        pages: 0
                    }
                },
                message: 'Ch∆∞a c√≥ th√¥ng tin b√°c sƒ© trong h·ªá th·ªëng. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ thi·∫øt l·∫≠p h·ªì s∆°.'
            });
        }

        // S·ª≠ d·ª•ng logic t∆∞∆°ng t·ª± getAppointmentsByDoctorId
        const doctorId = doctor._id.toString();
        const matchStage: any = {};

        // √Åp d·ª•ng c√°c b·ªô l·ªçc n·∫øu c√≥
        if (status) matchStage.status = status;
        if (appointmentType) matchStage.appointmentType = appointmentType;

        // L·ªçc theo kho·∫£ng th·ªùi gian
        if (startDate && endDate) {
            matchStage.appointmentDate = {
                $gte: new Date(startDate as string),
                $lte: new Date(endDate as string)
            };
        } else if (startDate) {
            matchStage.appointmentDate = { $gte: new Date(startDate as string) };
        } else if (endDate) {
            matchStage.appointmentDate = { $lte: new Date(endDate as string) };
        }

        // Pipeline ƒë·ªÉ t√¨m appointments c·ªßa doctor c·ª• th·ªÉ
        const pipeline: any[] = [
            // B∆∞·ªõc 1: Match appointments c√≥ slotId
            {
                $match: {
                    slotId: { $exists: true, $ne: null },
                    ...matchStage
                }
            },
            // B∆∞·ªõc 2: Lookup ƒë·ªÉ join v·ªõi DoctorSchedules
            {
                $lookup: {
                    from: 'doctorschedules',
                    let: { slotId: '$slotId' },
                    pipeline: [
                        {
                            $match: {
                                doctorId: new mongoose.Types.ObjectId(doctorId),
                                $expr: {
                                    $in: ['$$slotId', {
                                        $reduce: {
                                            input: '$weekSchedule',
                                            initialValue: [],
                                            in: {
                                                $concatArrays: ['$$value', {
                                                    $map: {
                                                        input: '$$this.slots',
                                                        as: 'slot',
                                                        in: '$$slot._id'
                                                    }
                                                }]
                                            }
                                        }
                                    }]
                                }
                            }
                        }
                    ],
                    as: 'doctorSchedule'
                }
            },
            // B∆∞·ªõc 3: Ch·ªâ l·∫•y appointments c√≥ matching doctor schedule
            {
                $match: {
                    'doctorSchedule.0': { $exists: true }
                }
            },
            // B∆∞·ªõc 4: Lookup c√°c th√¥ng tin li√™n quan
            {
                $lookup: {
                    from: 'userprofiles',
                    localField: 'profileId',
                    foreignField: '_id',
                    as: 'profileId',
                    pipeline: [
                        { $project: { fullName: 1, gender: 1, phone: 1, year: 1 } }
                    ]
                }
            },
            {
                $lookup: {
                    from: 'services',
                    localField: 'serviceId',
                    foreignField: '_id',
                    as: 'serviceId',
                    pipeline: [
                        { $project: { serviceName: 1, price: 1, serviceType: 1 } }
                    ]
                }
            },
            {
                $lookup: {
                    from: 'servicepackages',
                    localField: 'packageId',
                    foreignField: '_id',
                    as: 'packageId',
                    pipeline: [
                        { $project: { name: 1, price: 1 } }
                    ]
                }
            },
            // B∆∞·ªõc 5: Unwind ƒë·ªÉ flatten arrays
            {
                $unwind: {
                    path: '$profileId',
                    preserveNullAndEmptyArrays: true
                }
            },
            {
                $unwind: {
                    path: '$serviceId',
                    preserveNullAndEmptyArrays: true
                }
            },
            {
                $unwind: {
                    path: '$packageId',
                    preserveNullAndEmptyArrays: true
                }
            },
            // B∆∞·ªõc 6: Sort theo th·ªùi gian
            {
                $sort: { appointmentDate: -1, appointmentTime: -1 }
            }
        ];

        // T√≠nh to√°n skip value cho ph√¢n trang
        const pageNumber = parseInt(page as string, 10);
        const limitNumber = parseInt(limit as string, 10);
        const skip = (pageNumber - 1) * limitNumber;

        // ƒê·∫øm t·ªïng s·ªë b·∫£n ghi
        const countPipeline = [...pipeline, { $count: 'total' }];
        const countResult = await Appointments.aggregate(countPipeline);
        const total = countResult.length > 0 ? countResult[0].total : 0;

        // L·∫•y d·ªØ li·ªáu v·ªõi ph√¢n trang
        const resultPipeline = [
            ...pipeline,
            { $skip: skip },
            { $limit: limitNumber }
        ];

        const appointments = await Appointments.aggregate(resultPipeline);

        return res.status(200).json({
            success: true,
            data: {
                appointments,
                pagination: {
                    total,
                    page: pageNumber,
                    limit: limitNumber,
                    pages: Math.ceil(total / limitNumber)
                }
            }
        });
    } catch (error) {
        console.error('Error in getMyAppointments:', error);
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        if (error instanceof UnauthorizedError || error instanceof NotFoundError) {
            return res.status(error instanceof UnauthorizedError ? 401 : 404).json({
                success: false,
                message: error.message
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch cu·ªôc h·∫πn c·ªßa b√°c sƒ©'
        });
    }
}; 