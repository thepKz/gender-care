import { Request, Response } from 'express';
import mongoose from 'mongoose';
import { Appointments, DoctorSchedules, Services, ServicePackages, UserProfiles } from '../models';
import { NotFoundError } from '../errors/notFoundError';
import { ValidationError } from '../errors/validationError';
import { UnauthorizedError } from '../errors/unauthorizedError';

interface AuthRequest extends Request {
    user?: {
        _id: string;
        email: string;
        role: string;
    };
}

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ c√°c cu·ªôc h·∫πn
 * Ph√¢n trang v√† l·ªçc theo c√°c ti√™u ch√≠ kh√°c nhau
 */
export const getAllAppointments = async (req: AuthRequest, res: Response) => {
    try {
        const {
            page = 1,
            limit = 10,
            status,
            appointmentType,
            startDate,
            endDate,
            profileId,
            createdByUserId
        } = req.query;

        const query: any = {};

        // √Åp d·ª•ng c√°c b·ªô l·ªçc n·∫øu c√≥
        if (status) query.status = status;
        if (appointmentType) query.appointmentType = appointmentType;
        if (profileId) query.profileId = profileId;
        if (createdByUserId) query.createdByUserId = createdByUserId;

        // L·ªçc theo kho·∫£ng th·ªùi gian
        if (startDate && endDate) {
            query.appointmentDate = {
                $gte: new Date(startDate as string),
                $lte: new Date(endDate as string)
            };
        } else if (startDate) {
            query.appointmentDate = { $gte: new Date(startDate as string) };
        } else if (endDate) {
            query.appointmentDate = { $lte: new Date(endDate as string) };
        }

        // T√≠nh to√°n skip value cho ph√¢n trang
        const pageNumber = parseInt(page as string, 10);
        const limitNumber = parseInt(limit as string, 10);
        const skip = (pageNumber - 1) * limitNumber;

        // ƒê·∫øm t·ªïng s·ªë b·∫£n ghi th·ªèa m√£n ƒëi·ªÅu ki·ªán
        const total = await Appointments.countDocuments(query);

        // L·∫•y d·ªØ li·ªáu v·ªõi populate c√°c tr∆∞·ªùng li√™n quan
        const appointments = await Appointments.find(query)
            .populate('profileId', 'fullName gender phone year')
            .populate('serviceId', 'serviceName price serviceType')
            .populate('packageId', 'name price')
            .populate({
                path: 'doctorId',
                match: { isDeleted: { $ne: true } }, // Lo·∫°i tr·ª´ doctor ƒë√£ b·ªã x√≥a
                populate: {
                    path: 'userId',
                    select: 'fullName email avatar'
                }
            })
            .sort({ appointmentDate: -1, appointmentTime: -1 })
            .skip(skip)
            .limit(limitNumber);

        // Debug logging ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu doctor
        console.log('üîç [Debug] Sample appointment doctor data:', appointments.slice(0, 2).map(apt => ({
            _id: apt._id,
            doctorId: apt.doctorId,
            doctorIdType: typeof apt.doctorId,
            hasDoctor: apt.doctorId ? true : false,
            doctorUserId: (apt.doctorId as any)?.userId,
            doctorFullName: (apt.doctorId as any)?.userId?.fullName
        })));

        return res.status(200).json({
            success: true,
            data: {
                appointments,
                pagination: {
                    total,
                    page: pageNumber,
                    limit: limitNumber,
                    pages: Math.ceil(total / limitNumber)
                }
            }
        });
    } catch (error) {
        console.error('Error in getAllAppointments:', error);
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch cu·ªôc h·∫πn'
        });
    }
};

/**
 * T·∫°o cu·ªôc h·∫πn m·ªõi
 */
export const createAppointment = async (req: AuthRequest, res: Response) => {
    try {
        const {
            profileId,
            packageId,
            serviceId,
            slotId,
            appointmentDate,
            appointmentTime,
            appointmentType,
            typeLocation,
            address,
            description,
            notes
        } = req.body;

        // Ki·ªÉm tra profileId c√≥ t·ªìn t·∫°i kh√¥ng
        const profile = await UserProfiles.findById(profileId);
        if (!profile) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y h·ªì s∆° ng∆∞·ªùi d√πng');
        }

        // Ki·ªÉm tra √≠t nh·∫•t m·ªôt trong hai: packageId ho·∫∑c serviceId ph·∫£i ƒë∆∞·ª£c cung c·∫•p
        if (!packageId && !serviceId) {
            throw new ValidationError({ general: 'Ph·∫£i cung c·∫•p m·ªôt trong hai: packageId ho·∫∑c serviceId' });
        }

        // T√≠nh to√°n totalAmount d·ª±a tr√™n service/package
        let totalAmount = 0;

        // N·∫øu c√≥ packageId, ki·ªÉm tra n√≥ c√≥ t·ªìn t·∫°i kh√¥ng v√† l·∫•y gi√°
        if (packageId) {
            const packageData = await ServicePackages.findById(packageId);
            if (!packageData) {
                throw new NotFoundError('Kh√¥ng t√¨m th·∫•y g√≥i d·ªãch v·ª•');
            }
            totalAmount = packageData.price;
        }

        // N·∫øu c√≥ serviceId, ki·ªÉm tra n√≥ c√≥ t·ªìn t·∫°i kh√¥ng v√† l·∫•y gi√°
        if (serviceId) {
            const serviceData = await Services.findById(serviceId);
            if (!serviceData) {
                throw new NotFoundError('Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•');
            }
            totalAmount = serviceData.price;
        }

        console.log('üí∞ [Debug] Payment calculation:', {
            packageId,
            serviceId,
            typeLocation,
            totalAmount
        });

        // Ki·ªÉm tra slot c√≥ tr·ªëng kh√¥ng v√† l·∫•y th√¥ng tin b√°c sƒ© (n·∫øu slotId ƒë∆∞·ª£c cung c·∫•p)
        let assignedDoctorId = null;
        if (slotId) {
            console.log('üîç [Debug] Checking slot availability:', { slotId, appointmentDate, appointmentTime });

            // Logic ƒë·ªÉ ki·ªÉm tra slot c√≥ tr·ªëng kh√¥ng
            // T√¨m schedule c√≥ ch·ª©a slot v·ªõi _id matching slotId
            const schedule = await DoctorSchedules.findOne({
                'weekSchedule.slots._id': slotId
            });

            console.log('üîç [Debug] Found schedule for slot:', schedule ? 'YES' : 'NO');

            if (!schedule) {
                console.log('‚ùå [Debug] No schedule found containing slotId:', slotId);
                throw new NotFoundError('Kh√¥ng t√¨m th·∫•y slot th·ªùi gian');
            }

            // L·∫•y doctorId t·ª´ schedule ƒë·ªÉ assign v√†o appointment
            assignedDoctorId = schedule.doctorId;
            console.log('üîç [Debug] Assigned doctor ID:', assignedDoctorId);

            // T√¨m slot c·ª• th·ªÉ v√† ki·ªÉm tra tr·∫°ng th√°i
            let slotFound = false;
            let slotIsBooked = true;

            for (const week of schedule.weekSchedule) {
                for (const slot of week.slots) {
                    if (slot._id?.toString() === slotId) {
                        slotFound = true;
                        slotIsBooked = slot.status !== "Free";
                        break;
                    }
                }
                if (slotFound) break;
            }

            if (!slotFound) {
                throw new NotFoundError('Kh√¥ng t√¨m th·∫•y slot th·ªùi gian');
            }

            if (slotIsBooked) {
                throw new ValidationError({ slotId: 'Slot th·ªùi gian n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t' });
            }
        }

        // Ki·ªÉm tra n·∫øu typeLocation l√† "home" th√¨ ph·∫£i c√≥ address
        if (typeLocation === 'home' && !address) {
            throw new ValidationError({ address: 'ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc khi ch·ªçn lo·∫°i ƒë·ªãa ƒëi·ªÉm l√† "home"' });
        }

        // T·∫°o appointment m·ªõi
        const newAppointment = await Appointments.create({
            createdByUserId: req.user?._id, // L·∫•y t·ª´ middleware x√°c th·ª±c
            profileId,
            packageId: packageId || undefined,
            serviceId: serviceId || undefined,
            doctorId: assignedDoctorId || undefined, // G√°n b√°c sƒ© t·ª´ slot
            slotId: slotId || undefined,
            appointmentDate,
            appointmentTime,
            appointmentType,
            typeLocation,
            address,
            description,
            notes,
            status: 'pending_payment', // ‚úÖ Set status to pending_payment ƒë·ªÉ trigger payment flow
            totalAmount, // ‚úÖ Th√™m t·ªïng ti·ªÅn c·∫ßn thanh to√°n
            paymentStatus: 'unpaid' // ‚úÖ Set payment status m·∫∑c ƒë·ªãnh
        });

        // N·∫øu c√≥ slotId, c·∫≠p nh·∫≠t tr·∫°ng th√°i slot th√†nh "Booked"
        if (slotId) {
            await DoctorSchedules.updateOne(
                { 'weekSchedule.slots._id': new mongoose.Types.ObjectId(slotId) },
                { $set: { 'weekSchedule.$.slots.$[slot].status': 'Booked' } },
                { arrayFilters: [{ 'slot._id': new mongoose.Types.ObjectId(slotId) }] }
            );
        }

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        return res.status(201).json({
            success: true,
            message: 'ƒê·∫∑t l·ªãch h·∫πn th√†nh c√¥ng! Vui l√≤ng ho√†n t·∫•t thanh to√°n.',
            data: newAppointment
        });
    } catch (error) {
        console.error('Error in createAppointment:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o cu·ªôc h·∫πn'
        });
    }
};

/**
 * L·∫•y chi ti·∫øt cu·ªôc h·∫πn theo ID
 */
export const getAppointmentById = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;

        // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(id)) {
            throw new ValidationError({ id: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá' });
        }

        // T√¨m cu·ªôc h·∫πn theo ID
        const appointment = await Appointments.findById(id)
            .populate('profileId', 'fullName gender phone year')
            .populate('serviceId', 'serviceName price serviceType')
            .populate('packageId', 'name price serviceIds')
            .populate('createdByUserId', 'fullName email')
            .populate({
                path: 'doctorId',
                match: { isDeleted: { $ne: true } }, // Lo·∫°i tr·ª´ doctor ƒë√£ b·ªã x√≥a
                populate: {
                    path: 'userId',
                    select: 'fullName email avatar'
                }
            });

        if (!appointment) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn');
        }

        return res.status(200).json({
            success: true,
            data: appointment
        });
    } catch (error) {
        console.error('Error in getAppointmentById:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y chi ti·∫øt cu·ªôc h·∫πn'
        });
    }
};

/**
 * C·∫≠p nh·∫≠t th√¥ng tin cu·ªôc h·∫πn
 */
export const updateAppointment = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const updateData = req.body;

        // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(id)) {
            throw new ValidationError({ id: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá' });
        }

        // T√¨m cu·ªôc h·∫πn hi·ªán t·∫°i
        const appointment = await Appointments.findById(id);
        if (!appointment) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn');
        }

        // Ch·ªâ cho ph√©p c·∫≠p nh·∫≠t n·∫øu tr·∫°ng th√°i l√† pending ho·∫∑c confirmed
        if (!['pending', 'confirmed'].includes(appointment.status)) {
            throw new ValidationError({ status: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t cu·ªôc h·∫πn ƒë√£ ho√†n th√†nh ho·∫∑c ƒë√£ h·ªßy' });
        }

        // N·∫øu thay ƒë·ªïi slot, ki·ªÉm tra slot m·ªõi c√≥ tr·ªëng kh√¥ng
        if (updateData.slotId && updateData.slotId !== appointment.slotId?.toString()) {
            // Gi·∫£i ph√≥ng slot c≈©
            if (appointment.slotId) {
                await DoctorSchedules.updateOne(
                    { 'weekSchedule.slots._id': appointment.slotId },
                    { $set: { 'weekSchedule.$.slots.$[slot].status': 'Free' } },
                    { arrayFilters: [{ 'slot._id': appointment.slotId }] }
                );
            }

            // Ki·ªÉm tra v√† ƒë·∫∑t slot m·ªõi
            const schedule = await DoctorSchedules.findOne({
                'weekSchedule.slots._id': new mongoose.Types.ObjectId(updateData.slotId)
            });

            if (!schedule) {
                throw new NotFoundError('Kh√¥ng t√¨m th·∫•y slot th·ªùi gian m·ªõi');
            }

            // T√¨m slot c·ª• th·ªÉ v√† ki·ªÉm tra tr·∫°ng th√°i
            let slotFound = false;
            let slotIsBooked = true;

            for (const week of schedule.weekSchedule) {
                for (const slot of week.slots) {
                    if (slot._id?.toString() === updateData.slotId) {
                        slotFound = true;
                        slotIsBooked = slot.status !== "Free";
                        break;
                    }
                }
                if (slotFound) break;
            }

            if (!slotFound) {
                throw new NotFoundError('Kh√¥ng t√¨m th·∫•y slot th·ªùi gian m·ªõi');
            }

            if (slotIsBooked) {
                throw new ValidationError({ slotId: 'Slot th·ªùi gian m·ªõi ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t' });
            }

            // C·∫≠p nh·∫≠t slot m·ªõi th√†nh Booked
            await DoctorSchedules.updateOne(
                { 'weekSchedule.slots._id': new mongoose.Types.ObjectId(updateData.slotId) },
                { $set: { 'weekSchedule.$.slots.$[slot].status': 'Booked' } },
                { arrayFilters: [{ 'slot._id': new mongoose.Types.ObjectId(updateData.slotId) }] }
            );
        }

        // Ki·ªÉm tra n·∫øu thay ƒë·ªïi typeLocation th√†nh "home" th√¨ ph·∫£i c√≥ address
        if (updateData.typeLocation === 'home' && !updateData.address && !appointment.address) {
            throw new ValidationError({ address: 'ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc khi ch·ªçn lo·∫°i ƒë·ªãa ƒëi·ªÉm l√† "home"' });
        }

        // C·∫≠p nh·∫≠t cu·ªôc h·∫πn
        const updatedAppointment = await Appointments.findByIdAndUpdate(
            id,
            { $set: updateData },
            { new: true }
        ).populate('profileId', 'fullName gender phone year')
            .populate('serviceId', 'serviceName price serviceType')
            .populate('packageId', 'name price serviceIds')
            .populate({
                path: 'doctorId',
                match: { isDeleted: { $ne: true } }, // Lo·∫°i tr·ª´ doctor ƒë√£ b·ªã x√≥a
                populate: {
                    path: 'userId',
                    select: 'fullName email avatar'
                }
            });

        return res.status(200).json({
            success: true,
            message: 'C·∫≠p nh·∫≠t cu·ªôc h·∫πn th√†nh c√¥ng',
            data: updatedAppointment
        });
    } catch (error) {
        console.error('Error in updateAppointment:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t cu·ªôc h·∫πn'
        });
    }
};

/**
 * X√≥a m·ªÅm cu·ªôc h·∫πn (c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh cancelled)
 * Admin v√† Staff c√≥ th·ªÉ h·ªßy b·∫•t k·ª≥ l·ªãch n√†o
 * Customer ch·ªâ c√≥ th·ªÉ h·ªßy l·ªãch do m√¨nh ƒë·∫∑t v√† sau khi ƒë√£ ƒë·ª£i √≠t nh·∫•t 10 ph√∫t k·ªÉ t·ª´ khi ƒë·∫∑t l·ªãch
 */
export const deleteAppointment = async (req: AuthRequest, res: Response) => {
    try {
        const { id } = req.params;

        // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(id)) {
            throw new ValidationError({ id: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá' });
        }

        // T√¨m cu·ªôc h·∫πn hi·ªán t·∫°i
        const appointment = await Appointments.findById(id);
        if (!appointment) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn');
        }

        // Ki·ªÉm tra quy·ªÅn h·ªßy l·ªãch
        const userRole = req.user?.role || '';
        const userId = req.user?._id || '';

        // N·∫øu l√† customer, ki·ªÉm tra th√™m ƒëi·ªÅu ki·ªán
        if (userRole === 'customer') {
            // 1. Ki·ªÉm tra xem l·ªãch h·∫πn c√≥ ph·∫£i c·ªßa customer n√†y kh√¥ng
            if (appointment.createdByUserId?.toString() !== userId.toString()) {
                console.log('‚ùå [Debug] User kh√¥ng c√≥ quy·ªÅn h·ªßy l·ªãch ng∆∞·ªùi kh√°c:', { appointmentUserId: appointment.createdByUserId, requestUserId: userId });
                throw new UnauthorizedError('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p');
            }

            // 2. Ch·ªâ cho ph√©p h·ªßy sau khi ƒë√£ ƒë·ª£i 10 ph√∫t k·ªÉ t·ª´ khi ƒë·∫∑t l·ªãch
            // Ki·ªÉm tra n·∫øu createdAt t·ªìn t·∫°i
            if (!appointment.createdAt) {
                console.log('‚ùå [Debug] Kh√¥ng t√¨m th·∫•y th·ªùi gian t·∫°o l·ªãch');
                throw new ValidationError({ time: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh th·ªùi gian ƒë·∫∑t l·ªãch' });
            }

            // ƒê·∫£m b·∫£o createdAt l√† ki·ªÉu Date
            const createdAt = appointment.createdAt instanceof Date
                ? appointment.createdAt
                : new Date(appointment.createdAt);

            const now = new Date();
            const diffMinutes = (now.getTime() - createdAt.getTime()) / (1000 * 60);

            console.log('üîç [Debug] Th·ªùi gian t·ª´ khi t·∫°o l·ªãch ƒë·∫øn gi·ªù:', {
                createdAt,
                now,
                diffMinutes,
                appointmentId: id
            });

            if (diffMinutes < 10) {
                console.log('‚ùå [Debug] Kh√¥ng th·ªÉ h·ªßy l·ªãch khi ch∆∞a ƒë·ªß 10 ph√∫t:', { diffMinutes, appointmentId: id });
                throw new ValidationError({ time: 'B·∫°n ph·∫£i ƒë·ª£i √≠t nh·∫•t 10 ph√∫t sau khi ƒë·∫∑t l·ªãch m·ªõi c√≥ th·ªÉ h·ªßy' });
            }
        }

        // Ch·ªâ cho ph√©p h·ªßy n·∫øu tr·∫°ng th√°i l√† pending, pending_payment, ho·∫∑c confirmed
        if (!['pending', 'pending_payment', 'confirmed'].includes(appointment.status)) {
            throw new ValidationError({ status: 'Kh√¥ng th·ªÉ h·ªßy cu·ªôc h·∫πn ƒë√£ ho√†n th√†nh ho·∫∑c ƒë√£ h·ªßy' });
        }

        // Gi·∫£i ph√≥ng slot n·∫øu c√≥
        if (appointment.slotId) {
            await DoctorSchedules.updateOne(
                { 'weekSchedule.slots._id': appointment.slotId },
                { $set: { 'weekSchedule.$.slots.$[slot].status': 'Free' } },
                { arrayFilters: [{ 'slot._id': appointment.slotId }] }
            );
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh cancelled
        const updatedAppointment = await Appointments.findByIdAndUpdate(
            id,
            { $set: { status: 'cancelled' } },
            { new: true }
        );

        return res.status(200).json({
            success: true,
            message: 'H·ªßy cu·ªôc h·∫πn th√†nh c√¥ng',
            data: updatedAppointment
        });
    } catch (error) {
        console.error('Error in deleteAppointment:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi h·ªßy cu·ªôc h·∫πn'
        });
    }
};

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc h·∫πn
 */
export const updateAppointmentStatus = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const { status } = req.body;

        // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(id)) {
            throw new ValidationError({ id: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá' });
        }

        // Ki·ªÉm tra status c√≥ h·ª£p l·ªá kh√¥ng
        if (!['pending', 'pending_payment', 'confirmed', 'completed', 'cancelled'].includes(status)) {
            throw new ValidationError({ status: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá' });
        }

        // T√¨m cu·ªôc h·∫πn hi·ªán t·∫°i
        const appointment = await Appointments.findById(id);
        if (!appointment) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn');
        }

        // Ki·ªÉm tra logic chuy·ªÉn tr·∫°ng th√°i
        if (appointment.status === 'cancelled' && status !== 'cancelled') {
            throw new ValidationError({ status: 'Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i c·ªßa cu·ªôc h·∫πn ƒë√£ h·ªßy' });
        }

        if (appointment.status === 'completed' && status !== 'completed') {
            throw new ValidationError({ status: 'Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i c·ªßa cu·ªôc h·∫πn ƒë√£ ho√†n th√†nh' });
        }

        // N·∫øu chuy·ªÉn sang cancelled, gi·∫£i ph√≥ng slot
        if (status === 'cancelled' && appointment.status !== 'cancelled' && appointment.slotId) {
            await DoctorSchedules.updateOne(
                { 'weekSchedule.slots._id': appointment.slotId },
                { $set: { 'weekSchedule.$.slots.$[slot].status': 'Free' } },
                { arrayFilters: [{ 'slot._id': appointment.slotId }] }
            );
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i
        const updatedAppointment = await Appointments.findByIdAndUpdate(
            id,
            { $set: { status } },
            { new: true }
        ).populate('profileId', 'fullName gender phone year')
            .populate('serviceId', 'serviceName price serviceType')
            .populate('packageId', 'name price serviceIds');

        return res.status(200).json({
            success: true,
            message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc h·∫πn th√†nh c√¥ng',
            data: updatedAppointment
        });
    } catch (error) {
        console.error('Error in updateAppointmentStatus:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc h·∫πn'
        });
    }
};

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n - chuy·ªÉn t·ª´ pending_payment sang confirmed
 */
export const updatePaymentStatus = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const { status } = req.body;

        console.log('updatePaymentStatus called with:', { id, status });

        // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(id)) {
            throw new ValidationError({ id: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá' });
        }

        // Ki·ªÉm tra status c√≥ h·ª£p l·ªá kh√¥ng (ch·ªâ cho ph√©p confirmed)
        if (status !== 'confirmed') {
            throw new ValidationError({ status: 'Ch·ªâ cho ph√©p x√°c nh·∫≠n thanh to√°n' });
        }

        // T√¨m cu·ªôc h·∫πn hi·ªán t·∫°i
        const appointment = await Appointments.findById(id);
        if (!appointment) {
            throw new NotFoundError('Kh√¥ng t√¨m th·∫•y cu·ªôc h·∫πn');
        }

        console.log('Current appointment status:', appointment.status);

        // N·∫øu ƒë√£ confirmed r·ªìi th√¨ tr·∫£ v·ªÅ th√†nh c√¥ng lu√¥n
        if (appointment.status === 'confirmed') {
            console.log('Appointment already confirmed, returning success');
            return res.status(200).json({
                success: true,
                message: 'Cu·ªôc h·∫πn ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n tr∆∞·ªõc ƒë√≥',
                data: appointment
            });
        }

        // Ch·ªâ cho ph√©p c·∫≠p nh·∫≠t n·∫øu tr·∫°ng th√°i hi·ªán t·∫°i l√† pending_payment
        if (appointment.status !== 'pending_payment') {
            throw new ValidationError({ status: `Ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t thanh to√°n cho cu·ªôc h·∫πn ƒëang ch·ªù thanh to√°n. Tr·∫°ng th√°i hi·ªán t·∫°i: ${appointment.status}` });
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i sang confirmed
        const updatedAppointment = await Appointments.findByIdAndUpdate(
            id,
            { $set: { status: 'confirmed' } },
            { new: true }
        ).populate('profileId', 'fullName gender phone year')
            .populate('serviceId', 'serviceName price serviceType')
            .populate('packageId', 'name price serviceIds');

        console.log('Payment status updated successfully');
        return res.status(200).json({
            success: true,
            message: 'X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng',
            data: updatedAppointment
        });
    } catch (error) {
        console.error('Error in updatePaymentStatus:', error);
        if (error instanceof NotFoundError) {
            return res.status(404).json({
                success: false,
                message: error.message
            });
        }
        if (error instanceof ValidationError) {
            return res.status(400).json({
                success: false,
                errors: error.errors
            });
        }
        return res.status(500).json({
            success: false,
            message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n'
        });
    }
};

 