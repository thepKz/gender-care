const { MongoClient, ObjectId } = require('mongodb');
const path = require('path');

// ƒê·ªçc .env t·ª´ th∆∞ m·ª•c Backend (2 c·∫•p l√™n t·ª´ scripts/)
require('dotenv').config({ path: path.join(__dirname, '../../.env') });

// Ki·ªÉm tra v√† x·ª≠ l√Ω MONGO_URI
const MONGO_URI = process.env.MONGO_URI || "mongodb://localhost:27017/gender-healthcare";

if (!process.env.MONGO_URI) {
  console.log('‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y MONGO_URI trong file .env');
  console.log('üîß S·ª≠ d·ª•ng default: mongodb://localhost:27017/gender-healthcare');
  console.log('üí° ƒê·ªÉ s·ª≠ d·ª•ng URI kh√°c, t·∫°o file .env v·ªõi MONGO_URI=your_connection_string');
} else {
  console.log('‚úÖ ƒê√£ t√¨m th·∫•y MONGO_URI trong file .env');
  console.log('üîó K·∫øt n·ªëi t·ªõi MongoDB Atlas...');
}

// Extract DB name from URI safely
let DB_NAME;
try {
  DB_NAME = MONGO_URI.split('/').pop().split('?')[0];
  if (!DB_NAME || DB_NAME === '') {
    DB_NAME = 'gender-healthcare'; // Default database name if not specified
  }
} catch (error) {
  DB_NAME = 'gender-healthcare'; // Default database name
}

console.log(`üéØ Target Database: ${DB_NAME}`);

async function insertSampleData() {
  const client = new MongoClient(MONGO_URI);
  
  try {
    await client.connect();
    console.log('üîó ƒê√£ k·∫øt n·ªëi MongoDB ƒë·ªÉ insert sample data...');
    
    const db = client.db(DB_NAME);
    
    // ====================================
    // 1. INSERT USERS (b·ªï sung doctors)
    // ====================================
    const newUsers = [
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd02"),
        email: "bs.lethihoa@gmail.com",
        password: "$2b$10$hashedpassword3",
        fullName: "BS. L√™ Th·ªã Hoa",
        phone: "0903456789",
        avatar: "https://example.com/doctor1.jpg",
        gender: "female",
        address: "789 Tr·∫ßn H∆∞ng ƒê·∫°o, Qu·∫≠n 1, TP.HCM",
        year: new Date("1985-03-10"),
        role: "doctor",
        emailVerified: true,
        isActive: true,
        createdAt: new Date("2024-01-01T00:00:00Z"),
        updatedAt: new Date("2024-01-01T00:00:00Z")
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd03"),
        email: "bs.nguyenvanan@gmail.com",
        password: "$2b$10$hashedpassword4",
        fullName: "BS. Nguy·ªÖn VƒÉn An",
        phone: "0904567890",
        avatar: "https://example.com/doctor2.jpg",
        gender: "male",
        address: "321 Pasteur, Qu·∫≠n 3, TP.HCM",
        year: new Date("1982-07-25"),
        role: "doctor",
        emailVerified: true,
        isActive: true,
        createdAt: new Date("2024-01-01T00:00:00Z"),
        updatedAt: new Date("2024-01-01T00:00:00Z")
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcdef"),
        email: "nguyenthimai@gmail.com",
        password: "$2b$10$hashedpassword1",
        fullName: "Nguy·ªÖn Th·ªã Mai",
        phone: "0901234567",
        avatar: "https://example.com/avatar1.jpg",
        gender: "female",
        address: "123 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP.HCM",
        year: new Date("1992-05-15"),
        role: "customer",
        emailVerified: true,
        isActive: true,
        createdAt: new Date("2024-01-01T00:00:00Z"),
        updatedAt: new Date("2024-01-01T00:00:00Z")
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd01"),
        email: "tranthihuong@gmail.com",
        password: "$2b$10$hashedpassword2",
        fullName: "Tr·∫ßn Th·ªã H∆∞∆°ng",
        phone: "0902345678",
        avatar: "https://example.com/avatar2.jpg",
        gender: "female",
        address: "456 L√™ VƒÉn S·ªπ, Qu·∫≠n 3, TP.HCM",
        year: new Date("1988-08-20"),
        role: "customer",
        emailVerified: true,
        isActive: true,
        createdAt: new Date("2024-01-02T00:00:00Z"),
        updatedAt: new Date("2024-01-02T00:00:00Z")
      }
    ];

    // Insert users (ignore duplicates if exist)
    for (const user of newUsers) {
      try {
        await db.collection('users').insertOne(user);
        console.log(`‚úÖ Inserted user: ${user.fullName}`);
      } catch (error) {
        if (error.code === 11000) {
          console.log(`‚ö†Ô∏è  User already exists: ${user.fullName}`);
        } else {
          console.error(`‚ùå Error inserting user ${user.fullName}:`, error.message);
        }
      }
    }

    // ====================================
    // 2. INSERT DOCTORS
    // ====================================
    const doctors = [
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd10"),
        userId: new ObjectId("672a1b2c3d4e5f6789abcd02"),
        bio: "B√°c sƒ© chuy√™n khoa S·∫£n ph·ª• khoa v·ªõi h∆°n 15 nƒÉm kinh nghi·ªám. T·ªët nghi·ªáp ƒê·∫°i h·ªçc Y D∆∞·ª£c TP.HCM, t·ª´ng c√¥ng t√°c t·∫°i c√°c b·ªánh vi·ªán l·ªõn.",
        experience: 15,
        rating: 4.8,
        specialization: "S·∫£n ph·ª• khoa",
        education: "Ti·∫øn sƒ© Y h·ªçc - ƒê·∫°i h·ªçc Y D∆∞·ª£c TP.HCM",
        certificate: "Ch·ª©ng ch·ªâ h√†nh ngh·ªÅ s·ªë 12345/BYT",
        createdAt: new Date("2024-01-01T00:00:00Z"),
        updatedAt: new Date("2024-01-01T00:00:00Z")
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd11"),
        userId: new ObjectId("672a1b2c3d4e5f6789abcd03"),
        bio: "B√°c sƒ© chuy√™n khoa N·ªôi ti·∫øt - ƒê√°i th√°o ƒë∆∞·ªùng v·ªõi 12 nƒÉm kinh nghi·ªám ƒëi·ªÅu tr·ªã c√°c b·ªánh l√Ω n·ªôi ti·∫øt t·ªë n·ªØ.",
        experience: 12,
        rating: 4.7,
        specialization: "N·ªôi ti·∫øt h·ªçc",
        education: "Th·∫°c sƒ© Y h·ªçc - ƒê·∫°i h·ªçc Y khoa Ph·∫°m Ng·ªçc Th·∫°ch",
        certificate: "Ch·ª©ng ch·ªâ h√†nh ngh·ªÅ s·ªë 67890/BYT",
        createdAt: new Date("2024-01-01T00:00:00Z"),
        updatedAt: new Date("2024-01-01T00:00:00Z")
      }
    ];

    await db.collection('doctors').insertMany(doctors);
    console.log('‚úÖ Inserted doctors');

    // ====================================
    // 3. INSERT USER PROFILES
    // ====================================
    const userProfiles = [
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd20"),
        ownerId: new ObjectId("672a1b2c3d4e5f6789abcdef"),
        fullName: "Nguy·ªÖn Th·ªã Mai",
        gender: "female",
        phone: "0901234567",
        year: new Date("1992-05-15"),
        createdAt: new Date("2024-01-01T00:00:00Z"),
        updatedAt: new Date("2024-01-01T00:00:00Z")
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd21"),
        ownerId: new ObjectId("672a1b2c3d4e5f6789abcdef"),
        fullName: "Nguy·ªÖn Th·ªã H∆∞∆°ng (Con g√°i)",
        gender: "female",
        phone: "",
        year: new Date("2015-12-10"),
        createdAt: new Date("2024-01-01T00:00:00Z"),
        updatedAt: new Date("2024-01-01T00:00:00Z")
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd22"),
        ownerId: new ObjectId("672a1b2c3d4e5f6789abcd01"),
        fullName: "Tr·∫ßn Th·ªã H∆∞∆°ng",
        gender: "female",
        phone: "0902345678",
        year: new Date("1988-08-20"),
        createdAt: new Date("2024-01-02T00:00:00Z"),
        updatedAt: new Date("2024-01-02T00:00:00Z")
      }
    ];

    await db.collection('userprofiles').insertMany(userProfiles);
    console.log('‚úÖ Inserted user profiles');

    // ====================================
    // 4. INSERT SERVICES
    // ====================================
    const services = [
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd30"),
        serviceName: "T∆∞ v·∫•n s·ª©c kh·ªèe gi·ªõi t√≠nh",
        price: 300000,
        description: "T∆∞ v·∫•n v·ªÅ c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe sinh s·∫£n, gi·ªõi t√≠nh v·ªõi b√°c sƒ© chuy√™n khoa",
        isDeleted: false,
        serviceType: "consultation",
        availableAt: ["Online", "Center"]
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd31"),
        serviceName: "X√©t nghi·ªám STI c∆° b·∫£n",
        price: 850000,
        description: "X√©t nghi·ªám c√°c b·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c (HIV, Syphilis, Gonorrhea, Chlamydia)",
        isDeleted: false,
        serviceType: "test",
        availableAt: ["Center"]
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd32"),
        serviceName: "Kh√°m ph·ª• khoa t·ªïng qu√°t",
        price: 500000,
        description: "Kh√°m s·ª©c kh·ªèe ph·ª• khoa ƒë·ªãnh k·ª≥, t·∫ßm so√°t ung th∆∞ c·ªï t·ª≠ cung",
        isDeleted: false,
        serviceType: "consultation",
        availableAt: ["Center"]
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd33"),
        serviceName: "T∆∞ v·∫•n k·∫ø ho·∫°ch h√≥a gia ƒë√¨nh",
        price: 200000,
        description: "T∆∞ v·∫•n c√°c ph∆∞∆°ng ph√°p tr√°nh thai, k·∫ø ho·∫°ch h√≥a gia ƒë√¨nh",
        isDeleted: false,
        serviceType: "consultation",
        availableAt: ["Online", "Center", "Athome"]
      }
    ];

    await db.collection('services').insertMany(services);
    console.log('‚úÖ Inserted services');

    // ====================================
    // 5. INSERT SERVICE PACKAGES
    // ====================================
    const servicePackages = [
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd40"),
        name: "G√≥i chƒÉm s√≥c s·ª©c kh·ªèe ph·ª• n·ªØ c∆° b·∫£n",
        description: "Bao g·ªìm t∆∞ v·∫•n s·ª©c kh·ªèe gi·ªõi t√≠nh + kh√°m ph·ª• khoa t·ªïng qu√°t",
        priceBeforeDiscount: 800000,
        price: 650000,
        serviceIds: [
          new ObjectId("672a1b2c3d4e5f6789abcd30"),
          new ObjectId("672a1b2c3d4e5f6789abcd32")
        ],
        isActive: true,
        createdAt: new Date("2024-01-01T00:00:00Z"),
        updatedAt: new Date("2024-01-01T00:00:00Z")
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd41"),
        name: "G√≥i x√©t nghi·ªám to√†n di·ªán",
        description: "Bao g·ªìm x√©t nghi·ªám STI + t∆∞ v·∫•n k·∫øt qu·∫£ v·ªõi b√°c sƒ©",
        priceBeforeDiscount: 1150000,
        price: 1000000,
        serviceIds: [
          new ObjectId("672a1b2c3d4e5f6789abcd31"),
          new ObjectId("672a1b2c3d4e5f6789abcd30")
        ],
        isActive: true,
        createdAt: new Date("2024-01-01T00:00:00Z"),
        updatedAt: new Date("2024-01-01T00:00:00Z")
      }
    ];

    await db.collection('servicepackages').insertMany(servicePackages);
    console.log('‚úÖ Inserted service packages');

    // ====================================
    // 6. INSERT DOCTOR SCHEDULES
    // ====================================
    const doctorSchedules = [
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd50"),
        doctorId: new ObjectId("672a1b2c3d4e5f6789abcd10"),
        weekSchedule: [
          {
            _id: new ObjectId("672a1b2c3d4e5f6789abcd60"),
            dayOfWeek: "Monday",
            slots: [
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd70"),
                slotTime: "08:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd71"),
                slotTime: "09:00",
                isBooked: true
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd72"),
                slotTime: "10:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd73"),
                slotTime: "14:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd74"),
                slotTime: "15:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd75"),
                slotTime: "16:00",
                isBooked: true
              }
            ]
          },
          {
            _id: new ObjectId("672a1b2c3d4e5f6789abcd61"),
            dayOfWeek: "Tuesday",
            slots: [
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd76"),
                slotTime: "08:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd77"),
                slotTime: "09:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd78"),
                slotTime: "10:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd79"),
                slotTime: "14:00",
                isBooked: false
              }
            ]
          },
          {
            _id: new ObjectId("672a1b2c3d4e5f6789abcd62"),
            dayOfWeek: "Wednesday",
            slots: [
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd7a"),
                slotTime: "08:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd7b"),
                slotTime: "09:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd7c"),
                slotTime: "15:00",
                isBooked: false
              }
            ]
          }
        ],
        createdAt: new Date("2024-01-01T00:00:00Z"),
        updatedAt: new Date("2024-01-01T00:00:00Z")
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcd51"),
        doctorId: new ObjectId("672a1b2c3d4e5f6789abcd11"),
        weekSchedule: [
          {
            _id: new ObjectId("672a1b2c3d4e5f6789abcd63"),
            dayOfWeek: "Monday",
            slots: [
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd7d"),
                slotTime: "09:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd7e"),
                slotTime: "10:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd7f"),
                slotTime: "14:00",
                isBooked: false
              }
            ]
          },
          {
            _id: new ObjectId("672a1b2c3d4e5f6789abcd64"),
            dayOfWeek: "Thursday",
            slots: [
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd80"),
                slotTime: "08:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd81"),
                slotTime: "09:00",
                isBooked: false
              },
              {
                _id: new ObjectId("672a1b2c3d4e5f6789abcd82"),
                slotTime: "15:00",
                isBooked: false
              }
            ]
          }
        ],
        createdAt: new Date("2024-01-01T00:00:00Z"),
        updatedAt: new Date("2024-01-01T00:00:00Z")
      }
    ];

    await db.collection('doctorschedules').insertMany(doctorSchedules);
    console.log('‚úÖ Inserted doctor schedules');

    // ====================================
    // 7. INSERT APPOINTMENTS
    // ====================================
    const appointments = [
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcde0"),
        createdByUserId: new ObjectId("672a1b2c3d4e5f6789abcdef"),
        profileId: new ObjectId("672a1b2c3d4e5f6789abcd20"),
        serviceId: new ObjectId("672a1b2c3d4e5f6789abcd30"),
        slotId: new ObjectId("672a1b2c3d4e5f6789abcd71"), // Slot 09:00 Monday ƒë√£ booked
        appointmentDate: new Date("2024-06-10T00:00:00Z"), // Monday
        appointmentTime: "09:00",
        appointmentType: "consultation",
        typeLocation: "Online",
        address: "",
        description: "T∆∞ v·∫•n v·ªÅ chu k·ª≥ kinh nguy·ªát kh√¥ng ƒë·ªÅu",
        notes: "Kh√°ch h√†ng b√°o chu k·ª≥ k√©o d√†i 45 ng√†y",
        status: "confirmed",
        createdAt: new Date("2024-06-05T00:00:00Z"),
        updatedAt: new Date("2024-06-06T00:00:00Z")
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcde1"),
        createdByUserId: new ObjectId("672a1b2c3d4e5f6789abcdef"),
        profileId: new ObjectId("672a1b2c3d4e5f6789abcd20"),
        packageId: new ObjectId("672a1b2c3d4e5f6789abcd40"),
        slotId: new ObjectId("672a1b2c3d4e5f6789abcd75"), // Slot 16:00 Monday ƒë√£ booked
        appointmentDate: new Date("2024-06-10T00:00:00Z"), // Monday
        appointmentTime: "16:00",
        appointmentType: "consultation",
        typeLocation: "clinic",
        address: "789 Tr·∫ßn H∆∞ng ƒê·∫°o, Qu·∫≠n 1, TP.HCM",
        description: "Kh√°m s·ª©c kh·ªèe ph·ª• khoa ƒë·ªãnh k·ª≥ theo g√≥i",
        notes: "Kh√°ch h√†ng mua g√≥i chƒÉm s√≥c s·ª©c kh·ªèe ph·ª• n·ªØ c∆° b·∫£n",
        status: "pending",
        createdAt: new Date("2024-06-07T00:00:00Z"),
        updatedAt: new Date("2024-06-07T00:00:00Z")
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcde2"),
        createdByUserId: new ObjectId("672a1b2c3d4e5f6789abcd01"),
        profileId: new ObjectId("672a1b2c3d4e5f6789abcd22"),
        serviceId: new ObjectId("672a1b2c3d4e5f6789abcd31"),
        slotId: new ObjectId("672a1b2c3d4e5f6789abcd7d"), // Slot b√°c sƒ© kh√°c
        appointmentDate: new Date("2024-06-10T00:00:00Z"), // Monday
        appointmentTime: "09:00",
        appointmentType: "test",
        typeLocation: "clinic",
        address: "321 Pasteur, Qu·∫≠n 3, TP.HCM",
        description: "X√©t nghi·ªám STI ƒë·ªãnh k·ª≥",
        notes: "Kh√°ch h√†ng y√™u c·∫ßu b·∫£o m·∫≠t th√¥ng tin",
        status: "completed",
        createdAt: new Date("2024-06-01T00:00:00Z"),
        updatedAt: new Date("2024-06-10T17:00:00Z")
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcde3"),
        createdByUserId: new ObjectId("672a1b2c3d4e5f6789abcd01"),
        profileId: new ObjectId("672a1b2c3d4e5f6789abcd22"),
        serviceId: new ObjectId("672a1b2c3d4e5f6789abcd33"),
        slotId: new ObjectId("672a1b2c3d4e5f6789abcd80"), // Slot Thursday 08:00
        appointmentDate: new Date("2024-06-13T00:00:00Z"), // Thursday
        appointmentTime: "08:00",
        appointmentType: "consultation",
        typeLocation: "home",
        address: "456 L√™ VƒÉn S·ªπ, Qu·∫≠n 3, TP.HCM",
        description: "T∆∞ v·∫•n k·∫ø ho·∫°ch h√≥a gia ƒë√¨nh t·∫°i nh√†",
        notes: "Kh√°ch h√†ng c√≥ con nh·ªè, kh√¥ng th·ªÉ ra ngo√†i",
        status: "cancelled",
        createdAt: new Date("2024-06-08T00:00:00Z"),
        updatedAt: new Date("2024-06-09T00:00:00Z")
      }
    ];

    await db.collection('appointments').insertMany(appointments);
    console.log('‚úÖ Inserted appointments');

    // ====================================
    // 8. INSERT BILLS
    // ====================================
    const bills = [
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcde5"),
        userId: new ObjectId("672a1b2c3d4e5f6789abcdef"),
        profileId: new ObjectId("672a1b2c3d4e5f6789abcd20"),
        billNumber: "BILL-2024060001",
        appointmentId: new ObjectId("672a1b2c3d4e5f6789abcde0"),
        subtotal: 300000,
        discountAmount: 0,
        totalAmount: 300000,
        status: "paid",
        createdAt: new Date("2024-06-05T00:00:00Z"),
        updatedAt: new Date("2024-06-05T10:30:00Z")
      },
      {
        _id: new ObjectId("672a1b2c3d4e5f6789abcde6"),
        userId: new ObjectId("672a1b2c3d4e5f6789abcdef"),
        profileId: new ObjectId("672a1b2c3d4e5f6789abcd20"),
        billNumber: "BILL-2024060002",
        packageId: new ObjectId("672a1b2c3d4e5f6789abcd40"),
        appointmentId: new ObjectId("672a1b2c3d4e5f6789abcde1"),
        subtotal: 650000,
        discountAmount: 50000,
        totalAmount: 600000,
        status: "pending",
        createdAt: new Date("2024-06-07T00:00:00Z"),
        updatedAt: new Date("2024-06-07T00:00:00Z")
      }
    ];

    await db.collection('bills').insertMany(bills);
    console.log('‚úÖ Inserted bills');

    // ====================================
    // SUMMARY
    // ====================================
    console.log('\nüéâ ƒê√É INSERT TH√ÄNH C√îNG SAMPLE DATA!');
    console.log('üìä Data ƒë√£ insert:');
    console.log('- 4 Users (2 customers, 2 doctors)');
    console.log('- 2 Doctor profiles');
    console.log('- 3 User profiles (including family)');  
    console.log('- 4 Services');
    console.log('- 2 Service packages');
    console.log('- 2 Doctor schedules v·ªõi time slots');
    console.log('- 4 Sample appointments (c√°c tr·∫°ng th√°i kh√°c nhau)');
    console.log('- 2 Bills');
    console.log('\nüöÄ S·∫¥N S√ÄNG TEST APPOINTMENT APIs!');
    
    // Hi·ªÉn th·ªã accounts ƒë·ªÉ test
    console.log('\nüë§ TEST ACCOUNTS:');
    console.log('üìã CUSTOMERS:');
    console.log('- Email: nguyenthimai@gmail.com | Pass: password123');
    console.log('- Email: tranthihuong@gmail.com | Pass: password123');
    console.log('üë®‚Äç‚öïÔ∏è DOCTORS:');
    console.log('- Email: bs.lethihoa@gmail.com | Pass: password123');
    console.log('- Email: bs.nguyenvanan@gmail.com | Pass: password123');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi insert data:', error);
  } finally {
    await client.close();
    console.log('üîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
insertSampleData().catch(console.error); 