import mongoose, { Schema, Document } from 'mongoose';

// Interface for Meeting document - SIMPLIFIED VERSION
export interface IMeeting extends Document {
  qaId: mongoose.Types.ObjectId;           // ü§ñ AUTO: Reference to DoctorQA
  doctorId: mongoose.Types.ObjectId;       // ü§ñ AUTO: Reference to Doctor  
  userId: mongoose.Types.ObjectId;         // ü§ñ AUTO: Reference to Customer/User
  meetingLink: string;                     // ü§ñ AUTO: Jitsi URL (auto-generated)
  provider: 'google' | 'jitsi';            // ü§ñ AUTO: Meeting provider (default: jitsi)
  
  // Th·ªùi gian
  scheduledTime: Date;                     // ü§ñ AUTO: Th·ªùi gian d·ª± ki·∫øn (from appointmentDate + slot)
  actualStartTime?: Date;                  // ‚úèÔ∏è DOCTOR: Khi meeting th·ª±c s·ª± b·∫Øt ƒë·∫ßu
  
  // Tr·∫°ng th√°i v√† th√¥ng tin
  status: 'scheduled' | 'in_progress' | 'completed' | 'cancelled'; // ‚úèÔ∏è DOCTOR: Meeting status
  participantCount: number;                // ü§ñ AUTO: S·ªë ng∆∞·ªùi tham gia hi·ªán t·∫°i (from Jitsi API)
  maxParticipants: number;                 // ‚úèÔ∏è DOCTOR: Gi·ªõi h·∫°n s·ªë ng∆∞·ªùi (default: 2)
  
  // Ghi ch√∫
  notes?: string;                          // ‚úèÔ∏è DOCTOR: Ghi ch√∫ t·ª´ doctor
  
  // Google Meet specific (optional - legacy)
  googleEventId?: string;                  // ü§ñ AUTO: Ch·ªâ khi d√πng Google
  
  createdAt: Date;                        // ü§ñ AUTO: MongoDB timestamp
  updatedAt: Date;                        // ü§ñ AUTO: MongoDB timestamp
}

// Meeting Schema - SIMPLIFIED
const MeetingSchema: Schema = new Schema({
  qaId: {
    type: Schema.Types.ObjectId,
    ref: 'DoctorQA',
    required: true,
    unique: true                           // M·ªói QA ch·ªâ c√≥ 1 meeting
  },
  doctorId: {
    type: Schema.Types.ObjectId,
    ref: 'Doctor',
    required: true
  },
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  meetingLink: {
    type: String,
    required: true,
    trim: true
  },
  provider: {
    type: String,
    enum: ['google', 'jitsi'],
    default: 'jitsi'                      // ‚úÖ CHANGED: Default to Jitsi instead of Google
  },
  scheduledTime: {
    type: Date,
    required: true
  },
  actualStartTime: {
    type: Date
  },
  status: {
    type: String,
    enum: ['scheduled', 'in_progress', 'completed', 'cancelled'],
    default: 'scheduled'
  },
  participantCount: {
    type: Number,
    default: 0,
    min: 0
  },
  maxParticipants: {
    type: Number,
    default: 2,
    min: 2,
    max: 10
  },
  notes: {
    type: String,
    trim: true
  },
  googleEventId: {
    type: String,
    trim: true
  }
}, {
  timestamps: true  // T·ª± ƒë·ªông t·∫°o createdAt, updatedAt
});

// Indexes for better performance
MeetingSchema.index({ qaId: 1 });
MeetingSchema.index({ doctorId: 1 });
MeetingSchema.index({ userId: 1 });
MeetingSchema.index({ scheduledTime: 1 });
MeetingSchema.index({ status: 1 });

// Export model
export default mongoose.model<IMeeting>('Meeting', MeetingSchema); 