import { NextFunction, Response } from "express";
import { AuthRequest } from "../types";

/**
 * Role Hierarchy trong h·ªá th·ªëng:
 * 1. admin - C√≥ t·∫•t c·∫£ quy·ªÅn (highest level)
 * 2. manager - C√≥ quy·ªÅn staff + quy·ªÅn ri√™ng c·ªßa manager  
 * 3. staff - Quy·ªÅn c∆° b·∫£n c·ªßa nh√¢n vi√™n
 * 4. doctor - Quy·ªÅn b√°c sƒ© (parallel v·ªõi staff)
 * 5. customer - Quy·ªÅn kh√°ch h√†ng (lowest level)
 */

// ƒê·ªãnh nghƒ©a role hierarchy levels
const ROLE_LEVELS: Record<string, number> = {
  'admin': 100,     // Highest - c√≥ t·∫•t c·∫£ quy·ªÅn
  'manager': 80,    // Manager level
  'staff': 60,      // Staff level  
  'doctor': 60,     // Doctor level (parallel v·ªõi staff)
  'customer': 20    // Lowest level
};

// C√°c roles c√≥ th·ªÉ th·ª±c hi·ªán t√≠nh nƒÉng c·ªßa nhau
const ROLE_PERMISSIONS: Record<string, string[]> = {
  'admin': ['admin', 'manager', 'staff', 'doctor', 'customer'],
  'manager': ['manager', 'staff'],
  'staff': ['staff'],
  'doctor': ['doctor'],
  'customer': ['customer']
};

/**
 * Middleware ki·ªÉm tra quy·ªÅn d·ª±a tr√™n role hierarchy
 * @param minimumRole - Role t·ªëi thi·ªÉu ƒë∆∞·ª£c y√™u c·∫ßu
 * @returns Express middleware function
 */
export const requireRole = (minimumRole: string) => {
  return (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
      if (!req.user) {
        return res.status(401).json({ 
          success: false,
          message: "Unauthorized: User not logged in" 
        });
      }

      const userRole = req.user.role;
      
      // Ki·ªÉm tra role c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng
      if (!ROLE_PERMISSIONS[userRole]) {
        return res.status(403).json({ 
          success: false,
          message: `Forbidden: Invalid role '${userRole}'` 
        });
      }

      // Ki·ªÉm tra user c√≥ quy·ªÅn th·ª±c hi·ªán action y√™u c·∫ßu minimumRole kh√¥ng
      const allowedRoles = ROLE_PERMISSIONS[userRole];
      
      if (!allowedRoles.includes(minimumRole)) {
        return res.status(403).json({ 
          success: false,
          message: `Forbidden: Role '${userRole}' cannot perform actions requiring '${minimumRole}' permission` 
        });
      }

      // Log for debugging (c√≥ th·ªÉ remove trong production)
      console.log(`üîê [RoleHierarchy] User '${req.user.email}' (${userRole}) accessing endpoint requiring '${minimumRole}' - GRANTED`);
      
      next();
    } catch (error) {
      console.error('[RoleHierarchy] Error in role checking:', error);
      res.status(500).json({ 
        success: false,
        message: "Internal server error during role verification" 
      });
    }
  };
};

/**
 * Middleware ki·ªÉm tra multiple roles (OR logic)
 * User ch·ªâ c·∫ßn c√≥ m·ªôt trong c√°c roles ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
 * @param roles - Array c√°c roles ƒë∆∞·ª£c ch·∫•p nh·∫≠n
 * @returns Express middleware function
 */
export const requireAnyRole = (roles: string[]) => {
  return (req: AuthRequest, res: Response, next: NextFunction) => {
    try {
      if (!req.user) {
        return res.status(401).json({ 
          success: false,
          message: "Unauthorized: User not logged in" 
        });
      }

      const userRole = req.user.role;
      
      // Ki·ªÉm tra role c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng
      if (!ROLE_PERMISSIONS[userRole]) {
        return res.status(403).json({ 
          success: false,
          message: `Forbidden: Invalid role '${userRole}'` 
        });
      }

      // Ki·ªÉm tra user c√≥ quy·ªÅn th·ª±c hi·ªán b·∫•t k·ª≥ role n√†o trong danh s√°ch kh√¥ng
      const allowedRoles = ROLE_PERMISSIONS[userRole];
      const hasPermission = roles.some(role => allowedRoles.includes(role));
      
      if (!hasPermission) {
        return res.status(403).json({ 
          success: false,
          message: `Forbidden: Role '${userRole}' cannot perform actions requiring any of [${roles.join(', ')}] permissions` 
        });
      }

      // Log for debugging
      console.log(`üîê [RoleHierarchy] User '${req.user.email}' (${userRole}) accessing endpoint requiring any of [${roles.join(', ')}] - GRANTED`);
      
      next();
    } catch (error) {
      console.error('[RoleHierarchy] Error in multiple role checking:', error);
      res.status(500).json({ 
        success: false,
        message: "Internal server error during role verification" 
      });
    }
  };
};

/**
 * Utility function ƒë·ªÉ ki·ªÉm tra user c√≥ quy·ªÅn th·ª±c hi·ªán action y√™u c·∫ßu role kh√¥ng
 * @param userRole - Role c·ªßa user hi·ªán t·∫°i
 * @param requiredRole - Role y√™u c·∫ßu ƒë·ªÉ th·ª±c hi·ªán action
 * @returns boolean - true n·∫øu c√≥ quy·ªÅn, false n·∫øu kh√¥ng
 */
export const hasRolePermission = (userRole: string, requiredRole: string): boolean => {
  const allowedRoles = ROLE_PERMISSIONS[userRole];
  return allowedRoles ? allowedRoles.includes(requiredRole) : false;
};

/**
 * Utility function ƒë·ªÉ l·∫•y level c·ªßa role (s·ªë c√†ng cao = quy·ªÅn c√†ng l·ªõn)
 * @param role - Role c·∫ßn ki·ªÉm tra
 * @returns number - Level c·ªßa role
 */
export const getRoleLevel = (role: string): number => {
  return ROLE_LEVELS[role] || 0;
};

// Backward compatibility - aliases cho c√°c middleware c≈©
export const requireStaffOrAbove = requireRole('staff');
export const requireManagerOrAbove = requireRole('manager');
export const requireAdminOnly = requireRole('admin');
export const requireDoctorAccess = requireRole('doctor');
export const requireCustomerAccess = requireRole('customer'); 