import { Router } from 'express';
import * as doctorController from '../controllers/doctorController';
import * as doctorScheduleController from '../controllers/doctorScheduleController';
import { verifyToken, verifyAdmin, verifyStaff } from '../middleware/auth';
import { roleMiddleware } from '../middleware/roleMiddleware';
import { requireRole } from '../middleware/roleHierarchy';
import multer from 'multer';

const router = Router();

// ‚úÖ Setup multer cho file upload
const upload = multer({ 
  dest: 'uploads/',
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB limit
  }
});

// ===== BASIC DOCTOR CRUD ROUTES =====

// Xem danh s√°ch b√°c sƒ© - t·∫•t c·∫£ m·ªçi ng∆∞·ªùi ƒë·ªÅu ƒë∆∞·ª£c ph√©p (k·ªÉ c·∫£ guest)
router.get('/', doctorController.getAll);

// ===== STATIC ROUTES FIRST (tr√°nh conflict v·ªõi /:id) =====

// üÜï STAFF/MANAGER/ADMIN: Upload doctor image v·ªõi enhanced validation - Now with hierarchy
router.post('/upload-image', verifyToken, requireRole('staff'), upload.single('image'), doctorController.uploadDoctorImage);

// üÜï STAFF/MANAGER/ADMIN: L·∫•y t·∫•t c·∫£ b√°c sƒ© v·ªõi feedback + status details - Now with hierarchy
router.get('/details/all', verifyToken, requireRole('staff'), doctorController.getAllWithDetails);

// PUBLIC: Xem th√¥ng tin c∆° b·∫£n b√°c sƒ© (kh√¥ng c·∫ßn authentication)
router.get('/:id/public', doctorController.getPublicById);

// PUBLIC: T√¨m t·∫•t c·∫£ b√°c sƒ© c√≥ l·ªãch tr·ªëng theo ng√†y/timeSlot (ch·ªâ Free status)
router.get('/available', doctorScheduleController.getAvailableDoctors);

// PUBLIC: L·∫•y t·∫•t c·∫£ l·ªãch l√†m vi·ªác c·ªßa t·∫•t c·∫£ b√°c sƒ© (ch·ªâ Free status)
router.get('/schedules/all', doctorScheduleController.getAllDoctorsSchedules);

// DEBUG: Test schedule creation logic (PUBLIC cho d·ªÖ test)
router.get('/debug/schedule-logic', doctorScheduleController.debugScheduleCreation);

// ===== DYNAMIC ROUTES WITH :id =====

// Xem th√¥ng tin chi ti·∫øt b√°c sƒ© theo ID - STAFF/MANAGER/ADMIN - Now with hierarchy
router.get('/:id', verifyToken, requireRole('staff'), doctorController.getById);

// üÜï STAFF/MANAGER/ADMIN: L·∫•y th√¥ng tin b√°c sƒ© v·ªõi feedback + status details - Now with hierarchy
router.get('/:id/details', verifyToken, requireRole('staff'), doctorController.getByIdWithDetails);

// üÜï PUBLIC/STAFF: L·∫•y ch·ªâ feedback c·ªßa doctor  
router.get('/:id/feedbacks', doctorController.getDoctorFeedbacks);

// üÜï STAFF/MANAGER/ADMIN: L·∫•y ch·ªâ tr·∫°ng th√°i c·ªßa doctor - Now with hierarchy
router.get('/:id/status', verifyToken, requireRole('staff'), doctorController.getDoctorStatus);

// üÜï MANAGER/ADMIN: C·∫≠p nh·∫≠t tr·∫°ng th√°i active/inactive c·ªßa doctor - Already uses roleMiddleware
router.put('/:id/status', verifyToken, roleMiddleware(['manager', 'admin']), doctorController.updateDoctorStatus);

// T·∫°o b√°c sƒ© m·ªõi - ch·ªâ admin v√† manager ƒë∆∞·ª£c ph√©p (kh√¥ng bao g·ªìm staff)
router.post('/', verifyToken, roleMiddleware(['admin', 'manager']), doctorController.create);

// C·∫≠p nh·∫≠t th√¥ng tin b√°c sƒ© - STAFF/MANAGER/ADMIN - Now with hierarchy
router.put('/:id', verifyToken, requireRole('staff'), doctorController.update);

// X√≥a b√°c sƒ© - ch·ªâ admin v√† manager ƒë∆∞·ª£c ph√©p (kh√¥ng bao g·ªìm staff - high risk operation)
router.delete('/:id', verifyToken, roleMiddleware(['admin', 'manager']), doctorController.remove);

// ===== DOCTOR SCHEDULE ROUTES =====

// ===== PUBLIC ROUTES (kh√¥ng c·∫ßn x√°c th·ª±c) =====

// PUBLIC: L·∫•y t·∫•t c·∫£ l·ªãch l√†m vi·ªác c·ªßa t·∫•t c·∫£ b√°c sƒ© (ch·ªâ Free status)
router.get('/schedules/all', doctorScheduleController.getAllDoctorsSchedules);

// STAFF/MANAGER/ADMIN: L·∫•y t·∫•t c·∫£ l·ªãch l√†m vi·ªác c·ªßa t·∫•t c·∫£ b√°c sƒ© (t·∫•t c·∫£ status) - Now with hierarchy
router.get('/schedules/all/staff', verifyToken, requireRole('staff'), doctorScheduleController.getAllDoctorsSchedulesForStaff);

// PUBLIC: T√¨m t·∫•t c·∫£ b√°c sƒ© c√≥ l·ªãch tr·ªëng theo ng√†y/timeSlot (ch·ªâ Free status)
router.get('/available', doctorScheduleController.getAvailableDoctors);

// STAFF/MANAGER/ADMIN: T√¨m t·∫•t c·∫£ b√°c sƒ© v√† slots theo ng√†y (t·∫•t c·∫£ status) - Now with hierarchy
router.get('/available/staff', verifyToken, requireRole('staff'), doctorScheduleController.getAvailableDoctorsForStaff);

// DEBUG: Test schedule creation logic (PUBLIC cho d·ªÖ test)
router.get('/debug/schedule-logic', doctorScheduleController.debugScheduleCreation);

// DEBUG: Real test cho th·ª© 6 - t·∫°o l·ªãch th·∫≠t ƒë·ªÉ verify
router.post('/:id/debug/test-friday', doctorScheduleController.realTestFridaySchedule);

// PUBLIC: Xem l·ªãch b√°c sƒ© (ch·ªâ Free status - ƒë·ªÉ customer ch·ªçn doctor)
router.get('/:id/schedules', doctorScheduleController.getDoctorSchedules);

// PUBLIC: Xem slots tr·ªëng theo ng√†y (ch·ªâ Free status - ƒë·ªÉ customer ch·ªçn gi·ªù)  
router.get('/:id/available-slots', doctorScheduleController.getAvailableSlots);

// STAFF/MANAGER/ADMIN: Xem t·∫•t c·∫£ l·ªãch b√°c sƒ© (t·∫•t c·∫£ status) - Now with hierarchy
router.get('/:id/schedules/staff', verifyToken, requireRole('staff'), doctorScheduleController.getDoctorSchedulesForStaff);

// STAFF/MANAGER/ADMIN: Xem t·∫•t c·∫£ slots theo ng√†y (t·∫•t c·∫£ status) - Now with hierarchy
router.get('/:id/available-slots/staff', verifyToken, requireRole('staff'), doctorScheduleController.getAvailableSlotsForStaff);

// STAFF/MANAGER/ADMIN: L·∫•y th·ªëng k√™ t·∫•t c·∫£ b√°c sƒ© - Now with hierarchy
router.get('/statistics/all', verifyToken, requireRole('staff'), doctorScheduleController.getAllDoctorsStatistics);

// STAFF/MANAGER/ADMIN: L·∫•y th·ªëng k√™ b√°c sƒ© - Now with hierarchy
router.get('/:id/statistics', verifyToken, requireRole('staff'), doctorScheduleController.getDoctorStatistics);

// MANAGER/ADMIN: Book slot cho customer (khi c√≥ cu·ªôc g·ªçi ƒë·∫∑t l·ªãch) - Admin can now access via hierarchy
router.post('/:id/book-slot', verifyToken, requireRole('manager'), doctorScheduleController.bookSlotForCustomer);

// STAFF/MANAGER/ADMIN: T·∫°o l·ªãch cho b√°c sƒ© - Now with hierarchy
router.post('/:id/schedules', verifyToken, requireRole('staff'), doctorScheduleController.createDoctorSchedule);

// STAFF/MANAGER/ADMIN: T·∫°o l·ªãch h√†ng lo·∫°t cho b√°c sƒ© - Now with hierarchy
router.post('/:id/schedules/bulk', verifyToken, requireRole('staff'), doctorScheduleController.createBulkDoctorSchedule);

// MANAGER/ADMIN: T·∫°o l·ªãch h√†ng lo·∫°t cho nhi·ªÅu ng√†y - Admin can now access via hierarchy
router.post('/:id/schedules/bulk-days', verifyToken, requireRole('manager'), doctorScheduleController.createBulkDoctorScheduleForDays);

// MANAGER/ADMIN: T·∫°o l·ªãch h√†ng lo·∫°t cho c·∫£ th√°ng - Admin can now access via hierarchy
router.post('/:id/schedules/bulk-month', verifyToken, requireRole('manager'), doctorScheduleController.createBulkDoctorScheduleForMonth);

// STAFF/MANAGER/ADMIN: C·∫≠p nh·∫≠t booking status - Now with hierarchy
router.put('/:id/schedules', verifyToken, requireRole('staff'), doctorScheduleController.updateDoctorSchedule);

// MANAGER/ADMIN: X√≥a l·ªãch b√°c sƒ© - Admin can now access via hierarchy
router.delete('/:id/schedules/:scheduleId', verifyToken, requireRole('manager'), doctorScheduleController.deleteDoctorSchedule);

export default router;

