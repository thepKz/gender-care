import { Router } from 'express';
import * as doctorController from '../controllers/doctorController';
import * as doctorScheduleController from '../controllers/doctorScheduleController';
import { verifyToken, verifyAdmin, verifyStaff } from '../middleware/auth';
import { roleMiddleware } from '../middleware/roleMiddleware';

const router = Router();

// ===== BASIC DOCTOR CRUD ROUTES =====

// Xem danh s√°ch b√°c sƒ© - t·∫•t c·∫£ m·ªçi ng∆∞·ªùi ƒë·ªÅu ƒë∆∞·ª£c ph√©p (k·ªÉ c·∫£ guest)
router.get('/', doctorController.getAll);

// Xem th√¥ng tin chi ti·∫øt b√°c sƒ© theo ID - ch·ªâ staff/admin ƒë∆∞·ª£c ph√©p (bao g·ªìm contact info)
router.get('/:id', verifyToken, verifyStaff, doctorController.getById);

// T·∫°o b√°c sƒ© m·ªõi - ch·ªâ admin ƒë∆∞·ª£c ph√©p (high privilege operation)
router.post('/', verifyToken, verifyAdmin, doctorController.create);

// C·∫≠p nh·∫≠t th√¥ng tin b√°c sƒ© - staff/admin ƒë∆∞·ª£c ph√©p
router.put('/:id', verifyToken, verifyStaff, doctorController.update);

// X√≥a b√°c sƒ© - ch·ªâ admin ƒë∆∞·ª£c ph√©p (high risk operation)
router.delete('/:id', verifyToken, verifyAdmin, doctorController.remove);

// ===== DOCTOR SCHEDULE ROUTES =====

// ===== PUBLIC ROUTES (kh√¥ng c·∫ßn x√°c th·ª±c) =====

// PUBLIC: L·∫•y t·∫•t c·∫£ l·ªãch l√†m vi·ªác c·ªßa t·∫•t c·∫£ b√°c sƒ© (ch·ªâ Free status)
router.get('/schedules/all', doctorScheduleController.getAllDoctorsSchedules);

// PUBLIC: T√¨m t·∫•t c·∫£ b√°c sƒ© c√≥ l·ªãch tr·ªëng theo ng√†y/timeSlot (ch·ªâ Free status)
router.get('/available', doctorScheduleController.getAvailableDoctors);

// DEBUG: Test schedule creation logic (PUBLIC cho d·ªÖ test)
router.get('/debug/schedule-logic', doctorScheduleController.debugScheduleCreation);

// DEBUG: Real test cho th·ª© 6 - t·∫°o l·ªãch th·∫≠t ƒë·ªÉ verify
router.post('/:id/debug/test-friday', doctorScheduleController.realTestFridaySchedule);

// üî• NEW: Test logic v·ªõi 1 ng√†y c·ª• th·ªÉ
router.get('/debug/test-date', doctorScheduleController.testSingleDate);

// PUBLIC: Xem l·ªãch b√°c sƒ© (ch·ªâ Free status - ƒë·ªÉ customer ch·ªçn doctor)
router.get('/:id/schedules', doctorScheduleController.getDoctorSchedules);

// PUBLIC: Xem slots tr·ªëng theo ng√†y (ch·ªâ Free status - ƒë·ªÉ customer ch·ªçn gi·ªù)  
router.get('/:id/available-slots', doctorScheduleController.getAvailableSlots);

// ===== STAFF/MANAGER/ADMIN ROUTES (c·∫ßn x√°c th·ª±c + staff/manager/admin role) =====

// STAFF/MANAGER/ADMIN: L·∫•y t·∫•t c·∫£ l·ªãch l√†m vi·ªác c·ªßa t·∫•t c·∫£ b√°c sƒ© (t·∫•t c·∫£ status)
router.get('/schedules/all/staff', verifyToken, verifyStaff, doctorScheduleController.getAllDoctorsSchedulesForStaff);

// STAFF/MANAGER/ADMIN: L·∫•y th·ªëng k√™ t·ªïng c·ªßa t·∫•t c·∫£ b√°c sƒ©
router.get('/statistics/all', verifyToken, verifyStaff, doctorScheduleController.getAllDoctorsStatistics);

// STAFF/MANAGER/ADMIN: T√¨m t·∫•t c·∫£ b√°c sƒ© v√† slots theo ng√†y (t·∫•t c·∫£ status)
router.get('/available/staff', verifyToken, verifyStaff, doctorScheduleController.getAvailableDoctorsForStaff);

// STAFF/MANAGER/ADMIN: Xem t·∫•t c·∫£ l·ªãch b√°c sƒ© (t·∫•t c·∫£ status)
router.get('/:id/schedules/staff', verifyToken, verifyStaff, doctorScheduleController.getDoctorSchedulesForStaff);

// STAFF/MANAGER/ADMIN: Xem t·∫•t c·∫£ slots theo ng√†y (t·∫•t c·∫£ status)
router.get('/:id/available-slots/staff', verifyToken, verifyStaff, doctorScheduleController.getAvailableSlotsForStaff);

// STAFF/MANAGER/ADMIN: L·∫•y th·ªëng k√™ b√°c sƒ© (s·ªë slot booked, absent, s·ªë ng√†y ngh·ªâ)
router.get('/:id/statistics', verifyToken, verifyStaff, doctorScheduleController.getDoctorStatistics);

// MANAGER ONLY: Book slot cho customer (khi c√≥ cu·ªôc g·ªçi ƒë·∫∑t l·ªãch)
router.post('/:id/book-slot', verifyToken, roleMiddleware(['manager']), doctorScheduleController.bookSlotForCustomer);

// STAFF/MANAGER/ADMIN: T·∫°o l·ªãch cho b√°c sƒ© (ch·ªâ staff/manager/admin)
router.post('/:id/schedules', verifyToken, verifyStaff, doctorScheduleController.createDoctorSchedule);

// STAFF/MANAGER/ADMIN: T·∫°o l·ªãch h√†ng lo·∫°t cho b√°c sƒ© (nhi·ªÅu ng√†y c√πng l√∫c) - OPTIMIZED
router.post('/:id/schedules/bulk', verifyToken, verifyStaff, doctorScheduleController.createBulkDoctorSchedule);

// MANAGER ONLY: T·∫°o l·ªãch h√†ng lo·∫°t cho nhi·ªÅu ng√†y (BULK CREATION)
router.post('/:id/schedules/bulk-days', verifyToken, roleMiddleware(['manager']), doctorScheduleController.createBulkDoctorScheduleForDays);

// MANAGER ONLY: T·∫°o l·ªãch h√†ng lo·∫°t cho c·∫£ th√°ng - tr·ª´ T7, CN (BULK CREATION)
router.post('/:id/schedules/bulk-month', verifyToken, roleMiddleware(['manager']), doctorScheduleController.createBulkDoctorScheduleForMonth);

// STAFF/MANAGER/ADMIN: C·∫≠p nh·∫≠t booking status (khi customer ƒë·∫∑t l·ªãch)
router.put('/:id/schedules', verifyToken, verifyStaff, doctorScheduleController.updateDoctorSchedule);

// MANAGER ONLY: X√≥a l·ªãch b√°c sƒ© (set t·∫•t c·∫£ slots th√†nh Absent)
router.delete('/:id/schedules/:scheduleId', verifyToken, roleMiddleware(['manager']), doctorScheduleController.deleteDoctorSchedule);

export default router;

