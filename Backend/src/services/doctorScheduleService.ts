import DoctorSchedules from '../models/DoctorSchedules';
import Doctor from '../models/Doctor';
import mongoose from 'mongoose';
import { 
  createVietnamDate, 
  getVietnamDayOfWeek, 
  getVietnamDayName, 
  isWorkingDay, 
  isWeekend,
  getDayInfo,
  generateWorkingDaysInMonth,
  debugMonthWorkingDays 
} from '../utils/timezoneUtils';

// Th√™m function validation ObjectId
const isValidObjectId = (id: string): boolean => {
  return mongoose.Types.ObjectId.isValid(id);
};

// 8 slots c·ªë ƒë·ªãnh cho fulltime doctor
const FIXED_TIME_SLOTS = [
  "07:00-08:00", "08:00-09:00", "09:00-10:00", "10:00-11:00",
  "13:00-14:00", "14:00-15:00", "15:00-16:00", "16:00-17:00"
];

// GET /doctors/schedules/all - L·∫•y t·∫•t c·∫£ l·ªãch l√†m vi·ªác c·ªßa t·∫•t c·∫£ b√°c sƒ© (PUBLIC - ch·ªâ Free)
export const getAllDoctorsSchedules = async (isStaff: boolean = false) => {
  try {
    // L·∫•y t·∫•t c·∫£ schedules c·ªßa t·∫•t c·∫£ doctors
    const allSchedules = await DoctorSchedules.find()
      .populate({
        path: 'doctorId',
        populate: {
          path: 'userId',
          select: 'fullName email avatar'
        },
        select: 'userId bio specialization'
      });

    if (!isStaff) {
      // Public: ch·ªâ show slots c√≥ status = "Free"
      const filteredSchedules = allSchedules.map(schedule => {
        const scheduleObj = JSON.parse(JSON.stringify(schedule));
        return {
          ...scheduleObj,
          weekSchedule: scheduleObj.weekSchedule.map((day: any) => ({
            ...day,
            slots: day.slots.filter((slot: any) => slot.status === "Free")
          }))
        };
      });
      return filteredSchedules;
    }

    return allSchedules; // Staff: show t·∫•t c·∫£
  } catch (error: any) {
    throw new Error(error.message || 'Kh√¥ng th·ªÉ l·∫•y t·∫•t c·∫£ l·ªãch l√†m vi·ªác');
  }
};

// GET /doctors/schedules/all/staff - Staff xem t·∫•t c·∫£ l·ªãch l√†m vi·ªác c·ªßa t·∫•t c·∫£ b√°c sƒ©
export const getAllDoctorsSchedulesForStaff = async () => {
  return await getAllDoctorsSchedules(true);
};

// GET /doctors/:id/schedules - Xem l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ© (PUBLIC - ch·ªâ Free)
export const getDoctorSchedules = async (doctorId: string, isStaff: boolean = false) => {
  try {
    // Ki·ªÉm tra doctor c√≥ t·ªìn t·∫°i kh√¥ng
    const doctor = await Doctor.findById(doctorId);
    if (!doctor) {
      throw new Error('Kh√¥ng t√¨m th·∫•y b√°c sƒ©');
    }

    const schedules = await DoctorSchedules.findOne({ doctorId })
      .populate('doctorId', 'userId bio specialization');

    if (!schedules || !isStaff) {
      // Public: ch·ªâ show slots c√≥ status = "Free"
      if (schedules) {
        const schedulesObj = JSON.parse(JSON.stringify(schedules));
        const filteredSchedules = {
          ...schedulesObj,
          weekSchedule: schedulesObj.weekSchedule.map((day: any) => ({
            ...day,
            slots: day.slots.filter((slot: any) => slot.status === "Free")
          }))
        };
        return filteredSchedules;
      }
    }

    return schedules; // Staff: show t·∫•t c·∫£
  } catch (error: any) {
    throw new Error(error.message || 'Kh√¥ng th·ªÉ l·∫•y l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ©');
  }
};

// GET /doctors/:id/schedules/staff - Staff xem t·∫•t c·∫£ l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ©
export const getDoctorSchedulesForStaff = async (doctorId: string) => {
  return await getDoctorSchedules(doctorId, true);
};

// POST /doctors/:id/schedules - Staff t·∫°o l·ªãch cho b√°c sƒ© theo ng√†y (8 slots c·ªë ƒë·ªãnh)
export const createDoctorSchedule = async (doctorId: string, scheduleData: { date: string }) => {
  try {
    // Ki·ªÉm tra doctor c√≥ t·ªìn t·∫°i kh√¥ng
    const doctor = await Doctor.findById(doctorId);
    if (!doctor) {
      throw new Error('Kh√¥ng t√¨m th·∫•y b√°c sƒ©');
    }

    const { date } = scheduleData;
    if (!date) {
      throw new Error('Vui l√≤ng cung c·∫•p ng√†y l√†m vi·ªác');
    }

    // üî• TIMEZONE FIX: S·ª≠ d·ª•ng centralized timezone utils 
    const dayInfo = getDayInfo(date);
    const workDate = createVietnamDate(date);

    // üîç UNIFIED DEBUG: Log v·ªõi format m·ªõi
    console.log(`üî• [TIMEZONE FIX] Processing date: ${date}`);
    console.log(`üî• [Day Info] ${JSON.stringify(dayInfo, null, 2)}`);

    // üéØ BUSINESS RULE: CH·ªà CHO PH√âP T2-T6 (Monday-Friday)
    if (!isWorkingDay(date)) {
      throw new Error(`üö´ ${dayInfo.reason}: ${date}`);
    }

    console.log(`‚úÖ [SUCCESS] Creating schedule for ${dayInfo.dayName} (${date}) - Working day T2-T6`);

    // T√¨m schedule hi·ªán t·∫°i c·ªßa doctor
    let doctorSchedule = await DoctorSchedules.findOne({ doctorId });

    // T·∫°o 8 slots c·ªë ƒë·ªãnh v·ªõi status: "Free"
    const newDaySchedule = {
      dayOfWeek: workDate,
      slots: FIXED_TIME_SLOTS.map(timeSlot => ({
        slotTime: timeSlot,
        status: "Free"
      }))
    };

    if (!doctorSchedule) {
      // T·∫°o m·ªõi schedule cho doctor
      doctorSchedule = await DoctorSchedules.create({
        doctorId,
        weekSchedule: [newDaySchedule]
      });
    } else {
      // Ki·ªÉm tra xem ng√†y n√†y ƒë√£ c√≥ l·ªãch ch∆∞a
      const existingDay = doctorSchedule.weekSchedule.find(ws => {
        const scheduleDate = new Date(ws.dayOfWeek);
        return scheduleDate.toDateString() === workDate.toDateString();
      });

      if (existingDay) {
        throw new Error('B√°c sƒ© ƒë√£ c√≥ l·ªãch l√†m vi·ªác trong ng√†y n√†y');
      }

      // Th√™m ng√†y m·ªõi v√†o weekSchedule
      doctorSchedule.weekSchedule.push(newDaySchedule as any);
      await doctorSchedule.save();
    }

    return await DoctorSchedules.findById(doctorSchedule._id)
      .populate('doctorId', 'userId bio specialization');
  } catch (error: any) {
    throw new Error(error.message || 'Kh√¥ng th·ªÉ t·∫°o l·ªãch l√†m vi·ªác');
  }
};

// PUT /doctors/:id/schedules - C·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác (v√≠ d·ª•: update slots status)
export const updateDoctorSchedule = async (doctorId: string, updateData: any) => {
  try {
    const { date, slotId, status } = updateData;

    if (!date || !slotId || !status) {
      throw new Error('Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin: date, slotId, status');
    }

    // Validate status value
    const validStatuses = ["Free", "Booked", "Absent"];
    if (!validStatuses.includes(status)) {
      throw new Error('Status kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: Free, Booked, Absent');
    }

    const workDate = new Date(date);

    const doctorSchedule = await DoctorSchedules.findOne({ doctorId });
    if (!doctorSchedule) {
      throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ©');
    }

    // T√¨m ng√†y c·∫ßn update
    const daySchedule = doctorSchedule.weekSchedule.find(ws => {
      const scheduleDate = new Date(ws.dayOfWeek);
      return scheduleDate.toDateString() === workDate.toDateString();
    });

    if (!daySchedule) {
      throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch l√†m vi·ªác trong ng√†y n√†y');
    }

    // Update slot status
    const slot = daySchedule.slots.find((s: any) => s._id.toString() === slotId);
    if (!slot) {
      throw new Error('Kh√¥ng t√¨m th·∫•y slot time n√†y');
    }

    slot.status = status;
    await doctorSchedule.save();

    return doctorSchedule;
  } catch (error: any) {
    throw new Error(error.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác');
  }
};

// DELETE /doctors/:id/schedules/:scheduleId - Set t·∫•t c·∫£ slots trong ng√†y th√†nh "Absent" thay v√¨ x√≥a c·ª©ng
export const deleteDoctorSchedule = async (doctorId: string, scheduleId: string) => {
  try {
    const doctorSchedule = await DoctorSchedules.findOne({ doctorId });

    if (!doctorSchedule) {
      throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ©');
    }

    // T√¨m ng√†y c·∫ßn "x√≥a" (set th√†nh Absent)
    const daySchedule = doctorSchedule.weekSchedule.find((ws: any) => ws._id?.toString() === scheduleId);

    if (!daySchedule) {
      throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch l√†m vi·ªác trong ng√†y n√†y');
    }

    // Set t·∫•t c·∫£ slots trong ng√†y th√†nh "Absent" thay v√¨ x√≥a c·ª©ng
    daySchedule.slots.forEach((slot: any) => {
      slot.status = "Absent";
    });

    await doctorSchedule.save();

    return doctorSchedule;
  } catch (error: any) {
    throw new Error(error.message || 'Kh√¥ng th·ªÉ x√≥a l·ªãch l√†m vi·ªác');
  }
};

// GET /doctors/:id/available-slots?date=YYYY-MM-DD - L·∫•y slots tr·ªëng theo ng√†y (PUBLIC - ch·ªâ Free)
export const getAvailableSlots = async (doctorId: string, date: string, isStaff: boolean = false) => {
  try {
    const targetDate = new Date(date);

    const schedule = await DoctorSchedules.findOne({ doctorId });

    if (!schedule) {
      return [];
    }

    // T√¨m l·ªãch trong ng√†y ƒë∆∞·ª£c y√™u c·∫ßu
    const daySchedule = schedule.weekSchedule.find(ws => {
      const scheduleDate = new Date(ws.dayOfWeek);
      return scheduleDate.toDateString() === targetDate.toDateString();
    });

    if (!daySchedule) {
      return [];
    }

    let availableSlots;
    if (isStaff) {
      // Staff: L·∫•y t·∫•t c·∫£ slots
      availableSlots = daySchedule.slots.map((slot: any) => ({
        slotId: slot._id,
        slotTime: slot.slotTime,
        status: slot.status
      }));
    } else {
      // Public: L·ªçc c√°c slot tr·ªëng (status: "Free")
      availableSlots = daySchedule.slots
        .filter(slot => slot.status === "Free")
        .map((slot: any) => ({
          slotId: slot._id,
          slotTime: slot.slotTime,
          status: slot.status
        }));
    }

    return availableSlots;
  } catch (error: any) {
    throw new Error(error.message || 'Kh√¥ng th·ªÉ l·∫•y slot tr·ªëng');
  }
};

/**
 * Kh√≥a m·ªôt slot c·ª• th·ªÉ (ƒë·∫∑t tr·∫°ng th√°i th√†nh "Booked").
 * @param slotId ID c·ªßa slot c·∫ßn kh√≥a
 * @returns {Promise<boolean>}
 */
export const lockSlot = async (slotId: string): Promise<boolean> => {
    if (!isValidObjectId(slotId)) {
        throw new Error('Slot ID kh√¥ng h·ª£p l·ªá');
    }

    // T√¨m v√† c·∫≠p nh·∫≠t slot trong m·ªôt thao t√°c duy nh·∫•t ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n
    const result = await DoctorSchedules.findOneAndUpdate(
        { 
            "weekSchedule.slots._id": new mongoose.Types.ObjectId(slotId),
            "weekSchedule.slots.status": "Free" // ƒê·∫£m b·∫£o ch·ªâ kh√≥a slot ƒëang "Free"
        },
        { 
            $set: { "weekSchedule.$[].slots.$[slot].status": "Booked" }
        },
        {
            arrayFilters: [
                { "slot._id": new mongoose.Types.ObjectId(slotId) }
            ],
            new: true // Tr·∫£ v·ªÅ document sau khi update
        }
    );

    if (!result) {
        // N·∫øu kh√¥ng t√¨m th·∫•y document n√†o ƒë∆∞·ª£c update, c√≥ th·ªÉ slot kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
        const existingSlot = await DoctorSchedules.findOne({ "weekSchedule.slots._id": new mongoose.Types.ObjectId(slotId) });
        if (!existingSlot) {
            throw new Error('Kh√¥ng t√¨m th·∫•y slot th·ªùi gian n√†y.');
        }
        throw new Error('Slot th·ªùi gian n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ho·∫∑c kh√¥ng c√≥ s·∫µn.');
    }

    console.log(`‚úÖ [Slot Lock] Slot ${slotId} ƒë√£ ƒë∆∞·ª£c kh√≥a th√†nh c√¥ng.`);
    return true;
};

/**
 * M·ªü kh√≥a m·ªôt slot c·ª• th·ªÉ (ƒë·∫∑t tr·∫°ng th√°i th√†nh "Free").
 * @param slotId ID c·ªßa slot c·∫ßn m·ªü kh√≥a
 * @returns {Promise<boolean>}
 */
export const releaseSlot = async (slotId: string): Promise<boolean> => {
    if (!isValidObjectId(slotId)) {
        throw new Error('Slot ID kh√¥ng h·ª£p l·ªá');
    }

    const result = await DoctorSchedules.findOneAndUpdate(
        { "weekSchedule.slots._id": new mongoose.Types.ObjectId(slotId) },
        { 
            $set: { "weekSchedule.$[].slots.$[slot].status": "Free" }
        },
        {
            arrayFilters: [
                { "slot._id": new mongoose.Types.ObjectId(slotId) }
            ],
            new: true
        }
    );

    if (!result) {
        // C√≥ th·ªÉ slot kh√¥ng t·ªìn t·∫°i, nh∆∞ng trong tr∆∞·ªùng h·ª£p n√†y, vi·ªác kh√¥ng t√¨m th·∫•y ƒë·ªÉ release c≈©ng kh√¥ng ph·∫£i l√† l·ªói nghi√™m tr·ªçng
        console.warn(`‚ö†Ô∏è [Slot Release] Kh√¥ng t√¨m th·∫•y slot ${slotId} ƒë·ªÉ m·ªü kh√≥a.`);
        return false;
    }

    console.log(`‚úÖ [Slot Release] Slot ${slotId} ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a th√†nh c√¥ng.`);
    return true;
};

// GET /doctors/:id/available-slots/staff - Staff xem t·∫•t c·∫£ slots theo ng√†y
export const getAvailableSlotsForStaff = async (doctorId: string, date: string) => {
  return await getAvailableSlots(doctorId, date, true);
};

// GET /doctors/available?date=YYYY-MM-DD&timeSlot=07:00-08:00 - T√¨m t·∫•t c·∫£ b√°c sƒ© c√≥ l·ªãch tr·ªëng theo ng√†y/timeSlot (PUBLIC - ch·ªâ Free)
export const getAvailableDoctors = async (date: string, timeSlot?: string, isStaff: boolean = false) => {
  try {
    const targetDate = new Date(date);

    // L·∫•y t·∫•t c·∫£ b√°c sƒ© v·ªõi populate userId
    const allDoctors = await Doctor.find().populate('userId', 'fullName email avatar');

    const availableDoctors: any[] = [];

    for (const doctor of allDoctors) {
      // T√¨m l·ªãch l√†m vi·ªác c·ªßa doctor trong ng√†y ƒë∆∞·ª£c y√™u c·∫ßu
      const schedule = await DoctorSchedules.findOne({ doctorId: doctor._id });

      if (!schedule) {
        continue; // B√°c sƒ© ch∆∞a c√≥ l·ªãch l√†m vi·ªác
      }

      // T√¨m l·ªãch trong ng√†y c·ª• th·ªÉ
      const daySchedule = schedule.weekSchedule.find(ws => {
        const scheduleDate = new Date(ws.dayOfWeek);
        return scheduleDate.toDateString() === targetDate.toDateString();
      });

      if (!daySchedule) {
        continue; // B√°c sƒ© kh√¥ng l√†m vi·ªác trong ng√†y n√†y
      }

      // Ki·ªÉm tra theo timeSlot ho·∫∑c t√¨m b·∫•t k·ª≥ slot n√†o
      let hasAvailableSlots = false;
      let availableSlotsInDay: any[] = [];

      if (timeSlot) {
        // T√¨m slot c·ª• th·ªÉ trong timeSlot
        const specificSlot = daySchedule.slots.find((slot: any) => {
          if (isStaff) {
            return slot.slotTime === timeSlot; // Staff: xem t·∫•t c·∫£ status
          } else {
            return slot.slotTime === timeSlot && slot.status === "Free"; // Public: ch·ªâ Free
          }
        });

        if (specificSlot) {
          hasAvailableSlots = true;
          availableSlotsInDay = [{
            slotId: (specificSlot as any)._id,
            slotTime: specificSlot.slotTime,
            status: specificSlot.status
          }];
        }
      } else {
        // T√¨m t·∫•t c·∫£ slot trong ng√†y
        if (isStaff) {
          // Staff: l·∫•y t·∫•t c·∫£ slots
          availableSlotsInDay = daySchedule.slots.map((slot: any) => ({
            slotId: (slot as any)._id,
            slotTime: slot.slotTime,
            status: slot.status
          }));
          hasAvailableSlots = availableSlotsInDay.length > 0;
        } else {
          // Public: ch·ªâ l·∫•y slot Free
          availableSlotsInDay = daySchedule.slots
            .filter((slot: any) => slot.status === "Free")
            .map((slot: any) => ({
              slotId: (slot as any)._id,
              slotTime: slot.slotTime,
              status: slot.status
            }));
          hasAvailableSlots = availableSlotsInDay.length > 0;
        }
      }

      if (hasAvailableSlots) {
        // Type assertion cho populated userId
        const populatedDoctor = doctor as any;

        availableDoctors.push({
          doctorId: doctor._id,
          doctorInfo: {
            fullName: populatedDoctor.userId.fullName,
            email: populatedDoctor.userId.email,
            avatar: populatedDoctor.userId.avatar,
            specialization: doctor.specialization,
            experience: doctor.experience,
            rating: doctor.rating
          },
          availableSlots: availableSlotsInDay,
          totalAvailableSlots: availableSlotsInDay.length
        });
      }
    }

    return availableDoctors;
  } catch (error: any) {
    throw new Error(error.message || 'Kh√¥ng th·ªÉ t√¨m b√°c sƒ© c√≥ l·ªãch tr·ªëng');
  }
};

// GET /doctors/available/staff - Staff xem t·∫•t c·∫£ b√°c sƒ© v√† slots theo ng√†y
export const getAvailableDoctorsForStaff = async (date: string, timeSlot?: string) => {
  return await getAvailableDoctors(date, timeSlot, true);
};

// PUT /doctors/:id/schedules/absent - ƒê√°nh d·∫•u b√°c sƒ© ngh·ªâ to√†n b·ªô ng√†y
export const setDoctorAbsentForDay = async (doctorId: string, date: string) => {
  try {
    const workDate = new Date(date);

    const doctorSchedule = await DoctorSchedules.findOne({ doctorId });
    if (!doctorSchedule) {
      throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ©');
    }

    // T√¨m ng√†y c·∫ßn update
    const daySchedule = doctorSchedule.weekSchedule.find(ws => {
      const scheduleDate = new Date(ws.dayOfWeek);
      return scheduleDate.toDateString() === workDate.toDateString();
    });

    if (!daySchedule) {
      throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch l√†m vi·ªác trong ng√†y n√†y');
    }

    // Set t·∫•t c·∫£ slots trong ng√†y th√†nh "Absent"
    daySchedule.slots.forEach((slot: any) => {
      slot.status = "Absent";
    });

    await doctorSchedule.save();

    return doctorSchedule;
  } catch (error: any) {
    throw new Error(error.message || 'Kh√¥ng th·ªÉ ƒë√°nh d·∫•u b√°c sƒ© ngh·ªâ');
  }
};

// BULK CREATE: T·∫°o l·ªãch cho nhi·ªÅu ng√†y c·ª• th·ªÉ
export const createBulkDoctorScheduleForDays = async (doctorId: string, dates: string[], overwrite: boolean = false) => {
  try {
    // Validate doctor exists
    const doctor = await Doctor.findById(doctorId);
    if (!doctor) {
      throw new Error('Kh√¥ng t√¨m th·∫•y b√°c sƒ©');
    }

    // Validate dates
    if (!dates || dates.length === 0) {
      throw new Error('Vui l√≤ng cung c·∫•p √≠t nh·∫•t 1 ng√†y ƒë·ªÉ t·∫°o l·ªãch');
    }

    const results = [];
    const errors = [];
    const weekendDates = [];
    const skippedDates = [];
    const overwrittenDates = [];

    for (const dateStr of dates) {
      try {
        // Validate date format - using timezone utils for consistency
        try {
          // This will throw if invalid format or date
          createVietnamDate(dateStr);
        } catch (validateError: any) {
          errors.push(`Ng√†y kh√¥ng h·ª£p l·ªá: ${dateStr} - ${validateError.message}`);
          continue;
        }

        // üî• TIMEZONE FIX: Use centralized timezone utils
        const dayInfo = getDayInfo(dateStr);
        const workDateBulkDays = createVietnamDate(dateStr);

        console.log(`üìÖ BulkDays checking ${dateStr}: ${JSON.stringify(dayInfo, null, 2)}`);

        if (!isWorkingDay(dateStr)) {
          weekendDates.push(dateStr);
          errors.push(`üö´ ${dayInfo.reason}: ${dateStr}`);
          console.log(`üö´ BulkDays skipped ${dateStr} - ${dayInfo.reason}`);
          continue;
        }

        console.log(`‚úÖ BulkDays processing ${dateStr} - ${dayInfo.reason}`);

        // Check if schedule already exists for this date
        const existingSchedule = await DoctorSchedules.findOne({
          doctorId,
          'weekSchedule.dayOfWeek': workDateBulkDays
        });

        if (existingSchedule && !overwrite) {
          skippedDates.push(dateStr);
          errors.push(`L·ªãch l√†m vi·ªác ƒë√£ t·ªìn t·∫°i cho ng√†y ${dateStr}. S·ª≠ d·ª•ng overwrite=true ƒë·ªÉ ghi ƒë√®.`);
          continue;
        }

        if (existingSchedule && overwrite) {
          // Ghi ƒë√®: x√≥a l·ªãch c≈© cho ng√†y n√†y
          await DoctorSchedules.updateOne(
            { doctorId },
            { $pull: { weekSchedule: { dayOfWeek: workDateBulkDays } } }
          );
          overwrittenDates.push(dateStr);
        }

        // Create schedule for this date using existing service
        const newSchedule = await createDoctorSchedule(doctorId, { date: dateStr });
        results.push({
          date: dateStr,
          success: true,
          schedule: newSchedule
        });

      } catch (error: any) {
        errors.push(`L·ªói t·∫°o l·ªãch cho ng√†y ${dateStr}: ${error.message}`);
      }
    }

    return {
      success: results.length > 0,
      totalRequested: dates.length,
      successCount: results.length,
      errorCount: errors.length,
      weekendCount: weekendDates.length,
      skippedCount: skippedDates.length,
      overwrittenCount: overwrittenDates.length,
      results,
      errors,
      weekendDates,
      skippedDates,
      overwrittenDates
    };

  } catch (error: any) {
    throw new Error(error.message || 'Kh√¥ng th·ªÉ t·∫°o l·ªãch cho nhi·ªÅu ng√†y');
  }
};

// BULK CREATE: T·∫°o l·ªãch cho c·∫£ th√°ng (tr·ª´ th·ª© 7, CN) - USING TIMEZONE UTILS
export const createBulkDoctorScheduleForMonth = async (doctorId: string, month: number, year: number, overwrite: boolean = false) => {
  try {
    // Validate doctor exists
    const doctor = await Doctor.findById(doctorId);
    if (!doctor) {
      throw new Error('Kh√¥ng t√¨m th·∫•y b√°c sƒ©');
    }

    // üî• STREAMLINED: Use timezone utils for validation and generation
    const workingDays = generateWorkingDaysInMonth(month, year);
    const monthAnalysis = debugMonthWorkingDays(month, year);

    console.log(`üîç [BULK MONTH] Creating schedule for ${workingDays.length} working days in ${month}/${year}`);
    console.log(`üìä [MONTH ANALYSIS] ${JSON.stringify(monthAnalysis.summary, null, 2)}`);

    // Use the bulk days function with overwrite parameter
    const result = await createBulkDoctorScheduleForDays(doctorId, workingDays, overwrite);

    return {
      ...result,
      month,
      year,
      totalWorkingDays: workingDays.length,
      weekendsExcluded: monthAnalysis.summary.totalWeekends,
      monthAnalysis
    };

  } catch (error: any) {
    throw new Error(error.message || 'Kh√¥ng th·ªÉ t·∫°o l·ªãch cho c·∫£ th√°ng');
  }
};

// POST /doctors/:id/schedules/bulk - Staff t·∫°o l·ªãch cho b√°c sƒ© cho nhi·ªÅu ng√†y c√πng l√∫c
export const createBulkDoctorSchedule = async (doctorId: string, scheduleData: { dates: string[] }) => {
  try {
    // Ki·ªÉm tra doctor c√≥ t·ªìn t·∫°i kh√¥ng
    const doctor = await Doctor.findById(doctorId);
    if (!doctor) {
      throw new Error('Kh√¥ng t√¨m th·∫•y b√°c sƒ©');
    }

    const { dates } = scheduleData;
    if (!dates || !Array.isArray(dates) || dates.length === 0) {
      throw new Error('Vui l√≤ng cung c·∫•p danh s√°ch ng√†y l√†m vi·ªác');
    }

    // Validate t·ªëi ƒëa 31 ng√†y (1 th√°ng) ƒë·ªÉ tr√°nh spam
    if (dates.length > 31) {
      throw new Error('Ch·ªâ c√≥ th·ªÉ t·∫°o t·ªëi ƒëa 31 ng√†y c√πng l√∫c');
    }

    // Validate format ng√†y v√† lo·∫°i b·ªè ng√†y cu·ªëi tu·∫ßn
    const validDates: Date[] = [];
    const invalidDates: string[] = [];
    const weekendDates: string[] = [];

    dates.forEach(dateStr => {
      const workDate = new Date(dateStr);
      if (isNaN(workDate.getTime()) || !dateStr.match(/^\d{4}-\d{2}-\d{2}$/)) {
        invalidDates.push(dateStr);
      } else {
        // üî• TIMEZONE FIX: Local time cho bulk dates
        const [yearBulk, monthBulk, dayBulk] = dateStr.split('-').map(Number);
        const localDateBulk = new Date(yearBulk, monthBulk - 1, dayBulk);
        const dayOfWeekBulk = localDateBulk.getDay();
        const dayNameBulk = localDateBulk.toLocaleDateString('vi-VN', {
          weekday: 'long',
          timeZone: 'Asia/Ho_Chi_Minh'
        });
        const isWeekendBulk = (dayOfWeekBulk === 0) || (dayOfWeekBulk === 6) || (dayNameBulk.includes('Ch·ªß nh·∫≠t')) || (dayNameBulk.includes('Th·ª© B·∫£y'));

        console.log(`üìÖ Bulk checking ${dateStr}: dayOfWeek=${dayOfWeekBulk}, dayName=${dayNameBulk}, isWeekend=${isWeekendBulk}`);

        if (isWeekendBulk) {
          weekendDates.push(dateStr); // T7 v√† CN
          console.log(`üö´ Bulk skipped ${dateStr} (${dayNameBulk}) - Weekend (T7/CN)`);
        } else {
          validDates.push(localDateBulk); // T2-T6 v·ªõi local time
          console.log(`‚úÖ Bulk added ${dateStr} (${dayNameBulk}) to valid dates (T2-T6)`);
        }
      }
    });

    if (invalidDates.length > 0) {
      throw new Error(`Ng√†y kh√¥ng h·ª£p l·ªá: ${invalidDates.join(', ')}. Vui l√≤ng s·ª≠ d·ª•ng format YYYY-MM-DD`);
    }

    // T√¨m schedule hi·ªán t·∫°i c·ªßa doctor
    let doctorSchedule = await DoctorSchedules.findOne({ doctorId });

    const results = {
      successful: 0,
      failed: 0,
      weekendSkipped: weekendDates.length,
      details: {
        created: [] as string[],
        skipped: [] as string[],
        weekendDates: weekendDates,
        errors: [] as { date: string, reason: string }[]
      }
    };

    // X·ª≠ l√Ω t·ª´ng ng√†y (ch·ªâ c√°c ng√†y trong tu·∫ßn)
    for (const workDate of validDates) {
      const dateStr = workDate.toISOString().split('T')[0];

      try {
        // T·∫°o 8 slots c·ªë ƒë·ªãnh v·ªõi status: "Free"
        const newDaySchedule = {
          dayOfWeek: workDate,
          slots: FIXED_TIME_SLOTS.map(timeSlot => ({
            slotTime: timeSlot,
            status: "Free"
          }))
        };

        if (!doctorSchedule) {
          // T·∫°o m·ªõi schedule cho doctor (l·∫ßn ƒë·∫ßu ti√™n)
          doctorSchedule = await DoctorSchedules.create({
            doctorId,
            weekSchedule: [newDaySchedule]
          });
          results.successful++;
          results.details.created.push(dateStr);
        } else {
          // Ki·ªÉm tra xem ng√†y n√†y ƒë√£ c√≥ l·ªãch ch∆∞a
          const existingDay = doctorSchedule.weekSchedule.find(ws => {
            const scheduleDate = new Date(ws.dayOfWeek);
            return scheduleDate.toDateString() === workDate.toDateString();
          });

          if (existingDay) {
            // Ng√†y ƒë√£ t·ªìn t·∫°i, skip
            results.failed++;
            results.details.skipped.push(dateStr);
          } else {
            // Th√™m ng√†y m·ªõi v√†o weekSchedule
            doctorSchedule.weekSchedule.push(newDaySchedule as any);
            results.successful++;
            results.details.created.push(dateStr);
          }
        }
      } catch (error: any) {
        results.failed++;
        results.details.errors.push({
          date: dateStr,
          reason: error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'
        });
      }
    }

    // L∆∞u t·∫•t c·∫£ thay ƒë·ªïi
    if (doctorSchedule && results.successful > 0) {
      await doctorSchedule.save();
    }

    // L·∫•y schedule m·ªõi nh·∫•t ƒë·ªÉ tr·∫£ v·ªÅ
    const finalSchedule = await DoctorSchedules.findById(doctorSchedule?._id)
      .populate('doctorId', 'userId bio specialization');

    return {
      results,
      schedule: finalSchedule
    };

  } catch (error: any) {
    throw new Error(error.message || 'Kh√¥ng th·ªÉ t·∫°o l·ªãch l√†m vi·ªác h√†ng lo·∫°t');
  }
}; 