import mongoose from 'mongoose';
import MedicalRecords from '../models/MedicalRecords';
import TestResults from '../models/TestResults';
import TestResultItems from '../models/TestResultItems';

/**
 * Medical Record Sync Service
 * T·ª± ƒë·ªông t·∫°o medical record t·ª´ appointment "Ho√†n th√†nh k·∫øt qu·∫£"
 */
export class MedicalRecordSyncService {
  
  /**
   * T·ª± ƒë·ªông t·∫°o medical record t·ª´ appointment c√≥ k·∫øt qu·∫£ x√©t nghi·ªám
   * @param appointmentId - ID c·ªßa appointment
   */
  static async syncAppointmentToMedicalRecord(appointmentId: string) {
    try {
      console.log(`üîÑ [MedicalRecordSync] Starting sync for appointment: ${appointmentId}`);
      
      // 1. L·∫•y th√¥ng tin appointment
      const Appointment = mongoose.model('Appointments');
      const appointment = await Appointment.findById(appointmentId)
        .populate('profileId', 'fullName gender phone')
        .populate('doctorId', 'userId')
        .populate({
          path: 'doctorId',
          populate: {
            path: 'userId',
            select: 'fullName email'
          }
        });

      if (!appointment) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y appointment v·ªõi ID: ${appointmentId}`);
      }

      console.log(`‚úÖ [MedicalRecordSync] Found appointment:`, {
        id: appointment._id,
        status: appointment.status,
        profileId: appointment.profileId?._id,
        doctorId: appointment.doctorId?._id
      });

      // 2. Ki·ªÉm tra appointment c√≥ tr·∫°ng th√°i "done_testResult" ho·∫∑c t∆∞∆°ng t·ª±
      const validStatuses = ['done_testResult', 'done_testResultItem', 'completed'];
      if (!validStatuses.includes(appointment.status)) {
        console.log(`‚ö†Ô∏è [MedicalRecordSync] Appointment status not valid for sync: ${appointment.status}`);
        return null;
      }

      // 3. Ki·ªÉm tra ƒë√£ c√≥ medical record ch∆∞a
      const existingRecord = await MedicalRecords.findOne({ appointmentId });
      if (existingRecord) {
        console.log(`‚ÑπÔ∏è [MedicalRecordSync] Medical record already exists: ${existingRecord._id}`);
        return existingRecord;
      }

      // 4. L·∫•y k·∫øt qu·∫£ x√©t nghi·ªám (n·∫øu c√≥)
      const testResults = await TestResults.findOne({ appointmentId });
      const testResultItems = await TestResultItems.findOne({ appointmentId });

      console.log(`üîç [MedicalRecordSync] Test results found:`, {
        testResults: !!testResults,
        testResultItems: !!testResultItems
      });

      // 5. T·∫°o medical record v·ªõi th√¥ng tin t·ª´ appointment v√† test results
      const medicalRecordData = {
        doctorId: appointment.doctorId?._id,
        profileId: appointment.profileId?._id,
        appointmentId: appointment._id,
        conclusion: this.generateConclusionFromTestResults(testResults, testResultItems),
        symptoms: appointment.description || 'Kh√¥ng c√≥ tri·ªáu ch·ª©ng c·ª• th·ªÉ',
        treatment: this.generateTreatmentFromTestResults(testResults, testResultItems),
        notes: `T·ª± ƒë·ªông t·∫°o t·ª´ appointment ${appointmentId} - ${new Date().toISOString()}`,
        status: 'completed'
      };

      const medicalRecord = new MedicalRecords(medicalRecordData);
      await medicalRecord.save();

      // 6. Populate th√¥ng tin ƒë·ªÉ tr·∫£ v·ªÅ
      await medicalRecord.populate([
        { path: 'doctorId', select: 'userId', populate: { path: 'userId', select: 'fullName email' } },
        { path: 'profileId', select: 'fullName gender phone' },
        { path: 'appointmentId', select: 'appointmentDate appointmentTime status' }
      ]);

      console.log(`‚úÖ [MedicalRecordSync] Created medical record: ${medicalRecord._id}`);
      
      return medicalRecord;

    } catch (error) {
      console.error(`‚ùå [MedicalRecordSync] Error syncing appointment ${appointmentId}:`, error);
      throw error;
    }
  }

  /**
   * T·∫°o k·∫øt lu·∫≠n t·ª´ k·∫øt qu·∫£ x√©t nghi·ªám
   */
  private static generateConclusionFromTestResults(testResults: any, testResultItems: any): string {
    if (testResults?.diagnosis) {
      return testResults.diagnosis;
    }
    
    if (testResultItems?.items?.length > 0) {
      const abnormalResults = testResultItems.items.filter((item: any) => 
        item.flag && item.flag !== 'normal'
      );
      
      if (abnormalResults.length > 0) {
        return `Ph√°t hi·ªán ${abnormalResults.length} ch·ªâ s·ªë b·∫•t th∆∞·ªùng c·∫ßn theo d√µi`;
      } else {
        return 'C√°c ch·ªâ s·ªë x√©t nghi·ªám trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng';
      }
    }
    
    return 'ƒê√£ ho√†n th√†nh kh√°m v√† c√≥ k·∫øt qu·∫£';
  }

  /**
   * T·∫°o ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã t·ª´ k·∫øt qu·∫£ x√©t nghi·ªám
   */
  private static generateTreatmentFromTestResults(testResults: any, testResultItems: any): string {
    if (testResults?.recommendations) {
      return testResults.recommendations;
    }
    
    if (testResultItems?.items?.length > 0) {
      const abnormalResults = testResultItems.items.filter((item: any) => 
        item.flag && item.flag !== 'normal'
      );
      
      if (abnormalResults.length > 0) {
        return 'C·∫ßn t√°i kh√°m ƒë·ªÉ theo d√µi c√°c ch·ªâ s·ªë b·∫•t th∆∞·ªùng. Tu√¢n th·ªß ch·∫ø ƒë·ªô ƒÉn u·ªëng v√† sinh ho·∫°t l√†nh m·∫°nh.';
      } else {
        return 'Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh. T√°i kh√°m ƒë·ªãnh k·ª≥ theo l·ªãch.';
      }
    }
    
    return 'Theo d√µi s·ª©c kh·ªèe ƒë·ªãnh k·ª≥';
  }

  /**
   * ƒê·ªìng b·ªô t·∫•t c·∫£ appointments c√≥ tr·∫°ng th√°i "Ho√†n th√†nh k·∫øt qu·∫£" ch∆∞a c√≥ medical record
   */
  static async syncAllCompletedAppointments() {
    try {
      console.log(`üîÑ [MedicalRecordSync] Starting bulk sync for all completed appointments`);
      
      const Appointment = mongoose.model('Appointments');
      const completedAppointments = await Appointment.find({
        status: { $in: ['done_testResult', 'done_testResultItem', 'completed'] }
      });

      console.log(`üìä [MedicalRecordSync] Found ${completedAppointments.length} completed appointments`);

      const results = [];
      for (const appointment of completedAppointments) {
        try {
          const medicalRecord = await this.syncAppointmentToMedicalRecord(appointment._id.toString());
          if (medicalRecord) {
            results.push({
              appointmentId: appointment._id,
              medicalRecordId: medicalRecord._id,
              status: 'success'
            });
          }
        } catch (error) {
          console.error(`‚ùå [MedicalRecordSync] Failed to sync appointment ${appointment._id}:`, error);
          results.push({
            appointmentId: appointment._id,
            status: 'error',
            error: (error as Error).message || 'Unknown error'
          });
        }
      }

      console.log(`‚úÖ [MedicalRecordSync] Bulk sync completed. Results:`, {
        total: results.length,
        success: results.filter(r => r.status === 'success').length,
        errors: results.filter(r => r.status === 'error').length
      });

      return results;

    } catch (error) {
      console.error(`‚ùå [MedicalRecordSync] Error in bulk sync:`, error);
      throw error;
    }
  }
}

export default MedicalRecordSyncService;
