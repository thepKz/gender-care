import { MenstrualCycles, CycleDays, MenstrualCycleReports } from '../models';
import { MUCUS_FEELING_RULES } from '../models/CycleSymptoms';

export interface CreateCycleDayData {
    cycleId: string;
    date: Date;
    mucusObservation?: string;
    feeling?: string;
    notes?: string;
}

class MenstrualCycleService {
    async createCycle(userId: string, startDate: Date): Promise<any> {
        const lastCycle = await MenstrualCycles.findOne({ createdByUserId: userId }).sort({ cycleNumber: -1 });
        const cycleNumber = lastCycle ? lastCycle.cycleNumber + 1 : 1;

        return await MenstrualCycles.create({
            createdByUserId: userId,
            startDate,
            cycleNumber,
            status: 'tracking'
        });
    }

    async createOrUpdateCycleDay(data: CreateCycleDayData): Promise<any> {
        const { cycleId, date, mucusObservation, feeling, notes } = data;

        // Validation n√¢ng cao tr∆∞·ªõc khi l∆∞u
        const validation = await this.validateCycleDayInput(cycleId, date, mucusObservation, feeling);

        // N·∫øu c√≥ l·ªói nghi√™m tr·ªçng, t·ª´ ch·ªëi l∆∞u
        if (!validation.isValid && validation.errors.some(e => e.includes('Ng√†y ƒë·ªânh ƒë√£ t·ªìn t·∫°i'))) {
            throw new Error(`Validation failed: ${validation.errors.join('; ')}`);
        }

        let cycleDay = await CycleDays.findOne({ cycleId, date });

        if (cycleDay) {
            cycleDay.mucusObservation = mucusObservation;
            cycleDay.feeling = feeling;
            cycleDay.notes = notes;
        } else {
            const cycle = await MenstrualCycles.findById(cycleId);
            if (!cycle) throw new Error('Cycle not found');

            const diffTime = date.getTime() - cycle.startDate.getTime();
            let cycleDayNumber = Math.floor(diffTime / (1000 * 60 * 60 * 24)) + 1;

            // ƒê·∫£m b·∫£o cycleDayNumber lu√¥n >= 1
            // N·∫øu ng√†y ƒë∆∞·ª£c ch·ªçn tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu chu k·ª≥, c√≥ th·ªÉ ƒë√¢y l√† tr∆∞·ªùng h·ª£p c·∫ßn c·∫≠p nh·∫≠t ng√†y b·∫Øt ƒë·∫ßu
            if (cycleDayNumber < 1) {
                // N·∫øu ƒë√¢y l√† ng√†y c√≥ m√°u kinh nguy·ªát v√† tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu hi·ªán t·∫°i
                if (mucusObservation === 'c√≥ m√°u' || mucusObservation === 'l·∫•m t·∫•m m√°u') {
                    // C·∫≠p nh·∫≠t ng√†y b·∫Øt ƒë·∫ßu chu k·ª≥ v·ªÅ ng√†y n√†y
                    cycle.startDate = date;
                    await cycle.save();

                    // T√≠nh to√°n l·∫°i cycleDayNumber = 1 cho ng√†y n√†y
                    cycleDayNumber = 1;

                    // C·∫≠p nh·∫≠t l·∫°i t·∫•t c·∫£ c√°c ng√†y kh√°c trong chu k·ª≥
                    await this.recalculateAllCycleDays(cycleId, date);
                } else {
                    // N·∫øu kh√¥ng ph·∫£i ng√†y c√≥ m√°u, set cycleDayNumber = 1 ƒë·ªÉ tr√°nh l·ªói validation
                    cycleDayNumber = 1;
                }
            }

            cycleDay = new CycleDays({
                cycleId,
                date,
                mucusObservation,
                feeling,
                notes,
                cycleDayNumber,
                month: date.getMonth() + 1,
                year: date.getFullYear()
            });
        }

        await cycleDay.save();

        // ƒê√°nh d·∫•u ng√†y ƒë·ªânh
        if (mucusObservation === 'trong v√† √¢m h·ªô cƒÉng' && feeling === 'tr∆°n') {
            cycleDay.isPeakDay = true;
            cycleDay.fertilityProbability = 100;
            await cycleDay.save();
        }

        // ‚ú® LOGIC M·ªöI: T·ª± ƒë·ªông ph√°t hi·ªán chu k·ª≥ m·ªõi khi c√≥ m√°u sau chu k·ª≥ ho√†n th√†nh
        if (mucusObservation === 'c√≥ m√°u') {
            console.log(`ü©∏ [AUTO-CYCLE] Ph√°t hi·ªán m√°u m·ªõi ng√†y ${date.toISOString().split('T')[0]}, ki·ªÉm tra ƒëi·ªÅu ki·ªán t·∫°o chu k·ª≥ m·ªõi...`);
            const shouldCreateNewCycle = await this.checkForNewCycleCreation(cycleId, date);
            console.log(`üîç [AUTO-CYCLE] K·∫øt qu·∫£ ki·ªÉm tra:`, shouldCreateNewCycle);

            if (shouldCreateNewCycle.shouldCreate) {
                // Ho√†n th√†nh chu k·ª≥ c≈©
                const oldCycle = await MenstrualCycles.findById(cycleId);
                if (oldCycle && !oldCycle.isCompleted) {
                    oldCycle.isCompleted = true;
                    oldCycle.status = 'completed';
                    oldCycle.endDate = shouldCreateNewCycle.endDate;
                    if (shouldCreateNewCycle.peakDay) {
                        oldCycle.peakDay = shouldCreateNewCycle.peakDay;
                    }
                    await oldCycle.save();
                }

                // T·∫°o chu k·ª≥ m·ªõi
                const newCycle = await this.createCycle(oldCycle!.createdByUserId.toString(), date);

                // Chuy·ªÉn cycle day n√†y sang chu k·ª≥ m·ªõi
                cycleDay.cycleId = newCycle._id;
                cycleDay.cycleDayNumber = 1; // ƒê√¢y l√† ng√†y ƒë·∫ßu c·ªßa chu k·ª≥ m·ªõi
                await cycleDay.save();

                return {
                    cycleDay,
                    newCycleCreated: true,
                    oldCycleId: cycleId,
                    newCycleId: newCycle._id,
                    completedCycle: oldCycle,
                    newCycle: newCycle
                };
            }
        }

        return {
            cycleDay,
            validation: validation
        };
    }

    /**
     * Ki·ªÉm tra xem c√≥ n√™n t·∫°o chu k·ª≥ m·ªõi kh√¥ng khi ph√°t hi·ªán m√°u
     */
    private async checkForNewCycleCreation(currentCycleId: string, bloodDate: Date): Promise<{
        shouldCreate: boolean;
        endDate?: Date;
        peakDay?: Date;
        reason?: string;
    }> {
        try {
            // Ph√¢n t√≠ch chu k·ª≥ hi·ªán t·∫°i
            const analysis = await this.analyzeCycleCompletion(currentCycleId);

            // L·∫•y t·∫•t c·∫£ cycle days ƒë·ªÉ ph√¢n t√≠ch
            const cycleDays = await CycleDays.find({ cycleId: currentCycleId })
                .sort({ date: 1 })
                .lean();

            if (cycleDays.length === 0) {
                return { shouldCreate: false, reason: 'Kh√¥ng c√≥ d·ªØ li·ªáu chu k·ª≥' };
            }

            // T√¨m ng√†y ƒë·ªânh - ki·ªÉm tra c·∫£ isPeakDay v√† mucusObservation
            const peakDay = cycleDays.find(day =>
                day.mucusObservation === 'trong v√† √¢m h·ªô cƒÉng' || day.isPeakDay === true
            );

            console.log(`üîç [AUTO-CYCLE] T√¨m ng√†y ƒë·ªânh trong ${cycleDays.length} ng√†y:`,
                cycleDays.map(d => ({
                    date: d.date.toISOString().split('T')[0],
                    mucus: d.mucusObservation,
                    feeling: d.feeling,
                    isPeakDay: d.isPeakDay
                }))
            );

            if (!peakDay) {
                return { shouldCreate: false, reason: 'Ch∆∞a c√≥ ng√†y ƒë·ªânh (ki·ªÉm tra c·∫£ mucusObservation v√† isPeakDay)' };
            }

            console.log(`‚úÖ [AUTO-CYCLE] ƒê√£ t√¨m th·∫•y ng√†y ƒë·ªânh: ${peakDay.date.toISOString().split('T')[0]}`);


            // Ki·ªÉm tra xem ƒë√£ c√≥ √≠t nh·∫•t 3 ng√†y sau ƒë·ªânh ch∆∞a
            const postPeakDays = cycleDays.filter(day =>
                day.date.getTime() > peakDay.date.getTime()
            ).sort((a, b) => a.date.getTime() - b.date.getTime());

            if (postPeakDays.length < 3) {
                return { shouldCreate: false, reason: 'Ch∆∞a ƒë·ªß 3 ng√†y sau ƒë·ªânh' };
            }

            // Ki·ªÉm tra 3 ng√†y sau ƒë·ªânh c√≥ kh√¥ kh√¥ng
            const first3PostPeakDays = postPeakDays.slice(0, 3);
            console.log(`üîç [AUTO-CYCLE] Ki·ªÉm tra 3 ng√†y sau ƒë·ªânh:`,
                first3PostPeakDays.map(d => ({
                    date: d.date.toISOString().split('T')[0],
                    mucus: d.mucusObservation,
                    feeling: d.feeling,
                    isDry: this.isDryDay(d.feeling, d.mucusObservation)
                }))
            );

            const hasAllDryDays = first3PostPeakDays.every(day =>
                this.isDryDay(day.feeling, day.mucusObservation)
            );

            if (!hasAllDryDays) {
                const notDryDays = first3PostPeakDays.filter(day => !this.isDryDay(day.feeling, day.mucusObservation));
                return {
                    shouldCreate: false,
                    reason: `3 ng√†y sau ƒë·ªânh ch∆∞a ho√†n to√†n kh√¥. Ng√†y ch∆∞a kh√¥: ${notDryDays.map(d => d.date.toISOString().split('T')[0]).join(', ')}`
                };
            }

            console.log(`‚úÖ [AUTO-CYCLE] 3 ng√†y sau ƒë·ªânh ƒë·ªÅu kh√¥`);


            // Ki·ªÉm tra ng√†y m√°u m·ªõi c√≥ sau 3 ng√†y kh√¥ kh√¥ng
            const day3AfterPeak = first3PostPeakDays[2];
            if (bloodDate.getTime() <= day3AfterPeak.date.getTime()) {
                return { shouldCreate: false, reason: 'M√°u xu·∫•t hi·ªán tr∆∞·ªõc khi ho√†n th√†nh 3 ng√†y kh√¥' };
            }

            // Ki·ªÉm tra c√≥ kho·∫£ng c√°ch h·ª£p l√Ω kh√¥ng (√≠t nh·∫•t 1 ng√†y sau ng√†y kh√¥ th·ª© 3)
            const daysSinceLastDry = Math.ceil((bloodDate.getTime() - day3AfterPeak.date.getTime()) / (24 * 60 * 60 * 1000));
            if (daysSinceLastDry < 1) {
                return { shouldCreate: false, reason: 'C·∫ßn c√≥ √≠t nh·∫•t 1 ng√†y kho·∫£ng c√°ch sau ng√†y kh√¥ th·ª© 3' };
            }

            // ‚úÖ ƒê·ªß ƒëi·ªÅu ki·ªán t·∫°o chu k·ª≥ m·ªõi
            // Ng√†y k·∫øt th√∫c chu k·ª≥ c≈© = ng√†y tr∆∞·ªõc khi c√≥ m√°u m·ªõi
            const endDate = new Date(bloodDate);
            endDate.setDate(endDate.getDate() - 1);

            return {
                shouldCreate: true,
                endDate: endDate,
                peakDay: peakDay.date,
                reason: 'Chu k·ª≥ ƒë√£ ho√†n th√†nh ƒë·ªß ƒëi·ªÅu ki·ªán v√† c√≥ m√°u m·ªõi xu·∫•t hi·ªán'
            };

        } catch (error) {
            console.error('Error checking for new cycle creation:', error);
            return { shouldCreate: false, reason: 'L·ªói khi ph√¢n t√≠ch chu k·ª≥' };
        }
    }

    /**
     * T√≠nh to√°n l·∫°i cycleDayNumber cho t·∫•t c·∫£ ng√†y trong chu k·ª≥
     */
    async recalculateAllCycleDays(cycleId: string, newStartDate: Date): Promise<void> {
        try {
            const cycleDays = await CycleDays.find({ cycleId });

            const bulkOps = cycleDays.map(day => {
                const diffTime = day.date.getTime() - newStartDate.getTime();
                const newCycleDayNumber = Math.floor(diffTime / (1000 * 60 * 60 * 24)) + 1;

                return {
                    updateOne: {
                        filter: { _id: day._id },
                        update: {
                            cycleDayNumber: Math.max(newCycleDayNumber, 1) // ƒê·∫£m b·∫£o >= 1
                        }
                    }
                };
            });

            if (bulkOps.length > 0) {
                await CycleDays.bulkWrite(bulkOps);
            }

            console.log(`‚úÖ Recalculated ${bulkOps.length} cycle days for cycle ${cycleId}`);
        } catch (error) {
            console.error('Error in recalculateAllCycleDays:', error);
            throw error;
        }
    }

    async generateCycleReport(cycleId: string): Promise<any> {
        return { message: 'Report generation not implemented yet', cycleId };
    }

    async compareThreeCycles(userId: string): Promise<any> {
        return { message: 'Cycle comparison not implemented yet', userId };
    }

    async getCalendarData(userId: string, month: number, year: number): Promise<any> {
        // L·∫•y t·∫•t c·∫£ cycle days c·ªßa user trong th√°ng
        const cycleDays = await CycleDays.find({
            month,
            year
        }).populate({
            path: 'cycleId',
            match: { createdByUserId: userId }
        }).sort({ date: 1 });

        // Filter ch·ªâ l·∫•y days thu·ªôc v·ªÅ user
        const userCycleDays = cycleDays.filter(day => day.cycleId);

        return userCycleDays.map(day => {
            let symbol = '';
            let color = '';
            let description = '';

            // Logic t·∫°o symbols theo ph∆∞∆°ng ph√°p Billings
            if (day.mucusObservation === 'c√≥ m√°u' || day.mucusObservation === 'l·∫•m t·∫•m m√°u') {
                symbol = 'M';
                color = '#e53935'; // ƒê·ªè cho kinh nguy·ªát
                description = 'Kinh nguy·ªát';
            } else if (day.isPeakDay) {
                symbol = 'X';
                color = '#ff9800'; // Cam cho ng√†y ƒë·ªânh
                description = 'Ng√†y ƒë·ªânh';
            } else if (day.peakDayRelative === 1) {
                symbol = '1';
                color = '#fdd835'; // V√†ng cho ng√†y 1 sau ƒë·ªânh
                description = 'Ng√†y 1 sau ƒë·ªânh (75%)';
            } else if (day.peakDayRelative === 2) {
                symbol = '2';
                color = '#66bb6a'; // Xanh l√° cho ng√†y 2 sau ƒë·ªânh
                description = 'Ng√†y 2 sau ƒë·ªânh (50%)';
            } else if (day.peakDayRelative === 3) {
                symbol = '3';
                color = '#42a5f5'; // Xanh d∆∞∆°ng cho ng√†y 3 sau ƒë·ªânh
                description = 'Ng√†y 3 sau ƒë·ªânh (20%)';
            } else if (day.mucusObservation === 'ƒë·ª•c' || day.mucusObservation === 'ƒë·ª•c nhi·ªÅu s·ª£i' || day.mucusObservation === 'trong nhi·ªÅu s·ª£i') {
                symbol = 'C';
                color = '#ab47bc'; // T√≠m cho c√≥ th·ªÉ th·ª• thai
                description = 'C√≥ th·ªÉ th·ª• thai';
            } else if (this.isDryDay(day.feeling, day.mucusObservation)) {
                symbol = 'D';
                color = '#78909c'; // X√°m cho kh√¥
                description = 'Kh√¥';
            } else {
                symbol = 'S';
                color = '#26c6da'; // Xanh nh·∫°t cho an to√†n
                description = 'An to√†n';
            }

            return {
                date: day.date.toISOString().split('T')[0], // YYYY-MM-DD format
                symbol,
                color,
                description,
                isPeakDay: day.isPeakDay || false,
                fertilityProbability: day.fertilityProbability || 0,
                cycleDay: {
                    _id: day._id,
                    mucusObservation: day.mucusObservation,
                    feeling: day.feeling,
                    notes: day.notes,
                    cycleDayNumber: day.cycleDayNumber,
                    isAutoGenerated: day.isAutoGenerated || false
                }
            };
        });
    }

    /**
     * Ph√¢n t√≠ch chu k·ª≥ ho√†n ch·ªânh theo ph∆∞∆°ng ph√°p Billings
     * @param cycleId ID c·ªßa chu k·ª≥ c·∫ßn ph√¢n t√≠ch
     */
    async analyzeCycleCompletion(cycleId: string): Promise<any> {
        try {
            // L·∫•y t·∫•t c·∫£ cycle days c·ªßa chu k·ª≥, s·∫Øp x·∫øp theo ng√†y
            const cycleDays = await CycleDays.find({ cycleId })
                .sort({ date: 1 })
                .lean();

            if (cycleDays.length === 0) {
                return {
                    isComplete: false,
                    analysis: 'Ch∆∞a c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c ghi nh·∫≠n',
                    phase: 'no_data'
                };
            }

            // T√¨m c√°c ng√†y quan tr·ªçng
            const bloodDays = cycleDays.filter(day =>
                day.mucusObservation === 'c√≥ m√°u'
            );

            const spottingDays = cycleDays.filter(day =>
                day.mucusObservation === 'l·∫•m t·∫•m m√°u'
            );

            const peakDays = cycleDays.filter(day =>
                day.mucusObservation === 'trong v√† √¢m h·ªô cƒÉng'
            );

            const dryDays = cycleDays.filter(day =>
                this.isDryDay(day.feeling, day.mucusObservation)
            );

            // X√°c ƒë·ªãnh ng√†y ƒë·ªânh (peak day)
            const peakDay = peakDays.length > 0 ? peakDays[peakDays.length - 1] : null;

            // Ph√¢n t√≠ch m·∫´u chu k·ª≥
            const pattern = this.identifyCyclePattern(cycleDays);

            // Ki·ªÉm tra chu k·ª≥ ho√†n ch·ªânh theo ph∆∞∆°ng ph√°p Billings ch√≠nh x√°c
            const completionCheck = this.checkCycleCompletion(cycleDays, pattern);

            return {
                isComplete: completionCheck.isComplete,
                analysis: completionCheck.analysis,
                phase: completionCheck.phase,
                peakDay: peakDay ? {
                    date: peakDay.date,
                    cycleDayNumber: peakDay.cycleDayNumber
                } : null,
                pattern: pattern,
                nextPeakPrediction: this.predictNextPeak(peakDay, cycleDays),
                recommendations: this.generateRecommendations(pattern, cycleDays)
            };
        } catch (error) {
            console.error('Error analyzing cycle completion:', error);
            throw error;
        }
    }

    /**
     * X√°c ƒë·ªãnh m·∫´u chu k·ª≥ (Pattern Recognition)
     */
    private identifyCyclePattern(cycleDays: any[]): any {
        const sequence = cycleDays.map(day => day.mucusObservation).filter(obs => obs);

        // Tr∆∞·ªùng h·ª£p 1: M√°u ‚Üí L·∫•m t·∫•m m√°u ‚Üí Kh√¥ ‚Üí ƒê·ª•c ‚Üí Trong √¢m h·ªô cƒÉng
        const hasBlood = sequence.includes('c√≥ m√°u');
        const hasSpotting = sequence.includes('l·∫•m t·∫•m m√°u');
        const hasDry = sequence.includes('√≠t ch·∫•t ti·∫øt') || cycleDays.some(d => d.feeling === 'kh√¥');
        const hasCloudy = sequence.includes('ƒë·ª•c');
        const hasPeak = sequence.includes('trong v√† √¢m h·ªô cƒÉng');

        if (hasBlood && hasSpotting && hasDry && hasCloudy && hasPeak) {
            return {
                type: 'normal_pattern',
                name: 'Chu k·ª≥ b√¨nh th∆∞·ªùng',
                description: 'M√°u ‚Üí L·∫•m t·∫•m m√°u ‚Üí Kh√¥ ‚Üí ƒê·ª•c ‚Üí Trong √¢m h·ªô cƒÉng',
                confidence: 'high'
            };
        }

        // Tr∆∞·ªùng h·ª£p 2: L·∫•m t·∫•m m√°u ‚Üí √çt ch·∫•t ti·∫øt
        if (hasSpotting && !hasBlood && (hasDry || sequence.includes('√≠t ch·∫•t ti·∫øt'))) {
            return {
                type: 'irregular_pattern',
                name: 'Chu k·ª≥ c·∫ßn theo d√µi',
                description: 'L·∫•m t·∫•m m√°u ‚Üí √çt ch·∫•t ti·∫øt',
                confidence: 'low',
                needsMoreObservation: true
            };
        }

        // C√°c tr∆∞·ªùng h·ª£p kh√°c
        return {
            type: 'unknown_pattern',
            name: 'M·∫´u ch∆∞a r√µ r√†ng',
            description: 'C·∫ßn th√™m d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch',
            confidence: 'unknown'
        };
    }

    /**
     * Ki·ªÉm tra chu k·ª≥ c√≥ ho√†n ch·ªânh kh√¥ng theo ph∆∞∆°ng ph√°p Billings ch√≠nh x√°c
     * 
     * ƒê·ªãnh nghƒ©a chu k·ª≥ ho√†n ch·ªânh:
     * 1. B·∫Øt ƒë·∫ßu: C·∫£m gi√°c ch·∫•t nh·ªùn l√† m√°u (c√≥ m√°u)
     * 2. T√πy ch·ªçn: L·∫•m t·∫•m m√°u  
     * 3. Ng√†y ƒë·ªânh: C·∫£m gi√°c ch·∫•t nh·ªùn l√† trong v√† √¢m h·ªô cƒÉng
     * 4. K·∫øt th√∫c: C·∫£m gi√°c ch·∫•t nh·ªùn l√† kh√¥ (sau √≠t nh·∫•t 3 ng√†y sau ƒë·ªânh)
     * 
     * Tr∆∞·ªùng h·ª£p 1: T·∫•t c·∫£ di·ªÖn ra trong 1 th√°ng (sau ng√†y 1,2,3 sau ng√†y ƒë·ªânh l√† kh√¥ ‚Üí c√≥ m√°u m·ªõi)
     * Tr∆∞·ªùng h·ª£p 2: L·∫•n sang th√°ng sau (sau ng√†y 1,2,3 sau ng√†y ƒë·ªânh v·∫´n √≠t ch·∫•t ti·∫øt ch∆∞a chuy·ªÉn sang kh√¥)
     */
    private checkCycleCompletion(cycleDays: any[], pattern: any): any {
        const sequence = cycleDays.map(day => ({
            date: new Date(day.date),
            mucus: day.mucusObservation,
            feeling: day.feeling,
            dayNumber: day.cycleDayNumber,
            month: day.month,
            year: day.year
        })).sort((a, b) => a.date.getTime() - b.date.getTime());

        // B∆∞·ªõc 1: T√¨m ng√†y b·∫Øt ƒë·∫ßu c√≥ m√°u kinh nguy·ªát
        const bloodDays = sequence.filter(day => day.mucus === 'c√≥ m√°u');
        const firstBloodDay = bloodDays.length > 0 ? bloodDays[0] : null;

        // B∆∞·ªõc 2: T√¨m ng√†y ƒë·ªânh (trong v√† √¢m h·ªô cƒÉng)
        const peakDays = sequence.filter(day => day.mucus === 'trong v√† √¢m h·ªô cƒÉng');
        const peakDay = peakDays.length > 0 ? peakDays[peakDays.length - 1] : null; // L·∫•y ng√†y ƒë·ªânh cu·ªëi c√πng

        if (!firstBloodDay) {
            return {
                isComplete: false,
                phase: 'waiting_for_menstruation',
                analysis: 'Ch∆∞a ghi nh·∫≠n ng√†y ƒë·∫ßu kinh nguy·ªát. H√£y ghi nh·∫≠n khi c√≥ m√°u kinh nguy·ªát.'
            };
        }

        if (!peakDay) {
            return {
                isComplete: false,
                phase: 'pre_peak_tracking',
                analysis: 'ƒê√£ c√≥ kinh nguy·ªát, ƒëang ch·ªù ng√†y ƒë·ªânh (c·∫£m gi√°c ch·∫•t nh·ªùn l√† trong v√† √¢m h·ªô cƒÉng).'
            };
        }

        // B∆∞·ªõc 3: Ph√¢n t√≠ch giai ƒëo·∫°n sau ng√†y ƒë·ªânh
        const postPeakDays = sequence.filter(day =>
            day.date.getTime() > peakDay.date.getTime()
        ).sort((a, b) => a.date.getTime() - b.date.getTime());

        // T√¨m 3 ng√†y li√™n ti·∫øp sau ng√†y ƒë·ªânh
        const dayAfterPeak1 = postPeakDays.find(day =>
            Math.abs(day.date.getTime() - peakDay.date.getTime()) <= 24 * 60 * 60 * 1000 * 1.5 &&
            day.date.getTime() > peakDay.date.getTime()
        );

        const dayAfterPeak2 = postPeakDays.find(day =>
            dayAfterPeak1 && Math.abs(day.date.getTime() - dayAfterPeak1.date.getTime()) <= 24 * 60 * 60 * 1000 * 1.5 &&
            day.date.getTime() > dayAfterPeak1.date.getTime()
        );

        const dayAfterPeak3 = postPeakDays.find(day =>
            dayAfterPeak2 && Math.abs(day.date.getTime() - dayAfterPeak2.date.getTime()) <= 24 * 60 * 60 * 1.5 &&
            day.date.getTime() > dayAfterPeak2.date.getTime()
        );

        // Ki·ªÉm tra xem c√≥ ƒë·ªß 3 ng√†y sau ƒë·ªânh kh√¥ng
        if (!dayAfterPeak1 || !dayAfterPeak2 || !dayAfterPeak3) {
            const existingDays = [dayAfterPeak1, dayAfterPeak2, dayAfterPeak3].filter(d => d).length;
            return {
                isComplete: false,
                phase: 'post_peak_tracking',
                analysis: `ƒê√£ qua ng√†y ƒë·ªânh (${peakDay.date.toLocaleDateString('vi-VN')}). C·∫ßn theo d√µi th√™m ${3 - existingDays} ng√†y ƒë·ªÉ ho√†n th√†nh chu k·ª≥.`,
                peakDay: peakDay,
                nextRequiredDays: 3 - existingDays
            };
        }

        // B∆∞·ªõc 4: Ki·ªÉm tra tr·∫°ng th√°i 3 ng√†y sau ƒë·ªânh
        const postPeakStatus = [dayAfterPeak1, dayAfterPeak2, dayAfterPeak3].map(day => ({
            date: day.date,
            isDry: this.isDryDay(day.feeling, day.mucus),
            mucus: day.mucus,
            feeling: day.feeling,
            month: day.month
        }));

        // Ki·ªÉm tra ng√†y th·ª© 3 sau ƒë·ªânh c√≥ kh√¥ kh√¥ng
        const day3AfterPeak = postPeakStatus[2];
        const isDay3Dry = day3AfterPeak.isDry;

        if (isDay3Dry) {
            // TR∆Ø·ªúNG H·ª¢P 1: Ng√†y 3 sau ƒë·ªânh ƒë√£ kh√¥
            // Ki·ªÉm tra xem c√≥ m√°u m·ªõi (chu k·ª≥ ti·∫øp theo) xu·∫•t hi·ªán kh√¥ng
            const daysAfterDay3 = sequence.filter(day =>
                day.date.getTime() > day3AfterPeak.date.getTime()
            );

            const nextBloodDay = daysAfterDay3.find(day => day.mucus === 'c√≥ m√°u');

            if (nextBloodDay) {
                // C√≥ m√°u m·ªõi xu·∫•t hi·ªán ‚Üí Chu k·ª≥ ho√†n ch·ªânh (Tr∆∞·ªùng h·ª£p 1)
                const cycleLength = Math.ceil((nextBloodDay.date.getTime() - firstBloodDay.date.getTime()) / (24 * 60 * 60 * 1000));

                return {
                    isComplete: true,
                    phase: 'completed_case_1',
                    analysis: `Chu k·ª≥ ho√†n ch·ªânh (Tr∆∞·ªùng h·ª£p 1 - trong c√πng th√°ng). Ng√†y ƒë·ªânh: ${peakDay.date.toLocaleDateString('vi-VN')}. Chu k·ª≥ d√†i ${cycleLength} ng√†y. Ng√†y 3 sau ƒë·ªânh ƒë√£ kh√¥ v√† c√≥ m√°u m·ªõi xu·∫•t hi·ªán.`,
                    cycleType: 'same_month_completion',
                    peakDay: peakDay,
                    cycleLength: cycleLength,
                    nextCycleStart: nextBloodDay.date
                };
            } else {
                // Ch∆∞a c√≥ m√°u m·ªõi, c·∫ßn ch·ªù th√™m ƒë·ªÉ x√°c ƒë·ªãnh
                return {
                    isComplete: false,
                    phase: 'waiting_for_next_menstruation',
                    analysis: `ƒê√£ qua ng√†y ƒë·ªânh v√† 3 ng√†y sau ƒë·ªânh ƒë√£ kh√¥. ƒêang ch·ªù kinh nguy·ªát chu k·ª≥ ti·∫øp theo ƒë·ªÉ ho√†n th√†nh chu k·ª≥ hi·ªán t·∫°i.`,
                    peakDay: peakDay,
                    postPeakDryDays: 3,
                    waitingFor: 'next_menstruation'
                };
            }
        } else {
            // TR∆Ø·ªúNG H·ª¢P 2: Ng√†y 3 sau ƒë·ªânh v·∫´n ch∆∞a kh√¥ (√≠t ch·∫•t ti·∫øt)
            // Ki·ªÉm tra xem c√≥ l·∫•n sang th√°ng sau kh√¥ng
            const day3Month = day3AfterPeak.month;
            const peakMonth = peakDay.month;

            if (day3Month > peakMonth || (day3Month === 1 && peakMonth === 12)) {
                // ƒê√£ l·∫•n sang th√°ng sau v√† v·∫´n ch∆∞a kh√¥
                // C·∫ßn ti·∫øp t·ª•c theo d√µi ƒë·ªÉ chuy·ªÉn sang tr·∫°ng th√°i kh√¥
                const daysAfterDay3 = sequence.filter(day =>
                    day.date.getTime() > day3AfterPeak.date.getTime()
                );

                const firstDryDayAfter = daysAfterDay3.find(day =>
                    this.isDryDay(day.feeling, day.mucus)
                );

                if (firstDryDayAfter) {
                    // ƒê√£ t√¨m th·∫•y ng√†y kh√¥ ƒë·∫ßu ti√™n sau khi l·∫•n sang th√°ng m·ªõi
                    const additionalDays = Math.ceil((firstDryDayAfter.date.getTime() - day3AfterPeak.date.getTime()) / (24 * 60 * 60 * 1000));

                    return {
                        isComplete: false,
                        phase: 'cross_month_drying',
                        analysis: `Tr∆∞·ªùng h·ª£p 2 - L·∫•n sang th√°ng sau. Ng√†y 3 sau ƒë·ªânh v·∫´n c√≥ √≠t ch·∫•t ti·∫øt. ƒê√£ t√¨m th·∫•y ng√†y kh√¥ ƒë·∫ßu ti√™n sau ${additionalDays} ng√†y. C·∫ßn theo d√µi th√™m ƒë·ªÉ x√°c nh·∫≠n ho√†n th√†nh chu k·ª≥.`,
                        cycleType: 'cross_month_drying',
                        peakDay: peakDay,
                        firstDryDay: firstDryDayAfter.date,
                        additionalDaysNeeded: additionalDays
                    };
                } else {
                    // V·∫´n ch∆∞a kh√¥, c·∫ßn ti·∫øp t·ª•c theo d√µi
                    return {
                        isComplete: false,
                        phase: 'extended_post_peak_tracking',
                        analysis: `Tr∆∞·ªùng h·ª£p 2 - L·∫•n sang th√°ng sau. Ng√†y 3 sau ƒë·ªânh v·∫´n c√≥ √≠t ch·∫•t ti·∫øt. C·∫ßn ti·∫øp t·ª•c theo d√µi ƒë·∫øn khi chuy·ªÉn sang tr·∫°ng th√°i kh√¥.`,
                        cycleType: 'cross_month_incomplete',
                        peakDay: peakDay,
                        currentStatus: 'still_secreting',
                        instruction: 'Ti·∫øp t·ª•c theo d√µi h√†ng ng√†y ƒë·∫øn khi c√≥ c·∫£m gi√°c kh√¥'
                    };
                }
            } else {
                // V·∫´n trong c√πng th√°ng nh∆∞ng ch∆∞a kh√¥
                return {
                    isComplete: false,
                    phase: 'post_peak_not_dry',
                    analysis: `ƒê√£ qua ng√†y ƒë·ªânh nh∆∞ng ng√†y th·ª© 3 sau ƒë·ªânh v·∫´n ch∆∞a kh√¥ (${day3AfterPeak.mucus || day3AfterPeak.feeling}). C·∫ßn ti·∫øp t·ª•c theo d√µi.`,
                    peakDay: peakDay,
                    day3Status: day3AfterPeak,
                    instruction: 'Ti·∫øp t·ª•c theo d√µi ƒë·∫øn khi c√≥ c·∫£m gi√°c kh√¥'
                };
            }
        }
    }

    /**
     * D·ª± ƒëo√°n ng√†y ƒë·ªânh chu k·ª≥ ti·∫øp theo
     */
    private predictNextPeak(peakDay: any, cycleDays: any[]): any {
        if (!peakDay) {
            return {
                prediction: null,
                confidence: 'none',
                message: 'Ch∆∞a x√°c ƒë·ªãnh ƒë∆∞·ª£c ng√†y ƒë·ªânh c·ªßa chu k·ª≥ hi·ªán t·∫°i'
            };
        }

        // D·ª± ƒëo√°n d·ª±a tr√™n chu k·ª≥ trung b√¨nh 28 ng√†y (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo l·ªãch s·ª≠ user)
        const avgCycleLength = 28;
        const currentPeakDay = peakDay.cycleDayNumber;

        // Ng√†y ƒë·ªânh th∆∞·ªùng r∆°i v√†o kho·∫£ng ng√†y 12-16 c·ªßa chu k·ª≥
        const nextCycleStart = new Date(cycleDays[0].date);
        nextCycleStart.setDate(nextCycleStart.getDate() + avgCycleLength);

        const predictedPeakDate = new Date(nextCycleStart);
        predictedPeakDate.setDate(predictedPeakDate.getDate() + currentPeakDay - 1);

        return {
            prediction: {
                date: predictedPeakDate,
                cycleDayNumber: currentPeakDay,
                range: {
                    earliest: new Date(predictedPeakDate.getTime() - 2 * 24 * 60 * 60 * 1000),
                    latest: new Date(predictedPeakDate.getTime() + 2 * 24 * 60 * 60 * 1000)
                }
            },
            confidence: 'medium',
            message: `D·ª± ƒëo√°n ng√†y ƒë·ªânh chu k·ª≥ ti·∫øp theo v√†o kho·∫£ng ${predictedPeakDate.toLocaleDateString('vi-VN')} (¬±2 ng√†y)`
        };
    }

    /**
     * T·∫°o khuy·∫øn ngh·ªã d·ª±a tr√™n ph√¢n t√≠ch
     */
    private generateRecommendations(pattern: any, cycleDays: any[]): string[] {
        const recommendations: string[] = [];

        if (pattern.type === 'normal_pattern') {
            recommendations.push('‚úÖ Chu k·ª≥ c·ªßa b·∫°n theo m·∫´u b√¨nh th∆∞·ªùng theo ph∆∞∆°ng ph√°p Billings');
            recommendations.push('üìä Ti·∫øp t·ª•c theo d√µi ƒë·ªÅu ƒë·∫∑n ƒë·ªÉ duy tr√¨ ƒë·ªô ch√≠nh x√°c');

            // T√¨m kho·∫£ng th·ªùi gian kh√¥ gi·ªØa l·∫•m t·∫•m m√°u v√† ƒë·ª•c
            const spottingDay = cycleDays.find(d => d.mucusObservation === 'l·∫•m t·∫•m m√°u');
            const cloudyDay = cycleDays.find(d => d.mucusObservation === 'ƒë·ª•c');

            if (spottingDay && cloudyDay && cloudyDay.cycleDayNumber > spottingDay.cycleDayNumber) {
                const dryPeriod = cloudyDay.cycleDayNumber - spottingDay.cycleDayNumber;
                recommendations.push(`üåü Th·ªùi gian chu k·ª≥ kh√¥: ${dryPeriod} ng√†y (t·ª´ ng√†y ${spottingDay.cycleDayNumber} ƒë·∫øn ${cloudyDay.cycleDayNumber})`);
            }
        }

        if (pattern.type === 'irregular_pattern') {
            recommendations.push('‚ö†Ô∏è M·∫´u chu k·ª≥ ch∆∞a r√µ r√†ng, c·∫ßn theo d√µi th√™m');
            recommendations.push('üìù Theo d√µi th√™m 2 chu k·ª≥ n·ªØa ƒë·ªÉ x√°c ƒë·ªãnh m·∫´u ch√≠nh x√°c');
            recommendations.push('üí° Ghi nh·∫≠n ƒë·∫ßy ƒë·ªß c·∫£m gi√°c v√† quan s√°t ch·∫•t nh·ªùn m·ªói ng√†y');
        }

        if (pattern.type === 'unknown_pattern') {
            recommendations.push('üìà C·∫ßn th√™m d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch chu k·ª≥');
            recommendations.push('üéØ H√£y ghi nh·∫≠n ƒë·∫ßy ƒë·ªß th√¥ng tin m·ªói ng√†y');
            recommendations.push('‚è∞ Theo d√µi √≠t nh·∫•t 21-35 ng√†y ƒë·ªÉ c√≥ m·ªôt chu k·ª≥ ho√†n ch·ªânh');
        }

        return recommendations;
    }

    /**
     * X√°c ƒë·ªãnh ng√†y c√≥ ph·∫£i l√† ng√†y kh√¥ kh√¥ng
     * Ng√†y kh√¥ bao g·ªìm:
     * - feeling === 'kh√¥' 
     * - mucusObservation === '√≠t ch·∫•t ti·∫øt'
     * - C·∫£ hai ƒë·ªÅu undefined (kh√¥ng c√≥ ghi nh·∫≠n = kh√¥)
     */
    private isDryDay(feeling?: string, mucusObservation?: string): boolean {
        // Tr∆∞·ªùng h·ª£p r√µ r√†ng l√† kh√¥
        if (feeling === 'kh√¥' || mucusObservation === '√≠t ch·∫•t ti·∫øt') {
            return true;
        }

        // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ ghi nh·∫≠n g√¨ (undefined) - coi nh∆∞ kh√¥
        if (!feeling && !mucusObservation) {
            return true;
        }

        // Tr∆∞·ªùng h·ª£p c√≥ ghi nh·∫≠n nh∆∞ng kh√¥ng ph·∫£i kh√¥
        return false;
    }

    /**
     * T√°i s·∫Øp x·∫øp cycle numbers sau khi x√≥a chu k·ª≥
     * ƒê·∫£m b·∫£o cycle numbers li√™n t·ª•c: 1, 2, 3, 4...
     */
    async reorderCycleNumbers(userId: string): Promise<void> {
        try {
            // L·∫•y t·∫•t c·∫£ chu k·ª≥ c·ªßa user, s·∫Øp x·∫øp theo startDate
            const cycles = await MenstrualCycles.find({ createdByUserId: userId })
                .sort({ startDate: 1 });

            const bulkOps = cycles.map((cycle, index) => ({
                updateOne: {
                    filter: { _id: cycle._id },
                    update: { cycleNumber: index + 1 }
                }
            }));

            if (bulkOps.length > 0) {
                await MenstrualCycles.bulkWrite(bulkOps);
                console.log(`‚úÖ Reordered ${bulkOps.length} cycles for user ${userId}`);
            }
        } catch (error) {
            console.error('Error reordering cycle numbers:', error);
            throw error;
        }
    }

    /**
     * Kh√¥i ph·ª•c chu k·ª≥ b·ªã x√≥a nh·∫ßm b·∫±ng c√°ch t·∫°o l·∫°i t·ª´ cycle days
     * T√¨m c√°c cycle days kh√¥ng thu·ªôc cycle n√†o v√† t·∫°o chu k·ª≥ m·ªõi cho ch√∫ng
     */
    async recoverOrphanedCycleDays(userId: string): Promise<any> {
        try {
            // T√¨m t·∫•t c·∫£ cycle days c·ªßa user
            const allCycleDays = await CycleDays.find({})
                .populate({
                    path: 'cycleId',
                    match: { createdByUserId: userId }
                });

            // L·ªçc ra c√°c cycle days thu·ªôc v·ªÅ user nh∆∞ng cycle ƒë√£ b·ªã x√≥a
            const orphanedDays = allCycleDays.filter(day =>
                day.cycleId === null || day.cycleId === undefined
            );

            if (orphanedDays.length === 0) {
                return { recovered: false, message: 'Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu b·ªã m·∫•t' };
            }

            // Nh√≥m c√°c ng√†y theo th√°ng v√† t√¨m ng√†y b·∫Øt ƒë·∫ßu ti·ªÅm nƒÉng
            const groupedByMonth = orphanedDays.reduce((groups, day) => {
                const month = `${day.year}-${day.month.toString().padStart(2, '0')}`;
                if (!groups[month]) groups[month] = [];
                groups[month].push(day);
                return groups;
            }, {} as Record<string, any[]>);

            const recoveredCycles = [];

            for (const [monthKey, monthDays] of Object.entries(groupedByMonth)) {
                // S·∫Øp x·∫øp theo ng√†y
                monthDays.sort((a, b) => a.date.getTime() - b.date.getTime());

                // T√¨m ng√†y ƒë·∫ßu c√≥ m√°u ho·∫∑c ng√†y ƒë·∫ßu ti√™n
                const startDay = monthDays.find(day =>
                    day.mucusObservation === 'c√≥ m√°u' ||
                    day.mucusObservation === 'l·∫•m t·∫•m m√°u'
                ) || monthDays[0];

                // T·∫°o chu k·ª≥ m·ªõi
                const newCycle = await this.createCycle(userId, startDay.date);

                // C·∫≠p nh·∫≠t t·∫•t c·∫£ cycle days trong th√°ng n√†y v·ªÅ chu k·ª≥ m·ªõi
                await CycleDays.updateMany(
                    { _id: { $in: monthDays.map(d => d._id) } },
                    { cycleId: newCycle._id }
                );

                // T√≠nh l·∫°i cycle day numbers
                await this.recalculateAllCycleDays(newCycle._id.toString(), startDay.date);

                recoveredCycles.push({
                    cycleNumber: newCycle.cycleNumber,
                    startDate: startDay.date,
                    recoveredDays: monthDays.length
                });
            }

            // T√°i s·∫Øp x·∫øp cycle numbers
            await this.reorderCycleNumbers(userId);

            return {
                recovered: true,
                message: `ƒê√£ kh√¥i ph·ª•c ${recoveredCycles.length} chu k·ª≥`,
                cycles: recoveredCycles
            };

        } catch (error) {
            console.error('Error recovering orphaned cycle days:', error);
            throw error;
        }
    }

    /**
     * T√≠nh to√°n result theo c√¥ng th·ª©c Billings
     * Result = (Ng√†y X + 1) - Ng√†y Y
     * X: ng√†y ƒë·ªânh, Y: 1 ng√†y tr∆∞·ªõc khi c√≥ m√°u c·ªßa chu k·ª≥ ti·∫øp theo
     */
    async calculateCycleResult(cycleId: string): Promise<{
        peakDayX?: number;
        dayXPlus1?: number;
        dayY?: number;
        result?: number;
        status: 'normal' | 'short' | 'long' | 'incomplete';
        message: string;
        nextCycleId?: string;
    }> {
        try {
            const cycle = await MenstrualCycles.findById(cycleId);
            if (!cycle) {
                throw new Error('Cycle not found');
            }

            // T√¨m ng√†y X (ng√†y ƒë·ªânh)
            const cycleDays = await CycleDays.find({ cycleId })
                .sort({ date: 1 })
                .lean();

            const peakDay = cycleDays.find(day =>
                day.mucusObservation === 'trong v√† √¢m h·ªô cƒÉng' && day.feeling === 'tr∆°n'
            );

            if (!peakDay) {
                return {
                    status: 'incomplete',
                    message: 'Ch∆∞a x√°c ƒë·ªãnh ƒë∆∞·ª£c ng√†y ƒë·ªânh (X) trong chu k·ª≥ n√†y'
                };
            }

            const peakDayX = peakDay.cycleDayNumber;
            const dayXPlus1 = peakDayX! + 1;

            // T√¨m chu k·ª≥ ti·∫øp theo
            const nextCycle = await MenstrualCycles.findOne({
                createdByUserId: cycle.createdByUserId,
                cycleNumber: cycle.cycleNumber + 1
            });

            if (!nextCycle) {
                return {
                    peakDayX,
                    dayXPlus1,
                    status: 'incomplete',
                    message: 'Ch∆∞a c√≥ chu k·ª≥ ti·∫øp theo ƒë·ªÉ t√≠nh to√°n result'
                };
            }

            // T√¨m ng√†y ƒë·∫ßu c√≥ m√°u c·ªßa chu k·ª≥ ti·∫øp theo
            const nextCycleDays = await CycleDays.find({ cycleId: nextCycle._id })
                .sort({ date: 1 })
                .lean();

            const firstBloodDay = nextCycleDays.find(day =>
                day.mucusObservation === 'c√≥ m√°u'
            );

            if (!firstBloodDay) {
                return {
                    peakDayX,
                    dayXPlus1,
                    status: 'incomplete',
                    message: 'Ch∆∞a c√≥ d·ªØ li·ªáu m√°u kinh nguy·ªát c·ªßa chu k·ª≥ ti·∫øp theo'
                };
            }

            // T√≠nh dayY = 1 ng√†y tr∆∞·ªõc ng√†y c√≥ m√°u c·ªßa chu k·ª≥ ti·∫øp theo
            // V√¨ chu k·ª≥ m·ªõi b·∫Øt ƒë·∫ßu t·ª´ ng√†y c√≥ m√°u, dayY s·∫Ω l√† ng√†y cu·ªëi c·ªßa chu k·ª≥ hi·ªán t·∫°i
            const dayY = firstBloodDay.cycleDayNumber! - 1;

            // T√≠nh result = (X + 1) - Y
            const result = dayXPlus1 - dayY;

            // X√°c ƒë·ªãnh tr·∫°ng th√°i d·ª±a tr√™n result
            let status: 'normal' | 'short' | 'long' | 'incomplete';
            let message: string;

            // Ki·ªÉm tra tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: sau ng√†y X c√≥ c·∫£m gi√°c "kh√¥" v√† kh√¥ng c√≥ "d·∫ßy"
            const postPeakDays = cycleDays.filter(day =>
                day.cycleDayNumber! > peakDayX! &&
                day.cycleDayNumber! <= peakDayX! + 3
            );

            const hasDryAfterPeak = postPeakDays.some(day =>
                day.feeling === 'kh√¥' && day.mucusObservation !== 'd·∫ßy'
            );

            if (hasDryAfterPeak) {
                status = 'short';
                message = 'Chu k·ª≥ ng·∫Øn - c√≥ c·∫£m gi√°c "kh√¥" sau ng√†y X m√† kh√¥ng c√≥ quan s√°t "d·∫ßy"';
            } else if ((result >= -16 && result <= -11) || (result >= 11 && result <= 16)) {
                status = 'normal';
                message = `Chu k·ª≥ b√¨nh th∆∞·ªùng (result = ${result})`;
            } else if (Math.abs(result) < 11) {
                status = 'short';
                message = `Chu k·ª≥ ng·∫Øn (result = ${result})`;
            } else if (Math.abs(result) > 16) {
                status = 'long';
                message = `Chu k·ª≥ d√†i (result = ${result})`;
            } else {
                status = 'normal';
                message = `Chu k·ª≥ b√¨nh th∆∞·ªùng (result = ${result})`;
            }

            return {
                peakDayX,
                dayXPlus1,
                dayY,
                result,
                status,
                message,
                nextCycleId: nextCycle._id.toString()
            };

        } catch (error) {
            console.error('Error calculating cycle result:', error);
            throw error;
        }
    }

    /**
     * L·∫•y b√°o c√°o chi ti·∫øt cho 1 chu k·ª≥
     */
    async getDetailedCycleReport(cycleId: string): Promise<any> {
        try {
            const cycle = await MenstrualCycles.findById(cycleId);
            if (!cycle) {
                throw new Error('Cycle not found');
            }

            const cycleDays = await CycleDays.find({ cycleId })
                .sort({ date: 1 })
                .lean();

            // T·∫°o chart data
            const chartData = cycleDays.map(day => {
                let symbol = '';
                let fertilityProbability = 0;

                if (day.mucusObservation === 'c√≥ m√°u' || day.mucusObservation === 'l·∫•m t·∫•m m√°u') {
                    symbol = 'M';
                    fertilityProbability = 10;
                } else if (day.isPeakDay || (day.mucusObservation === 'trong v√† √¢m h·ªô cƒÉng' && day.feeling === 'tr∆°n')) {
                    symbol = 'X';
                    fertilityProbability = 100;
                } else if (day.peakDayRelative === 1) {
                    symbol = '1';
                    fertilityProbability = 75;
                } else if (day.peakDayRelative === 2) {
                    symbol = '2';
                    fertilityProbability = 50;
                } else if (day.peakDayRelative === 3) {
                    symbol = '3';
                    fertilityProbability = 20;
                } else if (day.mucusObservation === 'ƒë·ª•c' || day.mucusObservation === 'ƒë·ª•c nhi·ªÅu s·ª£i' || day.mucusObservation === 'trong nhi·ªÅu s·ª£i') {
                    symbol = 'C';
                    fertilityProbability = 60;
                } else if (this.isDryDay(day.feeling, day.mucusObservation)) {
                    symbol = 'D';
                    fertilityProbability = 5;
                } else {
                    symbol = 'S';
                    fertilityProbability = 15;
                }

                return {
                    date: day.date.toISOString().split('T')[0],
                    dayNumber: day.cycleDayNumber || 0,
                    mucusObservation: day.mucusObservation,
                    feeling: day.feeling,
                    symbol,
                    fertilityProbability,
                    isPeakDay: day.isPeakDay || false
                };
            });

            // T√≠nh to√°n result
            const resultCalculation = await this.calculateCycleResult(cycleId);

            // Th·ªëng k√™
            const statistics = {
                totalDays: cycleDays.length,
                peakDay: cycleDays.find(d => d.isPeakDay || (d.mucusObservation === 'trong v√† √¢m h·ªô cƒÉng' && d.feeling === 'tr∆°n'))?.cycleDayNumber,
                fertileDays: chartData.filter(d => d.fertilityProbability >= 60).length,
                dryDays: chartData.filter(d => d.symbol === 'D').length
            };

            return {
                cycle,
                chartData,
                resultCalculation,
                statistics
            };

        } catch (error) {
            console.error('Error getting detailed cycle report:', error);
            throw error;
        }
    }

    /**
     * So s√°nh 3 chu k·ª≥ g·∫ßn nh·∫•t v√† ƒë√°nh gi√° s·ª©c kh·ªèe
     */
    async getThreeCycleComparison(userId: string): Promise<any> {
        try {
            const cycles = await MenstrualCycles.find({ createdByUserId: userId })
                .sort({ cycleNumber: -1 })
                .limit(3)
                .lean();

            if (cycles.length < 3) {
                return {
                    cycles: [],
                    pattern: {
                        averageLength: 0,
                        averageResult: 0,
                        consistency: 'insufficient_data',
                        trend: 'insufficient_data'
                    },
                    healthAssessment: {
                        overall: 'needs_attention',
                        message: 'C·∫ßn √≠t nh·∫•t 3 chu k·ª≥ ho√†n ch·ªânh ƒë·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch so s√°nh ch√≠nh x√°c',
                        recommendations: ['Ti·∫øp t·ª•c theo d√µi chu k·ª≥ ƒë·ªÅu ƒë·∫∑n', 'Ghi nh·∫≠n ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu h√†ng ng√†y']
                    }
                };
            }

            const cycleResults = [];
            const results: number[] = [];
            const lengths: number[] = [];

            for (const cycle of cycles.reverse()) { // S·∫Øp x·∫øp l·∫°i theo th·ª© t·ª± th·ªùi gian
                const result = await this.calculateCycleResult(cycle._id.toString());
                const length = cycle.endDate ?
                    Math.ceil((cycle.endDate.getTime() - cycle.startDate.getTime()) / (24 * 60 * 60 * 1000)) :
                    undefined;

                cycleResults.push({
                    cycleNumber: cycle.cycleNumber,
                    startDate: cycle.startDate.toISOString().split('T')[0],
                    endDate: cycle.endDate?.toISOString().split('T')[0],
                    peakDay: result.peakDayX,
                    result: result.result,
                    status: result.status,
                    length
                });

                if (result.result !== undefined) {
                    results.push(result.result);
                }
                if (length !== undefined) {
                    lengths.push(length);
                }
            }

            // T√≠nh to√°n pattern
            const averageLength = lengths.length > 0 ? lengths.reduce((a, b) => a + b, 0) / lengths.length : 28;
            const averageResult = results.length > 0 ? results.reduce((a, b) => a + b, 0) / results.length : 0;

            // X√°c ƒë·ªãnh consistency
            let consistency: 'stable' | 'variable' | 'irregular';
            if (results.length >= 3) {
                const variance = results.reduce((acc, val) => acc + Math.pow(val - averageResult, 2), 0) / results.length;
                if (variance <= 4) {
                    consistency = 'stable';
                } else if (variance <= 16) {
                    consistency = 'variable';
                } else {
                    consistency = 'irregular';
                }
            } else {
                consistency = 'variable';
            }

            // X√°c ƒë·ªãnh trend
            let trend: 'normal' | 'getting_shorter' | 'getting_longer';
            if (lengths.length >= 3) {
                const firstHalf = lengths.slice(0, Math.floor(lengths.length / 2));
                const secondHalf = lengths.slice(Math.ceil(lengths.length / 2));
                const firstAvg = firstHalf.reduce((a, b) => a + b, 0) / firstHalf.length;
                const secondAvg = secondHalf.reduce((a, b) => a + b, 0) / secondHalf.length;

                if (secondAvg - firstAvg > 3) {
                    trend = 'getting_longer';
                } else if (firstAvg - secondAvg > 3) {
                    trend = 'getting_shorter';
                } else {
                    trend = 'normal';
                }
            } else {
                trend = 'normal';
            }

            // Health assessment
            const healthAssessment = this.assessHealth(cycleResults, consistency, trend, averageResult);

            return {
                cycles: cycleResults,
                pattern: {
                    averageLength,
                    averageResult,
                    consistency,
                    trend
                },
                healthAssessment
            };

        } catch (error) {
            console.error('Error in three cycle comparison:', error);
            throw error;
        }
    }

    /**
     * ƒê√°nh gi√° s·ª©c kh·ªèe d·ª±a tr√™n pattern chu k·ª≥
     */
    private assessHealth(cycleResults: any[], consistency: string, trend: string, averageResult: number): any {
        let overall: 'healthy' | 'needs_attention' | 'consult_doctor';
        let message: string;
        const recommendations: string[] = [];

        // ƒê·∫øm s·ªë chu k·ª≥ b√¨nh th∆∞·ªùng
        const normalCycles = cycleResults.filter(c => c.status === 'normal').length;
        const shortCycles = cycleResults.filter(c => c.status === 'short').length;
        const longCycles = cycleResults.filter(c => c.status === 'long').length;

        if (normalCycles >= 2 && consistency === 'stable') {
            overall = 'healthy';
            message = 'Chu k·ª≥ kinh nguy·ªát b√¨nh th∆∞·ªùng v√† ·ªïn ƒë·ªãnh. Ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh.';
            recommendations.push('Ti·∫øp t·ª•c theo d√µi ƒë·ªÅu ƒë·∫∑n');
            recommendations.push('Duy tr√¨ ch·∫ø ƒë·ªô ƒÉn u·ªëng v√† t·∫≠p luy·ªán c√¢n b·∫±ng');
        } else if (shortCycles >= 2 || longCycles >= 2) {
            overall = 'consult_doctor';
            message = 'Ph√°t hi·ªán nhi·ªÅu chu k·ª≥ b·∫•t th∆∞·ªùng. N√™n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© chuy√™n khoa.';
            recommendations.push('ƒê·∫∑t l·ªãch kh√°m v·ªõi b√°c sƒ© ph·ª• khoa');
            recommendations.push('Ti·∫øp t·ª•c theo d√µi chi ti·∫øt ƒë·ªÉ cung c·∫•p th√¥ng tin cho b√°c sƒ©');
        } else if (consistency === 'irregular') {
            overall = 'needs_attention';
            message = 'Chu k·ª≥ kh√¥ng ƒë·ªÅu ƒë·∫∑n. C·∫ßn theo d√µi th√™m v√† ƒëi·ªÅu ch·ªânh l·ªëi s·ªëng.';
            recommendations.push('Gi·∫£m stress v√† ƒë·∫£m b·∫£o gi·∫•c ng·ªß ƒë·ªß');
            recommendations.push('C√¢n nh·∫Øc ƒëi·ªÅu ch·ªânh ch·∫ø ƒë·ªô ƒÉn u·ªëng');
            recommendations.push('Theo d√µi th√™m 2-3 chu k·ª≥ n·ªØa');
        } else {
            overall = 'needs_attention';
            message = 'Chu k·ª≥ c·∫ßn ƒë∆∞·ª£c theo d√µi th√™m ƒë·ªÉ ƒë√°nh gi√° ch√≠nh x√°c.';
            recommendations.push('Ti·∫øp t·ª•c ghi nh·∫≠n d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß');
            recommendations.push('Theo d√µi th√™m √≠t nh·∫•t 2 chu k·ª≥ n·ªØa');
        }

        return {
            overall,
            message,
            recommendations
        };
    }

    /**
     * T·ª± ƒë·ªông s·ª≠a ch·ªØa d·ªØ li·ªáu chu k·ª≥ b·ªã l·ªói
     */
    async autoFixCycleData(userId: string): Promise<any> {
        try {
            const fixes = [];

            // 1. Kh√¥i ph·ª•c cycle days b·ªã m·∫•t
            const recoveryResult = await this.recoverOrphanedCycleDays(userId);
            if (recoveryResult.recovered) {
                fixes.push(recoveryResult);
            }

            // 2. T√°i s·∫Øp x·∫øp cycle numbers
            await this.reorderCycleNumbers(userId);
            fixes.push({ action: 'reorder', message: 'ƒê√£ s·∫Øp x·∫øp l·∫°i s·ªë th·ª© t·ª± chu k·ª≥' });

            // 3. Ki·ªÉm tra v√† s·ª≠a cycle days kh√¥ng c√≥ cycleId h·ª£p l·ªá
            const invalidCycleDays = await CycleDays.find({})
                .populate({
                    path: 'cycleId',
                    match: { createdByUserId: userId }
                });

            let fixedDays = 0;
            for (const day of invalidCycleDays) {
                if (!day.cycleId) {
                    // T√¨m chu k·ª≥ ph√π h·ª£p d·ª±a tr√™n ng√†y
                    const nearestCycle = await MenstrualCycles.findOne({
                        createdByUserId: userId,
                        startDate: { $lte: day.date }
                    }).sort({ startDate: -1 });

                    if (nearestCycle) {
                        day.cycleId = nearestCycle._id as any;
                        await day.save();
                        fixedDays++;
                    }
                }
            }

            if (fixedDays > 0) {
                fixes.push({ action: 'fix_days', message: `ƒê√£ s·ª≠a ${fixedDays} ng√†y b·ªã l·ªói` });
            }

            return {
                success: true,
                fixes: fixes,
                message: `ƒê√£ th·ª±c hi·ªán ${fixes.length} s·ª≠a ch·ªØa d·ªØ li·ªáu`
            };

        } catch (error) {
            console.error('Error in autoFixCycleData:', error);
            throw error;
        }
    }

    /**
     * Validation th√¥ng minh tr∆∞·ªõc khi l∆∞u d·ªØ li·ªáu ng√†y
     * Ki·ªÉm tra t√≠nh h·ª£p l√Ω theo ph∆∞∆°ng ph√°p Billings
     */
    async validateCycleDayInput(cycleId: string, date: Date, mucusObservation?: string, feeling?: string): Promise<{
        isValid: boolean;
        warnings: string[];
        errors: string[];
        suggestions: string[];
    }> {
        try {
            const warnings: string[] = [];
            const errors: string[] = [];
            const suggestions: string[] = [];

            // 1. Ki·ªÉm tra ng√†y ƒë·ªânh tr√πng l·∫∑p trong chu k·ª≥
            if (mucusObservation === 'trong v√† √¢m h·ªô cƒÉng' && feeling === 'tr∆°n') {
                const existingPeakDays = await CycleDays.find({
                    cycleId,
                    mucusObservation: 'trong v√† √¢m h·ªô cƒÉng',
                    feeling: 'tr∆°n',
                    date: { $ne: date }
                });

                if (existingPeakDays.length > 0) {
                    const existingDate = existingPeakDays[0].date.toLocaleDateString('vi-VN');
                    errors.push(`Ng√†y ƒë·ªânh ƒë√£ t·ªìn t·∫°i trong chu k·ª≥ n√†y (${existingDate}). M·ªói chu k·ª≥ ch·ªâ c√≥ 1 ng√†y ƒë·ªânh duy nh·∫•t.`);
                    suggestions.push('N·∫øu b·∫°n mu·ªën thay ƒë·ªïi ng√†y ƒë·ªânh, h√£y x√≥a ng√†y ƒë·ªânh c≈© tr∆∞·ªõc.');
                    suggestions.push('Ho·∫∑c ƒë√¢y c√≥ th·ªÉ l√† chu k·ª≥ m·ªõi c·∫ßn ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông.');
                }
            }

            // 2. Ki·ªÉm tra nhi·ªÅu ng√†y c√≥ m√°u r·ªùi r·∫°c
            if (mucusObservation === 'c√≥ m√°u') {
                const cycleDays = await CycleDays.find({ cycleId }).sort({ date: 1 });
                const bloodDays = cycleDays.filter(d => d.mucusObservation === 'c√≥ m√°u');

                if (bloodDays.length > 0) {
                    const lastBloodDay = bloodDays[bloodDays.length - 1];
                    const daysBetween = Math.abs((date.getTime() - lastBloodDay.date.getTime()) / (1000 * 60 * 60 * 24));

                    if (daysBetween > 7) {
                        warnings.push(`C√≥ kho·∫£ng c√°ch ${Math.round(daysBetween)} ng√†y k·ªÉ t·ª´ ng√†y c√≥ m√°u cu·ªëi c√πng. ƒê√¢y c√≥ th·ªÉ l√† chu k·ª≥ m·ªõi.`);
                        suggestions.push('Xem x√©t vi·ªác t·∫°o chu k·ª≥ m·ªõi n·∫øu chu k·ª≥ hi·ªán t·∫°i ƒë√£ ho√†n th√†nh.');
                    }
                }
            }

            // 3. Ki·ªÉm tra logic th·ª© t·ª± theo Billings
            const cycleDays = await CycleDays.find({ cycleId }).sort({ date: 1 });
            const futureEntries = cycleDays.filter(d => d.date > date);

            if (mucusObservation === 'c√≥ m√°u' && futureEntries.length > 0) {
                const hasPeakAfter = futureEntries.some(d =>
                    d.mucusObservation === 'trong v√† √¢m h·ªô cƒÉng' && d.feeling === 'tr∆°n'
                );

                if (hasPeakAfter) {
                    warnings.push('B·∫°n ƒëang th√™m ng√†y c√≥ m√°u sau ng√†y ƒë·ªânh. ƒêi·ªÅu n√†y c√≥ th·ªÉ ch·ªâ ra chu k·ª≥ m·ªõi.');
                    suggestions.push('Ki·ªÉm tra xem c√≥ c·∫ßn t·∫°o chu k·ª≥ m·ªõi kh√¥ng.');
                }
            }

            // 4. Ki·ªÉm tra t√≠nh nh·∫•t qu√°n c·ªßa mucus v√† feeling
            if (mucusObservation && feeling) {
                const rules = MUCUS_FEELING_RULES;
                const allowedFeelings = rules[mucusObservation as keyof typeof rules] || [];

                if (allowedFeelings.length > 0 && !allowedFeelings.includes(feeling)) {
                    errors.push(`C·∫£m gi√°c "${feeling}" kh√¥ng ph√π h·ª£p v·ªõi quan s√°t "${mucusObservation}" theo ph∆∞∆°ng ph√°p Billings.`);
                    suggestions.push(`C·∫£m gi√°c ph√π h·ª£p: ${allowedFeelings.join(', ')}`);
                }
            }

            // 5. Ki·ªÉm tra chu k·ª≥ qu√° d√†i
            const cycle = await MenstrualCycles.findById(cycleId);
            if (cycle) {
                const daysSinceStart = Math.ceil((date.getTime() - cycle.startDate.getTime()) / (1000 * 60 * 60 * 24));

                if (daysSinceStart > 45) {
                    warnings.push(`Chu k·ª≥ ƒë√£ k√©o d√†i ${daysSinceStart} ng√†y, d√†i h∆°n b√¨nh th∆∞·ªùng (21-35 ng√†y).`);
                    suggestions.push('C√¢n nh·∫Øc tham kh·∫£o √Ω ki·∫øn b√°c sƒ© v·ªÅ chu k·ª≥ b·∫•t th∆∞·ªùng.');
                }
            }

            return {
                isValid: errors.length === 0,
                warnings,
                errors,
                suggestions
            };

        } catch (error) {
            console.error('Error in validateCycleDayInput:', error);
            return {
                isValid: false,
                warnings: [],
                errors: ['L·ªói h·ªá th·ªëng khi ki·ªÉm tra d·ªØ li·ªáu'],
                suggestions: []
            };
        }
    }
}

export default new MenstrualCycleService();
