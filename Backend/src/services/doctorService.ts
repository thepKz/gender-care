import  Doctor  from '../models/Doctor';
import User from '../models/User';
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import DoctorSchedules from '../models/DoctorSchedules';

// Th√™m function validation ObjectId
const isValidObjectId = (id: string): boolean => {
  return mongoose.Types.ObjectId.isValid(id);
};

export const getAllDoctors = () => Doctor.find().populate('userId', 'fullName email avatar phone');
export const getDoctorById = (id: string) => Doctor.findById(id).populate('userId', 'fullName email avatar phone');

// S·ª≠a createDoctor ƒë·ªÉ t·ª± t·∫°o user account t·ª´ doctorInfo
export const createDoctor = async (doctorInfo: any) => {
  try {
    // Validate required doctor fields
    if (!doctorInfo.fullName) {
      throw new Error('T√™n b√°c sƒ© (fullName) l√† b·∫Øt bu·ªôc');
    }

    // T·ª± ƒë·ªông t·∫°o email t·ª´ fullName
    const normalizedName = doctorInfo.fullName
      .toLowerCase()
      .replace(/bs\./g, '') // B·ªè ti·ªÅn t·ªë BS.
      .replace(/[^\w\s]/g, '') // B·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
      .trim()
      .split(' ')
      .join(''); // N·ªëi c√°c t·ª´ l·∫°i

    const email = `bs.${normalizedName}@genderhealthcare.com`;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      throw new Error(`Email ${email} ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ƒë·∫∑t t√™n kh√°c cho b√°c sƒ©.`);
    }

    // T·∫°o password m·∫∑c ƒë·ªãnh
    const defaultPassword = 'doctor123';
    const hashedPassword = await bcrypt.hash(defaultPassword, 10);

    // T·∫°o user account v·ªõi th√¥ng tin t·ª´ doctorInfo
    const user = await User.create({
      email,
      password: hashedPassword,
      fullName: doctorInfo.fullName,
      phone: doctorInfo.phone || '',
      gender: doctorInfo.gender || 'other',
      address: doctorInfo.address || '',
      role: 'doctor',
      emailVerified: true,
      isActive: true
    });

    // Lo·∫°i b·ªè c√°c field user kh·ªèi doctorInfo ƒë·ªÉ tr√°nh duplicate
    const { fullName, phone, gender, address, ...pureDoctorlnfo } = doctorInfo;

    // T·∫°o doctor record v·ªõi userId v·ª´a t·∫°o
    const doctor = await Doctor.create({
      userId: user._id,
      ...pureDoctorlnfo
    });

    // Populate user info ƒë·ªÉ tr·∫£ v·ªÅ
    const populatedDoctor = await Doctor.findById(doctor._id).populate('userId', 'fullName email avatar phone');
    
    // Log th√¥ng tin account m·ªõi t·∫°o cho admin
    console.log(`‚úÖ ƒê√£ t·∫°o b√°c sƒ© m·ªõi: ${doctorInfo.fullName}`);
    console.log(`üìß Email: ${email}`);
    console.log(`üîë Password m·∫∑c ƒë·ªãnh: ${defaultPassword}`);
    
    return populatedDoctor;
  } catch (error: any) {
    throw new Error(error.message);
  }
};

export const updateDoctor = (id: string, data: any) => {
  // Lo·∫°i b·ªè userId kh·ªèi data ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng th·ªÉ c·∫≠p nh·∫≠t
  const { userId, ...updateData } = data;
  
  // N·∫øu c√≥ ng∆∞·ªùi c·ªë t√¨nh g·ª≠i userId, ghi log c·∫£nh b√°o
  if (userId) {
    console.warn(`C·ªë g·∫Øng c·∫≠p nh·∫≠t userId cho doctor ${id}, ƒë√£ b·ªã lo·∫°i b·ªè`);
  }
  
  return Doctor.findByIdAndUpdate(id, updateData, { new: true }).populate('userId', 'fullName email avatar phone');
};

export const deleteDoctor = (id: string) => Doctor.findByIdAndDelete(id);

// L·∫•y th·ªëng k√™ v·ªÅ b√°c sƒ©
export const getDoctorStatistics = async (doctorId: string) => {
  try {
    // L·∫•y th√¥ng tin b√°c sƒ© v·ªõi populate ƒë·ªÉ c√≥ name
    const doctor = await Doctor.findById(doctorId).populate('userId', 'fullName');
    if (!doctor) {
      throw new Error('Kh√¥ng t√¨m th·∫•y b√°c sƒ©');
    }

    // T√¨m t·∫•t c·∫£ l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ©
    const schedule = await DoctorSchedules.findOne({ doctorId });
    
    if (!schedule) {
      return {
        doctorId,
        name: (doctor as any).userId.fullName,
        bookedSlots: 0,
        absentSlots: 0,
        absentDays: 0
      };
    }

    let bookedSlots = 0;
    let absentSlots = 0;
    let absentDays = 0;

    // ƒê·∫øm qua t·ª´ng ng√†y trong l·ªãch
    for (const weekDay of schedule.weekSchedule) {
      let absentSlotsInDay = 0;
      let bookedSlotsInDay = 0;
      
      // ƒê·∫øm slots trong ng√†y
      for (const slot of weekDay.slots) {
        if (slot.status === 'Booked') {
          bookedSlotsInDay++;
        } else if (slot.status === 'Absent') {
          absentSlotsInDay++;
        }
      }
      
      // Logic s·ª≠a: N·∫øu ƒë·ªß 8 slot absent = 1 ng√†y ngh·ªâ, kh√¥ng t√≠nh v√†o absentSlots
      if (absentSlotsInDay >= 8) {
        absentDays++;
        // Kh√¥ng c·ªông 8 slot absent n√†y v√†o absentSlots v√¨ ƒë√£ th√†nh ng√†y ngh·ªâ
      } else {
        // Ch·ªâ slot absent l·∫ª m·ªõi t√≠nh v√†o absentSlots
        absentSlots += absentSlotsInDay;
      }
      
      // Booked slots lu√¥n ƒë∆∞·ª£c ƒë·∫øm b√¨nh th∆∞·ªùng
      bookedSlots += bookedSlotsInDay;
    }

    return {
      doctorId,
      name: (doctor as any).userId.fullName,
      bookedSlots,
      absentSlots,
      absentDays
    };

  } catch (error) {
    console.error('Error getting doctor statistics:', error);
    throw error;
  }
};

// L·∫•y th·ªëng k√™ c·ªßa t·∫•t c·∫£ b√°c sƒ© (cho staff)
export const getAllDoctorsStatistics = async () => {
  try {
    // L·∫•y t·∫•t c·∫£ b√°c sƒ©
    const allDoctors = await Doctor.find().populate('userId', 'fullName');
    
    const allStatistics = [];

    for (const doctor of allDoctors) {
      // T√¨m l·ªãch l√†m vi·ªác c·ªßa t·ª´ng b√°c sƒ©
      const schedule = await DoctorSchedules.findOne({ doctorId: doctor._id });
      
      let bookedSlots = 0;
      let absentSlots = 0;
      let absentDays = 0;

      if (schedule) {
        // ƒê·∫øm qua t·ª´ng ng√†y trong l·ªãch
        for (const weekDay of schedule.weekSchedule) {
          let absentSlotsInDay = 0;
          let bookedSlotsInDay = 0;
          
          // ƒê·∫øm slots trong ng√†y
          for (const slot of weekDay.slots) {
            if (slot.status === 'Booked') {
              bookedSlotsInDay++;
            } else if (slot.status === 'Absent') {
              absentSlotsInDay++;
            }
          }
          
          // Logic s·ª≠a: N·∫øu ƒë·ªß 8 slot absent = 1 ng√†y ngh·ªâ, kh√¥ng t√≠nh v√†o absentSlots
          if (absentSlotsInDay >= 8) {
            absentDays++;
            // Kh√¥ng c·ªông 8 slot absent n√†y v√†o absentSlots v√¨ ƒë√£ th√†nh ng√†y ngh·ªâ
          } else {
            // Ch·ªâ slot absent l·∫ª m·ªõi t√≠nh v√†o absentSlots
            absentSlots += absentSlotsInDay;
          }
          
          // Booked slots lu√¥n ƒë∆∞·ª£c ƒë·∫øm b√¨nh th∆∞·ªùng
          bookedSlots += bookedSlotsInDay;
        }
      }

      allStatistics.push({
        doctorId: doctor._id,
        name: (doctor as any).userId.fullName,
        bookedSlots,
        absentSlots,
        absentDays
      });
    }

    return allStatistics;

  } catch (error) {
    console.error('Error getting all doctors statistics:', error);
    throw error;
  }
};
