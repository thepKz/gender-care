import { Doctor } from '../models/Doctor';
import User from '../models/User';
import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';

// Th√™m function validation ObjectId
const isValidObjectId = (id: string): boolean => {
  return mongoose.Types.ObjectId.isValid(id);
};

// API public - ·∫©n email v√† phone ƒë·ªÉ b·∫£o v·ªá privacy
export const getAllDoctors = async (page: number = 1, limit: number = 10) => {
  const skip = (page - 1) * limit;
  
  // Th·ª±c hi·ªán song song ƒë·ªÉ t·ªëi ∆∞u performance
  const [doctors, total] = await Promise.all([
    Doctor.find({ isDeleted: { $ne: true } }) // Lo·∫°i b·ªè doctors ƒë√£ b·ªã x√≥a
      .populate('userId', 'fullName avatar gender address') // B·ªè email v√† phone
      .limit(limit)
      .skip(skip)
      .sort({ createdAt: -1 }), // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o
    Doctor.countDocuments({ isDeleted: { $ne: true } }) // ƒê·∫øm ch·ªâ doctors active
  ]);
  
  return {
    doctors,
    pagination: {
      page,
      limit,
      total,
      totalPages: Math.ceil(total / limit),
      hasNext: page < Math.ceil(total / limit),
      hasPrev: page > 1
    }
  };
};

export const getDoctorById = (id: string) => {
  // Validate ObjectId format
  if (!isValidObjectId(id)) {
    throw new Error('ID b√°c sƒ© kh√¥ng h·ª£p l·ªá');
  }
  
  return Doctor.findOne({ _id: id, isDeleted: { $ne: true } }).populate('userId', 'fullName avatar gender address'); // B·ªè email v√† phone
};

// S·ª≠a createDoctor ƒë·ªÉ t·ª± t·∫°o user account t·ª´ doctorInfo
export const createDoctor = async (doctorInfo: any) => {
  try {
    // Validate required doctor fields
    if (!doctorInfo.fullName) {
      throw new Error('T√™n b√°c sƒ© (fullName) l√† b·∫Øt bu·ªôc');
    }

    // T·ª± ƒë·ªông t·∫°o email t·ª´ fullName
    const normalizedName = doctorInfo.fullName
      .toLowerCase()
      .replace(/bs\./g, '') // B·ªè ti·ªÅn t·ªë BS.
      .replace(/[^\w\s]/g, '') // B·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
      .trim()
      .split(' ')
      .join(''); // N·ªëi c√°c t·ª´ l·∫°i

    const email = `bs.${normalizedName}@genderhealthcare.com`;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      throw new Error(`Email ${email} ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ƒë·∫∑t t√™n kh√°c cho b√°c sƒ©.`);
    }

    // T·∫°o password m·∫∑c ƒë·ªãnh tu√¢n th·ªß quy t·∫Øc b·∫£o m·∫≠t (ch·ªØ th∆∞·ªùng, in hoa, s·ªë, k√Ω t·ª± ƒë·∫∑c bi·ªát)
    const defaultPassword = 'Doctor123!';
    const hashedPassword = await bcrypt.hash(defaultPassword, 10);

    // T·∫°o user account v·ªõi th√¥ng tin t·ª´ doctorInfo
    const user = await User.create({
      email,
      password: hashedPassword,
      fullName: doctorInfo.fullName,
      phone: doctorInfo.phone || '',
      gender: doctorInfo.gender || 'other',
      address: doctorInfo.address || '',
      role: 'doctor',
      emailVerified: true,
      isActive: true
    });

    // Lo·∫°i b·ªè c√°c field user kh·ªèi doctorInfo ƒë·ªÉ tr√°nh duplicate
    const { fullName, phone, gender, address, ...pureDoctorlnfo } = doctorInfo;

    // T·∫°o doctor record v·ªõi userId v·ª´a t·∫°o
    const doctor = await Doctor.create({
      userId: user._id,
      ...pureDoctorlnfo
    });

    // Populate user info ƒë·ªÉ tr·∫£ v·ªÅ (·∫©n email/phone trong response)
    const populatedDoctor = await Doctor.findById(doctor._id).populate('userId', 'fullName avatar gender address');
    
    // Log th√¥ng tin account m·ªõi t·∫°o cho admin
    console.log(`‚úÖ ƒê√£ t·∫°o b√°c sƒ© m·ªõi: ${doctorInfo.fullName}`);
    console.log(`üìß Email: ${email}`);
    console.log(`üîë Password m·∫∑c ƒë·ªãnh: ${defaultPassword}`);
    
    return populatedDoctor;
  } catch (error: any) {
    throw new Error(error.message);
  }
};

export const updateDoctor = async (id: string, data: any) => {
  // Validate ObjectId format
  if (!isValidObjectId(id)) {
    throw new Error('ID b√°c sƒ© kh√¥ng h·ª£p l·ªá');
  }

  // Lo·∫°i b·ªè c√°c field kh√¥ng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t
  const { 
    userId, 
    _id, 
    createdAt, 
    updatedAt,
    ...updateData 
  } = data;
  
  // Log c·∫£nh b√°o n·∫øu c√≥ ng∆∞·ªùi c·ªë t√¨nh g·ª≠i field b·ªã c·∫•m
  if (userId) {
    console.warn(`C·ªë g·∫Øng c·∫≠p nh·∫≠t userId cho doctor ${id}, ƒë√£ b·ªã lo·∫°i b·ªè`);
  }
  if (_id) {
    console.warn(`C·ªë g·∫Øng c·∫≠p nh·∫≠t _id cho doctor ${id}, ƒë√£ b·ªã lo·∫°i b·ªè`);
  }

  // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
  if (updateData.experience !== undefined && (updateData.experience < 0 || updateData.experience > 50)) {
    throw new Error('S·ªë nƒÉm kinh nghi·ªám ph·∫£i t·ª´ 0-50 nƒÉm');
  }
  
  if (updateData.rating !== undefined && (updateData.rating < 0 || updateData.rating > 5)) {
    throw new Error('Rating ph·∫£i t·ª´ 0-5');
  }

  // Ki·ªÉm tra doctor c√≥ t·ªìn t·∫°i v√† ch∆∞a b·ªã x√≥a
  const existingDoctor = await Doctor.findOne({ _id: id, isDeleted: { $ne: true } });
  if (!existingDoctor) {
    throw new Error('Kh√¥ng t√¨m th·∫•y b√°c sƒ© ho·∫∑c b√°c sƒ© ƒë√£ b·ªã x√≥a');
  }
  
  return Doctor.findOneAndUpdate(
    { _id: id, isDeleted: { $ne: true } },
    updateData,
    { new: true }
  ).populate('userId', 'fullName avatar gender address');
};

export const deleteDoctor = async (id: string, adminId: string, force: boolean = false) => {
  // Validate ObjectId format
  if (!isValidObjectId(id)) {
    throw new Error('ID b√°c sƒ© kh√¥ng h·ª£p l·ªá');
  }

  // Ki·ªÉm tra doctor c√≥ t·ªìn t·∫°i v√† ch∆∞a b·ªã x√≥a
  const doctor = await Doctor.findOne({ _id: id, isDeleted: { $ne: true } }).populate('userId');
  if (!doctor) {
    throw new Error('Kh√¥ng t√¨m th·∫•y b√°c sƒ© ho·∫∑c b√°c sƒ© ƒë√£ b·ªã x√≥a');
  }

  // Business logic checks (ch·ªâ khi kh√¥ng force)
  if (!force) {
    // Ki·ªÉm tra c√≥ appointments ƒëang ho·∫°t ƒë·ªông kh√¥ng
    // Note: C·∫ßn implement khi c√≥ Appointment model
    // const activeAppointments = await Appointment.find({
    //   doctorId: id,
    //   status: { $in: ['pending', 'confirmed'] }
    // });
    // if (activeAppointments.length > 0) {
    //   throw new Error('Kh√¥ng th·ªÉ x√≥a b√°c sƒ© c√≥ l·ªãch h·∫πn ƒëang ho·∫°t ƒë·ªông. H√£y h·ªßy t·∫•t c·∫£ l·ªãch h·∫πn tr∆∞·ªõc.');
    // }

    // Ki·ªÉm tra c√≥ Q&A ƒëang x·ª≠ l√Ω kh√¥ng
    // Note: C·∫ßn implement khi c√≥ DoctorQA model
    // const pendingQA = await DoctorQA.find({
    //   doctorId: id,
    //   status: { $in: ['pending', 'contacted'] }
    // });
    // if (pendingQA.length > 0) {
    //   throw new Error('Kh√¥ng th·ªÉ x√≥a b√°c sƒ© c√≥ c√¢u h·ªèi ƒëang x·ª≠ l√Ω. H√£y x·ª≠ l√Ω xong t·∫•t c·∫£ Q&A tr∆∞·ªõc.');
    // }
  }

  // Soft delete doctor record
  const deletedDoctor = await Doctor.findByIdAndUpdate(
    id,
    {
      isDeleted: true,
      deletedAt: new Date(),
      deletedBy: adminId
    },
    { new: true }
  ).populate('userId', 'fullName avatar gender address');

  // V√¥ hi·ªáu h√≥a user account li√™n quan
  await User.findByIdAndUpdate(doctor.userId._id, { 
    isActive: false 
  });

  // Log audit trail
  console.log(`üóëÔ∏è Doctor deleted by admin:`, {
    doctorId: id,
    doctorName: (doctor.userId as any).fullName,
    adminId,
    force,
    timestamp: new Date()
  });

  return {
    message: force ? 'ƒê√£ force x√≥a b√°c sƒ©' : 'ƒê√£ v√¥ hi·ªáu h√≥a b√°c sƒ©',
    doctor: deletedDoctor,
    userDeactivated: true
  };
};

// Service ri√™ng ƒë·ªÉ l·∫•y contact info (ch·ªâ cho admin/staff ho·∫∑c khi c√≥ appointment)
export const getDoctorContactInfo = (id: string) => {
  // Validate ObjectId format
  if (!isValidObjectId(id)) {
    throw new Error('ID b√°c sƒ© kh√¥ng h·ª£p l·ªá');
  }
  
  return Doctor.findOne({ _id: id, isDeleted: { $ne: true } }).populate('userId', 'fullName email phone avatar gender address');
};
