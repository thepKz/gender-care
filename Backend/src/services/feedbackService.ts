import Feedbacks, { IFeedbacks } from '../models/Feedbacks';
import Appointments from '../models/Appointments';
import Doctor from '../models/Doctor';
import mongoose from 'mongoose';

interface CreateFeedbackData {
  appointmentId: string;
  rating: number;
  feedback: string;
  comment?: string;
  userId: string;
  doctorRating?: number;
  serviceQuality?: number;
}

interface FeedbackStats {
  totalFeedbacks: number;
  averageRating: number;
  ratingDistribution: {
    1: number;
    2: number;
    3: number;
    4: number;
    5: number;
  };
}

class FeedbackService {
  // T·∫°o feedback m·ªõi v·ªõi validation nghi·ªáp v·ª•
  async createFeedback(data: CreateFeedbackData): Promise<IFeedbacks> {
    const { appointmentId, rating, feedback, comment, userId, doctorRating, serviceQuality } = data;

    console.log('üîç FeedbackService.createFeedback called with:', data);

    // Validate appointmentId format
    if (!mongoose.Types.ObjectId.isValid(appointmentId)) {
      throw new Error('appointmentId kh√¥ng h·ª£p l·ªá');
    }

    // Validate appointment v√† quy·ªÅn s·ªü h·ªØu
    const appointment = await Appointments.findById(appointmentId)
      .populate('doctorId')
      .populate('serviceId')
      .populate('packageId');

    console.log('üìã Found appointment:', appointment ? 'Yes' : 'No');
    if (appointment) {
      console.log('üìã Appointment details:', {
        id: appointment._id,
        status: appointment.status,
        createdByUserId: appointment.createdByUserId,
        doctorId: appointment.doctorId?._id,
        serviceId: appointment.serviceId?._id
      });
    }

    if (!appointment) {
      throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn');
    }

    console.log('üîç Checking ownership:', {
      appointmentOwner: appointment.createdByUserId.toString(),
      requestUser: userId,
      isOwner: appointment.createdByUserId.toString() === userId
    });

    if (appointment.createdByUserId.toString() !== userId) {
      throw new Error('B·∫°n ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° l·ªãch h·∫πn c·ªßa m√¨nh');
    }

    console.log('üîç Checking status:', {
      currentStatus: appointment.status,
      isCompleted: appointment.status === 'completed'
    });

    if (appointment.status !== 'completed') {
      throw new Error('Ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° l·ªãch h·∫πn ƒë√£ ho√†n th√†nh');
    }

    // Ki·ªÉm tra ƒë√£ c√≥ feedback ch∆∞a
    console.log('üîç Checking existing feedback...');
    const existingFeedback = await Feedbacks.findOne({ appointmentId });
    console.log('üìã Existing feedback found:', existingFeedback ? 'Yes' : 'No');
    
    if (existingFeedback) {
      console.log('üîÑ Updating existing feedback instead of creating new one');
      
      try {
        // C·∫≠p nh·∫≠t feedback hi·ªán t·∫°i using findByIdAndUpdate
        const updatedFeedback = await Feedbacks.findByIdAndUpdate(
          existingFeedback._id,
          {
            rating,
            feedback,
            comment: comment || '',
            doctorRating: doctorRating || rating,
            serviceQuality: serviceQuality || rating
          },
          { new: true } // Return updated document
        );

        console.log('‚úÖ Existing feedback updated successfully');
        
        // C·∫≠p nh·∫≠t rating trung b√¨nh c·ªßa doctor n·∫øu c√≥
        if (appointment.doctorId) {
          console.log('üìä Updating doctor average rating...');
          await this.updateDoctorAverageRating(appointment.doctorId._id);
        }
        
        // Populate v√† return
        console.log('üîó Populating updated feedback data...');
        await updatedFeedback?.populate([
          { path: 'appointmentId', select: 'appointmentDate appointmentTime status' },
          { path: 'doctorId', select: 'userId', populate: { path: 'userId', select: 'fullName' } },
          { path: 'serviceId', select: 'serviceName' },
          { path: 'packageId', select: 'name' }
        ]);
        
        console.log('üéâ Feedback update completed successfully');
        return updatedFeedback!;
      } catch (error) {
        console.error('‚ùå Error updating existing feedback:', error);
        throw error;
      }
    }

    // T·∫°o feedback m·ªõi
    console.log('üíæ Creating new feedback with data:', {
      rating,
      feedback,
      comment: comment || '',
      doctorRating: doctorRating || rating,
      serviceQuality: serviceQuality || rating,
      appointmentId,
      doctorId: appointment.doctorId?._id,
      serviceId: appointment.serviceId?._id,
      packageId: appointment.packageId?._id
    });

    try {
      const newFeedback = new Feedbacks({
        rating,
        feedback,
        comment: comment || '',
        doctorRating: doctorRating || rating, // Fallback v·ªÅ rating chung n·∫øu kh√¥ng c√≥ doctorRating
        serviceQuality: serviceQuality || rating, // Fallback v·ªÅ rating chung n·∫øu kh√¥ng c√≥ serviceQuality
        appointmentId,
        doctorId: appointment.doctorId?._id,
        serviceId: appointment.serviceId?._id,
        packageId: appointment.packageId?._id
      });

      console.log('üíæ Saving feedback to database...');
      await newFeedback.save();
      console.log('‚úÖ Feedback saved successfully');

      // C·∫≠p nh·∫≠t rating trung b√¨nh c·ªßa doctor n·∫øu c√≥
      // S·ª≠ d·ª•ng doctorRating ri√™ng bi·ªát n·∫øu c√≥, fallback v·ªÅ rating t·ªïng quan
      if (appointment.doctorId) {
        console.log('üìä Updating doctor average rating...');
        await this.updateDoctorAverageRating(appointment.doctorId._id);
      }

      // Populate v√† return
      console.log('üîó Populating feedback data...');
      await newFeedback.populate([
        { path: 'appointmentId', select: 'appointmentDate appointmentTime status' },
        { path: 'doctorId', select: 'userId', populate: { path: 'userId', select: 'fullName' } },
        { path: 'serviceId', select: 'serviceName' },
        { path: 'packageId', select: 'name' }
      ]);

      console.log('üéâ Feedback creation completed successfully');
      return newFeedback;
    } catch (error) {
      console.error('‚ùå Error creating new feedback:', error);
      throw error;
    }
  }

  // L·∫•y feedback c·ªßa appointment c·ª• th·ªÉ
  async getFeedbackByAppointment(appointmentId: string, userId: string): Promise<IFeedbacks> {
    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu appointment
    const appointment = await Appointments.findById(appointmentId);
    if (!appointment) {
      throw new Error('Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn');
    }

    if (appointment.createdByUserId.toString() !== userId) {
      throw new Error('B·∫°n ch·ªâ c√≥ th·ªÉ xem ƒë√°nh gi√° l·ªãch h·∫πn c·ªßa m√¨nh');
    }

    const feedback = await Feedbacks.findOne({ appointmentId })
      .populate([
        { path: 'appointmentId', select: 'appointmentDate appointmentTime status' },
        { path: 'doctorId', select: 'userId', populate: { path: 'userId', select: 'fullName' } },
        { path: 'serviceId', select: 'serviceName' },
        { path: 'packageId', select: 'name' }
      ]);

    if (!feedback) {
      throw new Error('Ch∆∞a c√≥ ƒë√°nh gi√° cho l·ªãch h·∫πn n√†y');
    }

    return feedback;
  }

  // L·∫•y t·∫•t c·∫£ feedback c·ªßa user
  async getUserFeedbacks(userId: string): Promise<IFeedbacks[]> {
    const feedbacks = await Feedbacks.find({})
      .populate([
        { 
          path: 'appointmentId', 
          match: { createdByUserId: userId },
          select: 'appointmentDate appointmentTime status createdByUserId',
          populate: {
            path: 'profileId',
            select: 'fullName'
          }
        },
        { path: 'doctorId', select: 'userId', populate: { path: 'userId', select: 'fullName' } },
        { path: 'serviceId', select: 'serviceName' },
        { path: 'packageId', select: 'name' }
      ]);

    // L·ªçc ra ch·ªâ nh·ªØng feedback c√≥ appointment thu·ªôc v·ªÅ user
    return feedbacks.filter(feedback => feedback.appointmentId !== null);
  }

  // C·∫≠p nh·∫≠t feedback
  async updateFeedback(feedbackId: string, updateData: Partial<CreateFeedbackData>, userId: string): Promise<IFeedbacks> {
    const existingFeedback = await Feedbacks.findById(feedbackId)
      .populate('appointmentId');

    if (!existingFeedback) {
      throw new Error('Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°');
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    const appointment = existingFeedback.appointmentId as any;
    if (appointment.createdByUserId.toString() !== userId) {
      throw new Error('B·∫°n ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t ƒë√°nh gi√° c·ªßa m√¨nh');
    }

    // Validate rating
    if (updateData.rating && (updateData.rating < 1 || updateData.rating > 5)) {
      throw new Error('Rating ph·∫£i t·ª´ 1 ƒë·∫øn 5');
    }

    // C·∫≠p nh·∫≠t
    const updateFields: any = {};
    if (updateData.rating !== undefined) updateFields.rating = updateData.rating;
    if (updateData.feedback !== undefined) updateFields.feedback = updateData.feedback;
    if (updateData.comment !== undefined) updateFields.comment = updateData.comment;
    updateFields.updatedAt = new Date();

    const updatedFeedback = await Feedbacks.findByIdAndUpdate(
      feedbackId,
      updateFields,
      { new: true, runValidators: true }
    ).populate([
      { path: 'appointmentId', select: 'appointmentDate appointmentTime status' },
      { path: 'doctorId', select: 'userId', populate: { path: 'userId', select: 'fullName' } },
      { path: 'serviceId', select: 'serviceName' },
      { path: 'packageId', select: 'name' }
    ]);

    if (!updatedFeedback) {
      throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë√°nh gi√°');
    }

    // C·∫≠p nh·∫≠t l·∫°i rating trung b√¨nh c·ªßa doctor
    if (updateData.rating && appointment.doctorId) {
      await this.updateDoctorAverageRating(appointment.doctorId);
    }

    return updatedFeedback;
  }

  // L·∫•y th·ªëng k√™ feedback c·ªßa doctor
  async getDoctorFeedbackStats(doctorId: string): Promise<FeedbackStats> {
    const feedbacks = await Feedbacks.find({ doctorId });

    if (feedbacks.length === 0) {
      return {
        totalFeedbacks: 0,
        averageRating: 0,
        ratingDistribution: { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 }
      };
    }

    // S·ª≠ d·ª•ng doctorRating n·∫øu c√≥, fallback v·ªÅ rating chung
    const totalRating = feedbacks.reduce((sum, feedback) => sum + (feedback.doctorRating || feedback.rating), 0);
    const averageRating = totalRating / feedbacks.length;

    const ratingDistribution = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };
    feedbacks.forEach(feedback => {
      const rating = feedback.doctorRating || feedback.rating;
      ratingDistribution[rating as keyof typeof ratingDistribution]++;
    });

    return {
      totalFeedbacks: feedbacks.length,
      averageRating: Math.round(averageRating * 10) / 10, // Round to 1 decimal
      ratingDistribution
    };
  }

  // C·∫≠p nh·∫≠t rating trung b√¨nh c·ªßa doctor
  private async updateDoctorAverageRating(doctorId: mongoose.Types.ObjectId): Promise<void> {
    try {
      const stats = await this.getDoctorFeedbackStats(doctorId.toString());
      
      await Doctor.findByIdAndUpdate(doctorId, {
        rating: stats.averageRating
      });

      console.log(`Updated doctor ${doctorId} rating to ${stats.averageRating}`);
    } catch (error) {
      console.error(`Error updating doctor rating for ${doctorId}:`, error);
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn lu·ªìng ch√≠nh
    }
  }

  // L·∫•y feedback g·∫ßn ƒë√¢y (ƒë·ªÉ hi·ªÉn th·ªã dashboard)
  async getRecentFeedbacks(limit: number = 10): Promise<IFeedbacks[]> {
    return await Feedbacks.find({})
      .sort({ createdAt: -1 })
      .limit(limit)
      .populate([
        { path: 'appointmentId', select: 'appointmentDate appointmentTime' },
        { path: 'doctorId', select: 'userId', populate: { path: 'userId', select: 'fullName' } },
        { path: 'serviceId', select: 'serviceName' }
      ]);
  }

  // Ki·ªÉm tra appointment c√≥ th·ªÉ feedback kh√¥ng
  async canGiveFeedback(appointmentId: string, userId: string): Promise<boolean> {
    try {
      const appointment = await Appointments.findById(appointmentId);
      if (!appointment) return false;
      
      // Ki·ªÉm tra ownership
      if (appointment.createdByUserId.toString() !== userId) return false;
      
      // Ki·ªÉm tra status
      if (appointment.status !== 'completed') return false;
      
      // Ki·ªÉm tra ƒë√£ c√≥ feedback ch∆∞a
      const existingFeedback = await Feedbacks.findOne({ appointmentId });
      if (existingFeedback) return false;
      
      return true;
    } catch {
      return false;
    }
  }

  // L·∫•y t·∫•t c·∫£ feedback c·ªßa doctor ƒë·ªÉ hi·ªÉn th·ªã tr√™n profile
  async getDoctorFeedbacks(doctorId: string, page: number = 1, limit: number = 10, ratingFilter?: number, showHidden?: boolean): Promise<{
    feedbacks: IFeedbacks[];
    totalCount: number;
    averageRating: number;
    stats: FeedbackStats;
  }> {
    const skip = (page - 1) * limit;

    // Build query with rating filter
    const query: any = { doctorId };
    if (ratingFilter && ratingFilter >= 1 && ratingFilter <= 5) {
      query.rating = ratingFilter;
    }
    if (!showHidden) {
      query.isHidden = false;
    }

    // L·∫•y feedbacks v·ªõi pagination v√† populate th√¥ng tin kh√°ch h√†ng
    const feedbacks = await Feedbacks.find(query)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .populate([
        { 
          path: 'appointmentId', 
          select: 'appointmentDate appointmentTime profileId',
          populate: {
            path: 'profileId',
            select: 'fullName gender phone'
          }
        },
        { path: 'serviceId', select: 'serviceName' },
        { path: 'packageId', select: 'name' }
      ]);

    // L·∫•y t·ªïng s·ªë feedback (v·ªõi filter n·∫øu c√≥)
    const totalCount = await Feedbacks.countDocuments(query);

    // L·∫•y th·ªëng k√™ (kh√¥ng filter ƒë·ªÉ show t·ªïng quan)
    const stats = await this.getDoctorFeedbackStats(doctorId);

    return {
      feedbacks,
      totalCount,
      averageRating: stats.averageRating,
      stats
    };
  }

  // ·∫®n/hi·ªán feedback
  async hideFeedback(feedbackId: string, isHidden: boolean): Promise<IFeedbacks | null> {
    return await Feedbacks.findByIdAndUpdate(
      feedbackId,
      { isHidden },
      { new: true }
    );
  }

  // X√≥a feedback
  async deleteFeedback(feedbackId: string): Promise<boolean> {
    const result = await Feedbacks.findByIdAndDelete(feedbackId);
    return !!result;
  }
}

export default new FeedbackService(); 